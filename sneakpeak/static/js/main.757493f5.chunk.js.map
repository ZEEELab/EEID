{"version":3,"sources":["InfectiousMatter/agent.js","../node_modules/jspdf/dist sync","InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","SimComponents/InfectiousMatterContactGraph.js","SimComponents/InfectiousMatterMigrationTable.js","SimComponents/InfectiousMatterPlot.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["uniqid","require","Agent","body","this","track_all_contacts","state","undefined","interaction_callback","uuid","viva_color","location","home","cohorts","color","home_state","migrating","masked","prototype","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","ctx","agent_size","fillStyle","strokeStyle","lineWidth","fillRect","position","x","y","strokeRect","stroke","module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","MatterCollisionEvents","name","version","for","install","matter","create","Body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","event","pairs","map","pair","trigger","bodyA","bodyB","Plugin","register","getRandomArbitrary","min","max","Math","random","Location","bounds","friction","occupants","border_color","draw_borders","width","height","beginPath","rect","get_random_position","remove_agent","agent","filter","a","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","recurring","clear_events","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","numMasked","sim_div","useRef","setup_world","num_to_mask","res1","type","payload","residence_props","res2","res3","res4","residence","num_agents","current","new_migration_event","from_location","to_location","Common","shuffle","agents","num_masked","console","log","useEffect","simulation_params","sim_time_per_day","link_lifetime","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","EXPOSED","A_INFECTED","S_INFECTED","RECOVERED","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","default_infection_params","use_pathogen_contagiousness","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","context","forEach","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","SENSITIVE","add_location","location_properties","new_location","home_color","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","pathogen","post_infection_callback","days_to_recover","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","future_state","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","node","addNode","something","get_prob_of_infection","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","events","remove","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","source","dest","migrating_agent","velocity","setPosition","setVelocity","viva_layout","Viva","Layout","forceDirected","springLength","springCoeff","dragCoeff","viva_graphics","View","webglGraphics","InfectiousMatterContactGraph","worldReadyTrigger","graph_div","viva_renderer","renderer","container","graphics","renderLinks","layout","interactive","zoomOut","getNodeUI","InfectiousMatterMigrationTable","useState","setLocations","locationIdMap","setlocationIdMap","migrationRevision","setMigrationRevision","migrationLinks","setMigrationLinks","title","field","columns","setColumns","link_diff","new_link","old_link","lookup","editable","migration_link","last_location_id_map","location_list","loc_idx","location_idx","location_uuid","new_migration_links","new_from_idx","new_to_idx","location_map","filtering","toolbar","search","pageSizeOptions","onRowAdd","new_data","Promise","reject","new_link_data","find","onRowUpdate","old_data","old_link_data","update_idx","findIndex","entry","update_migration_links","onRowDelete","link_to_remove","infection_layout","margin","l","r","pad","showlegend","legend","xanchor","xaxis","rangemode","yaxis","initial_traces","stackgroup","marker","reducer","action","cur_time","cur_state_counts","InfectiousMatterPlot","useReducer","plotTraces","dispatchTraces","plotRevision","setPlotRevision","plot_layout","interval","setInterval","api_return","p","update_traces","clearInterval","datarevision","useStyles","makeStyles","theme","root","flexGrow","minWidth","controlls","paper","minHeight","textAlign","paperControlls","padding","spacing","mask_transmission_props","self_protection","others_protection","default_infection_prob","new_agent","agent_id","random_agent","masked_list","unmasked_list","cur_num_masked","num_needing_masks","InfectiousMatterContainer","props","classes","setNumMasked","maskSelfProtection","setMaskSelfProtection","maskOthersProtection","setMaskOthersProtection","movementScale","setMovementScale","setRedrawTrigger","className","Grid","direction","justify","alignItems","item","Card","List","ListSubheader","disableSticky","ListItem","ListItemText","primary","Slider","value","aria-labelledby","valueLabelDisplay","onChange","newValue","step","Button","variant","onClick","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.757493f5.chunk.js","sourcesContent":["var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 358;","var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.friction = 0.2;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\t\tif (this_event.recurring) {\n\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true});\n\t\t}\n\t\tthis_event.callback();\n\t\tnum_events += 1;\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.1), 1);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = 0.5;\n}\n\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, numMasked}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (num_to_mask) => {\n        let res_prop = {\n            type: \"residence\", \n            friction: 0.01,\n            bounds: {\n                min: {\n                    x: 10,\n                    y: 10,\n                },\n                max: {\n                    x: 190,\n                    y: 190,\n                }\n            }\n        };\n\n        let res_prop2 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 10,\n                    y: 210,\n                },\n                max: {\n                    x: 190,\n                    y: 390,\n                }\n            }\n        };\n\n        let res_prop3 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 210,\n                    y: 10,\n                },\n                max: {\n                    x: 390,\n                    y: 190,\n                }\n            }\n        };\n\n        let res_prop4 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 210,\n                    y: 210,\n                },\n                max: {\n                    x: 390,\n                    y: 390,\n                }\n            }\n        };\n\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop}});\n        let res2 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop2}});\n        let res3 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop3}});\n        let res4 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop4}});\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: 100}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res2, num_agents: 100}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res3, num_agents: 100}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res4, num_agents: 100}});\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'infect_random_agents', payload:{num_agents: 3}});\n        \n        InfectiousMatterRef.current.add_event({time: 1000, callback: InfectiousMatterRef.current.new_migration_event(), recurring: true });\n        \n        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res1.uuid, to_location:res2.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res2.uuid, to_location:res3.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res3.uuid, to_location:res4.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res1.uuid, num_agents:2}});\n        \n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: num_to_mask}});\n        console.log(num_to_mask);\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 1000,\n            agent_size: 4,\n            link_lifetime: 200,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 2.0,\n        };\n  \n        let default_simulation_colors = {\n            viva_colors: [0x9370DBff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n            matter_colors: [\"mediumpurple\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, default_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(numMasked);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(numMasked);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:400, width:400}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    EXPOSED: 1,\n    A_INFECTED: 2,\n    S_INFECTED: 3,\n    RECOVERED: 4,\n    size: 5\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:2000,\n    agent_size: 3,\n    link_lifetime: 4000,\n    pathogen_mut_prob: 0.1\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: false\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                });\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true})\n\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    //refactor to event!\n    switch(new_state) {\n        case AgentStates.EXPOSED:\n            stroke_color = \"orange\";\n            break;\n        case AgentStates.S_INFECTED:\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n        case AgentStates.A_INFECTED:\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"blue\";\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            org.render.lineWidth = 0;\n            break;\n        };\n\n    org.render.strokeStyle = stroke_color;\n    \n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root');\n    }\n    this.update_org_state(org, AgentStates.EXPOSED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n\n    this.add_event( {\n\n        time: Math.max(jStat.normal.sample(this.infection_params.incubation_period_mu, this.infection_params.incubation_period_sigma), 1)*this.simulation_params.sim_time_per_day,\n        callback: () => {\n            this.update_org_state(org, eventual_infected_state);\n            let days_to_recover = 0;\n            if (eventual_infected_state == AgentStates.A_INFECTED) {\n                //\n                days_to_recover = Math.max(jStat.normal.sample(this.infection_params.asymptomatic_infectious_period_mu, this.infection_params.asymptomatic_infectious_period_sigma), 0.5);\n            } else {\n                //we're symtomatic!\n                days_to_recover = Math.max(jStat.normal.sample(this.infection_params.infectious_period_mu, this.infection_params.infectious_period_sigma), 4);\n            }\n\n            this.add_event( {\n                time: days_to_recover*this.simulation_params.sim_time_per_day,\n                callback: () => {\n                    this.update_org_state(org, AgentStates.RECOVERED)\n                }\n            });\n        }\n    });\n\n\n}\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n}\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge)\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if ((other_agent.state == AgentStates.S_INFECTED ||\n                other_agent.state == AgentStates.A_INFECTED) && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    //we're going to infect this org so \n                    //now we have to pick which state...\n                    let future_state;\n                    if (Matter.Common.random(0,1) < this.infection_params.fraction_asymptomatic) {\n                        future_state = AgentStates.A_INFECTED;\n                    } else {\n                        future_state = AgentStates.S_INFECTED;\n                    }\n\n                    this.expose_org(this_agent_body, future_state, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n            }\n\n            this.add_event( {\n                time: this.simulation_params.link_lifetime+1, \n                callback: this._check_edge_for_removal(this_edge)\n            });\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n    new_agent_body.render.fillStyle = home_location.home_color || \"black\";\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {something:true});\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color\n\n    \n    home_location.add_agent(new_agent_body.agent_object);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n    \n    return(new_agent_body);\n};\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 100; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import React, {useEffect, useState, useReducer, useRef, useLayoutEffect} from 'react';\nimport {AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nimport Agent from '../InfectiousMatter/agent.js';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Viva from 'vivagraphjs';\n\nlet viva_layout = Viva.Graph.Layout.forceDirected(ContactGraph, {\n    springLength : 15,\n    springCoeff : 0.00005,\n    dragCoeff : 0.01,\n    gravity : -1.5\n});\n\nlet viva_graphics = Viva.Graph.View.webglGraphics();\n\n\nconst InfectiousMatterContactGraph = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const graph_div = useRef(null);\n\n    useEffect( ()=> {\n        console.log(\"initalizing viva graph\");\n        let viva_renderer = Viva.Graph.View.renderer(ContactGraph, {\n            container: graph_div.current,\n            graphics: viva_graphics,\n            renderLinks: true,\n            layout: viva_layout,\n            interactive: 'node drag'\n    \n        });\n        viva_renderer.run();\n        for (let i=0; i < 30; i++) {\n            viva_renderer.zoomOut();\n        }\n    }, []);\n\n    useEffect ( () => {\n        const color_agent = (agent) => {\n            viva_graphics.getNodeUI(agent.uuid).color = agent.viva_color;\n            viva_graphics.getNodeUI(agent.uuid).size = 40;\n        }\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'forEach_agents', payload:{callback:color_agent}})\n    }, [worldReadyTrigger])\n\n    return (\n        <div ref={graph_div} style={{width:400, height:400}} >\n        </div>\n    );\n};\n\nexport default InfectiousMatterContactGraph;\n","import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport MaterialTable from 'material-table';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation';\n\nfunction swap(json){\n    var ret = {};\n    for(var key in json){\n      ret[json[key]] = key;\n    }\n    return ret;\n  }\n\nconst InfectiousMatterMigrationTable = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const [locations, setLocations] = useState([]);\n    const [locationIdMap, setlocationIdMap] = useState({});\n    const [lastLocationIdMap, setLastLocationIdMap] = useState(null);\n\n    const [migrationRevision, setMigrationRevision] = useState(0);\n    const [migrationLinks, setMigrationLinks] = useState([]);\n\n    const [columns, setColumns] = useState([\n        {title:\"From Location\", field:\"from_uuid\", type: \"numeric\"},\n        {title:\"To Location\", field:\"to_uuid\", type: \"numeric\"},\n        {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"}\n    ]);\n\n\n    const link_diff = (new_link, old_link) => {\n        return (\n            new_link.to_uuid != old_link.to_uuid ||\n            new_link.from_uuid != old_link.from_uuid ||\n            new_link.num_agents != old_link.num_agents\n            )\n    }\n    const add_migration_link = function(new_link_data) {\n        let existing_link = migrationLinks.find( (element) => {\n            return (element.to_uuid == new_link_data.to_uuid && element.from_uuid == new_link_data.from_uuid)\n        });\n\n        if (existing_link || new_link_data.num_agents < 0) {\n            return false;\n        }\n        setMigrationLinks([...migrationLinks, new_link_data]);\n        setMigrationRevision(c => c+1);\n\n        return true;\n    }  \n\n    const update_migration_links = function(new_link_data, old_link_data) {\n        //setMigrationLinks(new_links);\n        let new_migration_links = [...migrationLinks];\n        let update_idx = migrationLinks.findIndex( (entry) => {\n            return (\n                entry.to_uuid == old_link_data.to_uuid &&\n                entry.from_uuid == old_link_data.from_uuid\n            )\n        });\n        if (link_diff(new_link_data, old_link_data)){\n            new_migration_links[update_idx] = new_link_data;\n            setMigrationLinks(new_migration_links);\n            setMigrationRevision(c => c+1);\n        }\n    }\n\n    const remove_migration_link = function(link_to_remove) {\n        let new_migration_links = migrationLinks.filter( (migration_link) => {\n            return link_diff(link_to_remove, migration_link)\n        })\n        setMigrationLinks(new_migration_links);\n        \n        //we have to remove links ourselves...\n        InfectiousMatterAPI(\n            InfectiousMatterRef,\n            {\n                type:'remove_migration_link',\n                payload: {\n                    from_location: link_to_remove.from_uuid,\n                    to_location: link_to_remove.to_uuid\n                }\n            }\n        );\n\n        setMigrationRevision(c => c+1);\n    }\n \n    useEffect( () => {        \n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n    }, [locationIdMap]) \n    \n    useEffect( () => {\n        //don't run the first time when we don't have the migration list yet\n        if(migrationLinks.length > 0){\n            migrationLinks.forEach( (migration_link) => {\n                InfectiousMatterAPI(\n                    InfectiousMatterRef,\n                    {\n                        type:'add_migration_link', \n                        payload:{\n                            from_location: migration_link.from_uuid, \n                            to_location: migration_link.to_uuid,\n                            num_agents: migration_link.num_agents\n                        }\n                    });\n            })\n        }\n    }, [migrationRevision])\n\n    useEffect( () => {\n        let last_location_id_map = {...locationIdMap}\n        let location_list = InfectiousMatterAPI(InfectiousMatterRef, {\n            type:'map_locations', \n            payload:{\n                callback: (loc, loc_idx) => {\n                    return {location_idx:loc_idx, location_uuid:loc.uuid};\n                }\n            }\n        });\n        setLocations(location_list);\n        let new_migration_links = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_migration_links'});\n\n        if(migrationLinks.length > 0 && last_location_id_map)  {\n            InfectiousMatterAPI(InfectiousMatterRef, {type: 'clear_migration_links'});\n            new_migration_links = migrationLinks.map( (migration_link) => {\n                let new_from_idx = last_location_id_map[migration_link.from_uuid];\n                let new_to_idx = last_location_id_map[migration_link.to_uuid];\n                return ( {\n                    from_uuid: location_list[new_from_idx].location_uuid, \n                    to_uuid: location_list[new_to_idx].location_uuid,\n                    num_agents: migration_link.num_agents\n                });\n            });\n        }\n        setMigrationLinks(new_migration_links);\n\n        setMigrationRevision(c => c+1);\n\n    }, [worldReadyTrigger])\n\n    useEffect( () => {\n        let location_map = {}\n        locations.forEach((loc) => {\n            location_map[loc.location_uuid] = loc.location_idx;\n        });\n\n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:location_map, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n\n        setlocationIdMap(location_map);\n\n    }, [locations]);\n\n    return (\n      <MaterialTable \n        title={\"Migration Links\"}\n        columns={columns}\n        data={migrationLinks}\n        options={{\n            filtering: false,\n            toolbar: true,\n            search: false,\n            pageSizeOptions: [5]\n        }}\n        editable={ { \n            onRowAdd: (new_data) => {\n                return new Promise ( (resolve, reject) => {\n                    let add_success = add_migration_link(new_data);\n                    resolve();\n                });\n            }, \n            onRowUpdate: (new_data, old_data) => {\n                return new Promise( (resolve, reject) => {\n                    update_migration_links(new_data, old_data);\n                    resolve();\n                });\n            }, \n            onRowDelete: (old_data) => {\n                return new Promise( (resolve, reject) => {\n                    remove_migration_link(old_data);\n                    resolve();\n                })\n            }\n        }}\n      />\n    );\n  };\n  \n  export default InfectiousMatterMigrationTable;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let exposed = {\n      x: [0],\n      y: [0],\n      stackgroup: 'one',\n      //type: \"scattergl\",\n      name: \"Exposed\",\n    marker: { color: \"orange\" }\n  };\n\n  let infected = {\n    x: [0],\n    y: [0],\n    stackgroup: 'one',\n    //type: \"scattergl\",\n    name: \"Infected\",\n    marker: { color: \"red\" }\n  };\n\n  let recovered = {\n    x: [0],\n    y: [0],\n    stackgroup: 'one',\n    name: \"Recovered\",\n    //type: \"scattergl\",\n    marker: { color: \"green\" }\n  };\n\n  let susceptible = {\n      x: [0],\n      y: [0],\n      stackgroup: 'one',\n      name: \"Susceptible\",\n      //type: \"scattergl\",\n      marker: { color: \"grey\" }\n  }\n  let plot_data = [exposed, infected, recovered, susceptible];\n  return plot_data;\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Days\",\n      rangemode: 'nonnegative'\n  }, \n  yaxis: {\n      title: \"Count\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.EXPOSED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.S_INFECTED] + action.payload.cur_state_counts[AgentStates.A_INFECTED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[3].x.push(action.payload.cur_time);\n      new_state[3].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n    const update_traces = () => {\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_state_counts'});\n        dispatchTraces({type: 'extend', payload:{cur_time: api_return.cur_time, cur_state_counts: api_return.state_counts}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterPlot;\n","import React, {useRef, useEffect, useReducer, useState, useLayoutEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter} from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, {AgentStates, ContactGraph} from './InfectiousMatterSimulation.js';\nimport InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\nimport InfectiousMatterMigrationTable from './InfectiousMatterMigrationTable';\nimport InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport MaterialTable from 'material-table';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth:1200\n  },\n  controlls: {\n    width:600,\n  },\n  paper: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n  },\n  paperControlls: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n    padding: theme.spacing(2)\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection:0.05, others_protection:0.5};\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  if(agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection) * (1-this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_mask_transmission_params') {\n    if(action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if(action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if(action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i=0; i< action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object); \n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map( (agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach( (agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map( (loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach( (loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if(action.payload.num_agents) {\n      for(let i=0; i< action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.S_INFECTED);\n      }\n    }\n  } \n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return {state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time/ InfectiousMatterRef.current.simulation_params.sim_time_per_day};\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list=[];\n    let unmasked_list=[];\n    InfectiousMatterRef.current.agents.forEach( (agent) => {\n      if(agent.masked){\n        masked_list.push(agent);\n      }\n      else{\n        unmasked_list.push(agent);\n      }\n    });\n\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for(let i=0; i< num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for(let i=0; i<-num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n    /*\n    if (num_needing_masks > 0){\n      for (let i=0; i < num_needing_masks; i++){\n        let agent_to_mask = Matter.Common.choose(unmasked_list);\n        if (agent_to_mask.masked == false){\n          agent_to_mask.masked = true;\n        }\n      }\n    }\n    else if(num_needing_masks < 0){\n      for (let i=0; i < -num_needing_masks; i++){\n        let agent_to_unmask = Matter.Common.choose(masked_list);\n        if (agent_to_unmask) {\n          agent_to_unmask.masked=false;\n        }\n      }\n    }\n    */\n  }\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n  const [numMasked, setNumMasked] = useState(0);\n  const [maskSelfProtection, setMaskSelfProtection] = useState(0.05);\n  const [maskOthersProtection, setMaskOthersProtection] = useState(0.5);\n  const [movementScale, setMovementScale] = useState(2.0);\n  \n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  const resetSimulation = (e) => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'reset_simulator'});\n    setRedrawTrigger(c=>c+1);\n  }\n\n  function handleNumMaskedSliderChange(event, newValue){\n    setNumMasked(newValue);\n  }\n  function handleMaskSelfProtectionChange(event, newValue) {\n    setMaskSelfProtection(newValue);\n  }\n  function handleMaskOthersProtectionChange(event, newValue) {\n    setMaskOthersProtection(newValue);\n  }\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {self_protection: maskSelfProtection}});\n  }, [maskSelfProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {others_protection: maskOthersProtection}});\n  }, [maskOthersProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_movement_scale', payload: {movement_scale: movementScale}});\n  }, [movementScale])\n\n  useEffect( () => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: numMasked}});\n  }, [numMasked]);\n\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n          <Card className={classes.paper}>\n          <InfectiousMatterPlot                 \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n          />\n          </Card>\n        </Grid>\n        <Grid item>\n        <Card className={classes.paper}>\n          <InfectiousMatterSimulation \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n            setWorldReadyTrigger={setWorldReadyTrigger}\n            numMasked={numMasked}\n          />\n        </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterContactGraph                 \n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI} \n              worldReadyTrigger={worldReadyTrigger}\n            />\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className={classes.root} spacing={10}>\n        <Grid item alignItems=\"flex-start\">\n        <Card className={classes.paper}>\n          <List>\n          <ListSubheader disableSticky={true}>World Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"Masks\" primary=\"Number Masked\" />\n              <Slider\n                value={numMasked}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handleNumMaskedSliderChange}\n                step={1}\n                min={0}\n                max={400}\n              />\n          </ListItem>\n          <ListItem>\n            <ListItemText id=\"Movement\" primary=\"Movement Scale\" />\n            <Slider\n              value={movementScale}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"on\"\n              onChange={handleMovementScaleChange}\n              step={0.25}\n              min={0}\n              max={10}\n            />\n          </ListItem>\n          <ListItem>\n            <Button variant=\"contained\" onClick={resetSimulation}>Reset</Button>\n          </ListItem>\n\n          \n          <ListSubheader disableSticky={true}>Mask Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"selfProtection\" primary=\"Self Protection\"/>\n              <Slider\n                value={maskSelfProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskSelfProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"othersProtection\" primary=\"Others Protection\" />\n              <Slider\n                value={maskOthersProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskOthersProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n          </ListItem>\n        </List>\n      </Card>\n        </Grid>\n        \n      <Grid item className={classes.controlls}>\n        <InfectiousMatterMigrationTable             \n          InfectiousMatterRef={InfectiousMatterRef}\n          InfectiousMatterAPI={InfectiousMatterAPI}\n          worldReadyTrigger={worldReadyTrigger}\n        />\n      </Grid>\n    </Grid>\n    </div>\n  )\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}