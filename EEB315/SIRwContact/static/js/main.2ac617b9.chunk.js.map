{"version":3,"sources":["InfectiousMatter/agent.js","../node_modules/jspdf/dist sync","InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","SimComponents/InfectiousMatterContactGraph.js","SimComponents/InfectiousMatterMigrationTable.js","SimComponents/InfectiousMatterPlot.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["uniqid","require","Agent","body","this","track_all_contacts","state","undefined","interaction_callback","uuid","viva_color","events","location","home","cohorts","color","home_state","migrating","masked","prototype","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","ctx","agent_size","fillStyle","strokeStyle","lineWidth","fillRect","position","x","y","strokeRect","stroke","module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","MatterCollisionEvents","name","version","for","install","matter","create","Body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","event","pairs","map","pair","trigger","bodyA","bodyB","Plugin","register","getRandomArbitrary","min","max","Math","random","Location","bounds","friction","occupants","border_color","draw_borders","width","height","beginPath","rect","get_random_position","remove_agent","agent","filter","a","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","stale","recurring","clear_events","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","numMasked","popSize","sim_div","useRef","setup_world","num_to_mask","res1","type","payload","residence_props","residence","num_agents","Common","shuffle","current","agents","num_masked","useEffect","simulation_params","sim_time_per_day","link_lifetime","console","log","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","INFECTED","RECOVERED","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","default_infection_params","use_pathogen_contagiousness","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","context","forEach","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","SENSITIVE","add_location","location_properties","new_location","home_color","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","pathogen","post_infection_callback","update_org_event","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","node","addNode","something","get_prob_of_infection","delete_agent","an_agent","Composite","remove","removeNode","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","new_migration_event","source","dest","migrating_agent","velocity","setPosition","setVelocity","viva_layout","Viva","Layout","forceDirected","springLength","springCoeff","dragCoeff","viva_graphics","View","webglGraphics","InfectiousMatterContactGraph","worldReadyTrigger","graph_div","viva_renderer","renderer","container","graphics","renderLinks","layout","interactive","zoomOut","getNodeUI","infection_layout","margin","l","r","pad","showlegend","legend","xanchor","xaxis","title","rangemode","yaxis","initial_traces","stackgroup","marker","reducer","action","cur_time","cur_state_counts","InfectiousMatterPlot","useReducer","plotTraces","dispatchTraces","useState","plotRevision","setPlotRevision","plot_layout","interval","setInterval","api_return","p","update_traces","clearInterval","datarevision","useStyles","makeStyles","theme","root","flexGrow","minWidth","controlls","paper","minHeight","textAlign","paperControlls","padding","spacing","mask_transmission_props","self_protection","others_protection","default_infection_prob","random_res","new_agent","random_agent","agent_id","loc_idx","from_location","to_location","masked_list","unmasked_list","cur_num_masked","num_needing_masks","num_to_add","pop_size","InfectiousMatterContainer","props","classes","setPopSize","maskSelfProtection","maskOthersProtection","movementScale","setMovementScale","perContactInfection","setPerContactInfection","infectiousPeriodMean","setInfectiousPeriodMean","setRedrawTrigger","className","Grid","direction","justify","item","Card","alignItems","List","ListSubheader","disableSticky","ListItem","ListItemText","primary","Slider","value","aria-labelledby","valueLabelDisplay","onChange","newValue","step","Button","variant","onClick","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ac617b9.chunk.js","sourcesContent":["var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\tthis.events = [];\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 358;","var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.friction = 0.2;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\n\t\tif (this_event.stale == false) {\n\t\t\tif (this_event.recurring) {\n\t\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true, stale:false});\n\t\t\t}\n\t\t\tthis_event.callback();\n\t\t\tnum_events += 1;\n\t\t}\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.1), 1);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = 0.5;\n}\n\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, numMasked, popSize}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (num_to_mask) => {\n        let res_prop = {\n            type: \"residence\", \n            friction: 0.01,\n            bounds: {\n                min: {\n                    x: 10,\n                    y: 10,\n                },\n                max: {\n                    x: 390,\n                    y: 390,\n                }\n            }\n        };\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop}});\n        \n        //TODO: add popSize agents...\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: popSize}});        \n        \n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: num_to_mask}});\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 1000,\n            agent_size: 4,\n            link_lifetime: 200,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 2.0,\n        };\n  \n        let default_simulation_colors = {\n            viva_colors: [0xA9A9A9ff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n            matter_colors: [\"darkgrey\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, default_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(numMasked);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(numMasked);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:400, width:400}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    INFECTED: 1,\n    RECOVERED: 2,\n    size: 3\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:2000,\n    agent_size: 3,\n    link_lifetime: 4000,\n    pathogen_mut_prob: 0.1\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: false\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                });\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true, stale:false})\n\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    //refactor to event!\n    switch(new_state) {\n        case AgentStates.INFECTED:\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"blue\";\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            stroke_color = \"black\";\n            org.render.lineWidth = 0;\n            break;\n        };\n\n    org.render.strokeStyle = stroke_color;\n    \n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root');\n    }\n\n    this.update_org_state(org, AgentStates.INFECTED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n    let days_to_recover = Math.max(jStat.exponential.sample(1/this.infection_params.infectious_period_mu), 3);\n\n    let update_org_event = {\n        time: days_to_recover*this.simulation_params.sim_time_per_day,\n        callback: () => {\n            this.update_org_state(org, AgentStates.RECOVERED);\n        },\n        stale: false\n    }\n    this.add_event(update_org_event);\n    org.agent_object.events.push(update_org_event)\n};\n\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n}\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge)\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if (other_agent.state == AgentStates.INFECTED && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    this.expose_org(this_agent_body, AgentStates.INFECTED, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n                this.add_event( {\n                    time: this.simulation_params.link_lifetime+1, \n                    callback: this._check_edge_for_removal(this_edge),\n                    stale: false\n                });\n            }\n\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n    new_agent_body.render.fillStyle = home_location.home_color || \"black\";\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {something:true});\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color\n\n    \n    home_location.add_agent(new_agent_body.agent_object);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n    \n    return(new_agent_body);\n};\n\nInfectiousMatter.prototype.delete_agent = function(an_agent) {\n\n    this.agents = this.agents.filter(function(a) {\n\t\treturn (a !== an_agent)\n    });\n\n    Matter.Composite.remove(this.matter_engine.world, an_agent.body);\n    ContactGraph.removeNode(an_agent.uuid);\n\n    this.state_counts[an_agent.state] -= 1;\n    //TODO: Clear events associated with this agent?\n    an_agent.events.forEach((event) => {event.stale = true;})\n}\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 100; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import React, {useEffect, useState, useReducer, useRef, useLayoutEffect} from 'react';\nimport {AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nimport Agent from '../InfectiousMatter/agent.js';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Viva from 'vivagraphjs';\n\nlet viva_layout = Viva.Graph.Layout.forceDirected(ContactGraph, {\n    springLength : 15,\n    springCoeff : 0.00005,\n    dragCoeff : 0.01,\n    gravity : -1.5\n});\n\nlet viva_graphics = Viva.Graph.View.webglGraphics();\n\n\nconst InfectiousMatterContactGraph = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const graph_div = useRef(null);\n\n    useEffect( ()=> {\n        console.log(\"initalizing viva graph\");\n        let viva_renderer = Viva.Graph.View.renderer(ContactGraph, {\n            container: graph_div.current,\n            graphics: viva_graphics,\n            renderLinks: true,\n            layout: viva_layout,\n            interactive: 'node drag'\n    \n        });\n        viva_renderer.run();\n        for (let i=0; i < 30; i++) {\n            viva_renderer.zoomOut();\n        }\n    }, []);\n\n    useEffect ( () => {\n        const color_agent = (agent) => {\n            viva_graphics.getNodeUI(agent.uuid).color = agent.viva_color;\n            viva_graphics.getNodeUI(agent.uuid).size = 40;\n        }\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'forEach_agents', payload:{callback:color_agent}})\n    }, [worldReadyTrigger])\n\n    return (\n        <div ref={graph_div} style={{width:400, height:400}} >\n        </div>\n    );\n};\n\nexport default InfectiousMatterContactGraph;\n","import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport MaterialTable from 'material-table';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation';\n\nfunction swap(json){\n    var ret = {};\n    for(var key in json){\n      ret[json[key]] = key;\n    }\n    return ret;\n  }\n\nconst InfectiousMatterMigrationTable = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const [locations, setLocations] = useState([]);\n    const [locationIdMap, setlocationIdMap] = useState({});\n    const [lastLocationIdMap, setLastLocationIdMap] = useState(null);\n\n    const [migrationRevision, setMigrationRevision] = useState(0);\n    const [migrationLinks, setMigrationLinks] = useState([]);\n\n    const [columns, setColumns] = useState([\n        {title:\"From Location\", field:\"from_uuid\", type: \"numeric\"},\n        {title:\"To Location\", field:\"to_uuid\", type: \"numeric\"},\n        {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"}\n    ]);\n\n\n    const link_diff = (new_link, old_link) => {\n        return (\n            new_link.to_uuid != old_link.to_uuid ||\n            new_link.from_uuid != old_link.from_uuid ||\n            new_link.num_agents != old_link.num_agents\n            )\n    }\n    const add_migration_link = function(new_link_data) {\n        let existing_link = migrationLinks.find( (element) => {\n            return (element.to_uuid == new_link_data.to_uuid && element.from_uuid == new_link_data.from_uuid)\n        });\n\n        if (existing_link || new_link_data.num_agents < 0) {\n            return false;\n        }\n        setMigrationLinks([...migrationLinks, new_link_data]);\n        setMigrationRevision(c => c+1);\n\n        return true;\n    }  \n\n    const update_migration_links = function(new_link_data, old_link_data) {\n        //setMigrationLinks(new_links);\n        let new_migration_links = [...migrationLinks];\n        let update_idx = migrationLinks.findIndex( (entry) => {\n            return (\n                entry.to_uuid == old_link_data.to_uuid &&\n                entry.from_uuid == old_link_data.from_uuid\n            )\n        });\n        if (link_diff(new_link_data, old_link_data)){\n            new_migration_links[update_idx] = new_link_data;\n            setMigrationLinks(new_migration_links);\n            setMigrationRevision(c => c+1);\n        }\n    }\n\n    const remove_migration_link = function(link_to_remove) {\n        let new_migration_links = migrationLinks.filter( (migration_link) => {\n            return link_diff(link_to_remove, migration_link)\n        })\n        setMigrationLinks(new_migration_links);\n        \n        //we have to remove links ourselves...\n        InfectiousMatterAPI(\n            InfectiousMatterRef,\n            {\n                type:'remove_migration_link',\n                payload: {\n                    from_location: link_to_remove.from_uuid,\n                    to_location: link_to_remove.to_uuid\n                }\n            }\n        );\n\n        setMigrationRevision(c => c+1);\n    }\n \n    useEffect( () => {        \n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n    }, [locationIdMap]) \n    \n    useEffect( () => {\n        //don't run the first time when we don't have the migration list yet\n        if(migrationLinks.length > 0){\n            migrationLinks.forEach( (migration_link) => {\n                InfectiousMatterAPI(\n                    InfectiousMatterRef,\n                    {\n                        type:'add_migration_link', \n                        payload:{\n                            from_location: migration_link.from_uuid, \n                            to_location: migration_link.to_uuid,\n                            num_agents: migration_link.num_agents\n                        }\n                    });\n            })\n        }\n    }, [migrationRevision])\n\n    useEffect( () => {\n        let last_location_id_map = {...locationIdMap}\n        let location_list = InfectiousMatterAPI(InfectiousMatterRef, {\n            type:'map_locations', \n            payload:{\n                callback: (loc, loc_idx) => {\n                    return {location_idx:loc_idx, location_uuid:loc.uuid};\n                }\n            }\n        });\n        setLocations(location_list);\n        let new_migration_links = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_migration_links'});\n\n        if(migrationLinks.length > 0 && last_location_id_map)  {\n            InfectiousMatterAPI(InfectiousMatterRef, {type: 'clear_migration_links'});\n            new_migration_links = migrationLinks.map( (migration_link) => {\n                let new_from_idx = last_location_id_map[migration_link.from_uuid];\n                let new_to_idx = last_location_id_map[migration_link.to_uuid];\n                return ( {\n                    from_uuid: location_list[new_from_idx].location_uuid, \n                    to_uuid: location_list[new_to_idx].location_uuid,\n                    num_agents: migration_link.num_agents\n                });\n            });\n        }\n        setMigrationLinks(new_migration_links);\n\n        setMigrationRevision(c => c+1);\n\n    }, [worldReadyTrigger])\n\n    useEffect( () => {\n        let location_map = {}\n        locations.forEach((loc) => {\n            location_map[loc.location_uuid] = loc.location_idx;\n        });\n\n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:location_map, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n\n        setlocationIdMap(location_map);\n\n    }, [locations]);\n\n    return (\n      <MaterialTable \n        title={\"Migration Links\"}\n        columns={columns}\n        data={migrationLinks}\n        options={{\n            filtering: false,\n            toolbar: true,\n            search: false,\n            pageSizeOptions: [5]\n        }}\n        editable={ { \n            onRowAdd: (new_data) => {\n                return new Promise ( (resolve, reject) => {\n                    let add_success = add_migration_link(new_data);\n                    resolve();\n                });\n            }, \n            onRowUpdate: (new_data, old_data) => {\n                return new Promise( (resolve, reject) => {\n                    update_migration_links(new_data, old_data);\n                    resolve();\n                });\n            }, \n            onRowDelete: (old_data) => {\n                return new Promise( (resolve, reject) => {\n                    remove_migration_link(old_data);\n                    resolve();\n                })\n            }\n        }}\n      />\n    );\n  };\n  \n  export default InfectiousMatterMigrationTable;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let susceptible = {\n    x: [0],\n    y: [0],\n    stackgroup: 'one',\n    name: \"Susceptible\",\n    type: \"scattergl\",\n    marker: { color: \"grey\" }\n  }\n\n  let infected = {\n    x: [0],\n    y: [0],\n    stackgroup: 'one',\n    type: \"scattergl\",\n    name: \"Infected\",\n    marker: { color: \"red\" }\n  };\n\n  let recovered = {\n    x: [0],\n    y: [0],\n    stackgroup: 'one',\n    name: \"Recovered\",\n    type: \"scattergl\",\n    marker: { color: \"blue\" }\n  };\n\n  let plot_data = [infected, recovered, susceptible];\n  return plot_data;\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Days\",\n      rangemode: 'nonnegative'\n  }, \n  yaxis: {\n      title: \"Count\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.INFECTED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n    const update_traces = () => {\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_state_counts'});\n        dispatchTraces({type: 'extend', payload:{cur_time: api_return.cur_time, cur_state_counts: api_return.state_counts}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterPlot;\n","import React, {useRef, useEffect, useReducer, useState, useLayoutEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter} from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, {AgentStates, ContactGraph} from './InfectiousMatterSimulation.js';\nimport InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\nimport InfectiousMatterMigrationTable from './InfectiousMatterMigrationTable';\nimport InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport MaterialTable from 'material-table';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth:1200\n  },\n  controlls: {\n    width:600,\n  },\n  paper: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n  },\n  paperControlls: {\n    minHeight: 400,\n    minWidth: 800,\n    textAlign: 'center',\n    padding: theme.spacing(2)\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection:0.05, others_protection:0.5};\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  if(agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection) * (1-this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_infection_params') {\n    if(action.payload.per_contact_infection) {\n      InfectiousMatterRef.current.infection_params.per_contact_infection = action.payload.per_contact_infection;\n    }\n    if(action.payload.infectious_period_mu) {\n      InfectiousMatterRef.current.infection_params.infectious_period_mu = action.payload.infectious_period_mu;\n    }\n  };\n  if (action.type == 'update_mask_transmission_params') {\n    if(action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if(action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if(action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_random_agent') {\n    let random_res = Matter.Common.choose(InfectiousMatterRef.current.locations);\n    let new_agent = InfectiousMatterRef.current.add_agent(random_res);\n\n    if (action.payload && action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object); \n    }\n  }\n\n  if (action.type == 'remove_random_agent') {\n    let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n    InfectiousMatterRef.current.delete_agent(random_agent);\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i=0; i< action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object); \n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map( (agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach( (agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map( (loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach( (loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if(action.payload.num_agents) {\n      for(let i=0; i< action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.INFECTED);\n      }\n    }\n  } \n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return {state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time/ InfectiousMatterRef.current.simulation_params.sim_time_per_day};\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list=[];\n    let unmasked_list=[];\n    InfectiousMatterRef.current.agents.forEach( (agent) => {\n      if(agent.masked){\n        masked_list.push(agent);\n      }\n      else{\n        unmasked_list.push(agent);\n      }\n    });\n\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for(let i=0; i< num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for(let i=0; i<-num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n  }\n\n  if (action.type == \"set_pop_size\") {\n    //target pop size - current pop size:\n    let num_to_add = action.payload.pop_size - InfectiousMatterRef.current.agents.length;\n\n    if (num_to_add > 0) {\n      for(let i=0; i< num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'add_random_agent'});\n      }\n    } else if (num_to_add < 0) {\n      for(let i=0; i< -num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'remove_random_agent'});\n      }\n    }\n\n  };\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n  const [numMasked, setNumMasked] = useState(0);\n  const [popSize, setPopSize] = useState(500);\n  const [maskSelfProtection, setMaskSelfProtection] = useState(0.05);\n  const [maskOthersProtection, setMaskOthersProtection] = useState(0.5);\n  const [movementScale, setMovementScale] = useState(2.0);\n   \n  const [perContactInfection, setPerContactInfection] = useState(0.5);\n  const [infectiousPeriodMean, setInfectiousPeriodMean] = useState(5);\n\n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  const resetSimulation = (e) => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'reset_simulator'});\n    setRedrawTrigger(c=>c+1);\n  }\n  const infectAgent = (e) => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef, \n      {\n        type: 'infect_random_agents', \n        payload: {\n          num_agents: 1\n        }\n      });\n  }\n\n  function handlePerContactInfectionChange(event, newValue) {\n    setPerContactInfection(newValue);\n  }\n\n  function handleInfectiousPeriodMean(event, newValue) {\n    setInfectiousPeriodMean(newValue);\n  }\n\n  function handlePopSizeSliderChange(event, newValue){\n    setPopSize(newValue);\n  }\n  function handleMaskSelfProtectionChange(event, newValue) {\n    setMaskSelfProtection(newValue);\n  }\n  function handleMaskOthersProtectionChange(event, newValue) {\n    setMaskOthersProtection(newValue);\n  }\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n  \n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {per_contact_infection: perContactInfection}});\n  }, [perContactInfection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {infectious_period_mu: infectiousPeriodMean}});\n  }, [infectiousPeriodMean])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {self_protection: maskSelfProtection}});\n  }, [maskSelfProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {others_protection: maskOthersProtection}});\n  }, [maskOthersProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_movement_scale', payload: {movement_scale: movementScale}});\n  }, [movementScale])\n\n  useEffect( () => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: numMasked}});\n  }, [numMasked]);\n\n  useEffect( () => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_pop_size', payload: {pop_size: popSize}});\n    setWorldReadyTrigger(c => c+1);\n  }, [popSize]);\n\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n          <Card className={classes.paper}>\n          <InfectiousMatterPlot                 \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n          />\n          </Card>\n        </Grid>\n        <Grid item>\n        <Card className={classes.paper}>\n          <InfectiousMatterSimulation \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n            setWorldReadyTrigger={setWorldReadyTrigger}\n            numMasked={numMasked}\n            popSize={popSize}\n          />\n        </Card>\n        </Grid>\n        \n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterContactGraph                 \n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI} \n              worldReadyTrigger={worldReadyTrigger}\n            />\n          </Card>\n        </Grid>\n      \n\n      </Grid>\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={10}>\n        <Grid item alignItems=\"flex-start\">\n        <Card className={classes.paperControlls}>\n          <List>\n          <ListSubheader disableSticky={true}>World Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"PopSize\" primary=\"Pop Size\" />\n              <Slider\n                value={popSize}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handlePopSizeSliderChange}\n                step={1}\n                min={0}\n                max={800}\n              />\n          </ListItem>\n          <ListItem>\n            <ListItemText id=\"Movement\" primary=\"Movement Scale\" />\n            <Slider\n              value={movementScale}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"on\"\n              onChange={handleMovementScaleChange}\n              step={0.25}\n              min={0}\n              max={10}\n            />\n          </ListItem>\n          <ListItem>\n            <Grid container direction=\"row\" spacing={3}>\n              <Grid item>\n                <Button variant=\"contained\" onClick={resetSimulation}>Reset</Button>\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" onClick={infectAgent}>\n                  Infect Random Agent\n                </Button>\n              </Grid>\n            </Grid>\n          </ListItem>          \n\n          \n          <ListSubheader disableSticky={true}>Infection Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"infectionRate\" primary=\"Prob. Infection\"/>\n              <Slider\n                value={perContactInfection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handlePerContactInfectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"infectiousPeriod\" primary=\"Mean Infectious Days\" />\n              <Slider\n                value={infectiousPeriodMean}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleInfectiousPeriodMean}\n                valueLabelDisplay=\"on\"\n                min={3}\n                max={12}\n                step={0.1}\n              />\n          </ListItem>\n        </List>\n      </Card>\n      </Grid>\n        \n    </Grid>\n    </div>\n  )\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}