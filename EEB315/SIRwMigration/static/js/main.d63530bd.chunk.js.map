{"version":3,"sources":["InfectiousMatter/agent.js","InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","SimComponents/InfectiousMatterContactGraph.js","SimComponents/InfectiousMatterMigrationTable.js","SimComponents/InfectiousMatterVirPlot.js","SimComponents/InfectiousMatterPlot.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["uniqid","require","Agent","body","this","track_all_contacts","state","undefined","interaction_callback","uuid","viva_color","events","location","home","cohorts","color","home_state","migrating","masked","pathogen","prototype","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","ctx","agent_size","fillStyle","strokeStyle","lineWidth","fillRect","position","x","y","strokeRect","stroke","module","exports","MatterCollisionEvents","name","version","for","install","matter","create","Body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","event","pairs","map","pair","trigger","bodyA","bodyB","Plugin","register","getRandomArbitrary","min","max","Math","random","Location","bounds","friction","occupants","border_color","draw_borders","width","height","beginPath","rect","get_random_position","remove_agent","agent","filter","a","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","stale","recurring","clear_events","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","numMasked","sim_div","useRef","setup_world","num_to_mask","res1","type","payload","residence_props","res2","res3","res4","res5","res6","res7","res8","res9","residence","num_agents","current","new_migration_event","from_location","to_location","Common","shuffle","agents","num_masked","useEffect","simulation_params","sim_time_per_day","link_lifetime","console","log","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","INFECTED","RECOVERED","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","agent_lifespan","default_infection_params","use_pathogen_contagiousness","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","e","context","forEach","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","SENSITIVE","add_location","location_properties","new_location","home_color","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","post_infection_callback","update_org_event","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","lifetime","node","addNode","get_prob_of_infection","_death_birth","agent_to_remove","home_loc","delete_agent","an_agent","Composite","remove","removeNode","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","source","dest","migrating_agent","velocity","setPosition","setVelocity","viva_layout","Viva","Layout","forceDirected","springLength","springCoeff","dragCoeff","viva_graphics","View","webglGraphics","InfectiousMatterContactGraph","worldReadyTrigger","graph_div","viva_renderer","renderer","container","graphics","renderLinks","layout","interactive","zoomOut","changes","changeRecord","changeType","getNodeUI","id","InfectiousMatterMigrationTable","useState","setLocations","locationIdMap","setlocationIdMap","migrationRevision","setMigrationRevision","migrationLinks","setMigrationLinks","title","field","columns","setColumns","link_diff","new_link","old_link","lookup","editable","migration_link","last_location_id_map","location_list","loc_idx","location_idx","location_uuid","new_migration_links","new_from_idx","new_to_idx","location_map","filtering","toolbar","search","pageSizeOptions","onRowAdd","new_data","Promise","resolve","reject","new_link_data","find","onRowUpdate","old_data","old_link_data","update_idx","findIndex","entry","update_migration_links","onRowDelete","link_to_remove","infection_layout","margin","l","r","pad","showlegend","legend","xanchor","xaxis","rangemode","yaxis","initial_traces","marker","reducer","action","cur_contagousness","cur_time","cur_state_counts","InfectiousMatterVirPlot","useReducer","plotTraces","dispatchTraces","plotRevision","setPlotRevision","plot_layout","interval","setInterval","agent_id","p","update_traces","clearInterval","datarevision","InfectiousMatterPlot","api_return","useStyles","makeStyles","theme","root","flexGrow","minWidth","controlls","paper","minHeight","textAlign","paperControlls","padding","spacing","mask_transmission_props","self_protection","others_protection","default_infection_prob","new_agent","random_agent","masked_list","unmasked_list","cur_num_masked","num_needing_masks","InfectiousMatterContainer","props","classes","setNumMasked","maskSelfProtection","setMaskSelfProtection","maskOthersProtection","setMaskOthersProtection","movementScale","setMovementScale","agentLifespan","setAgentLifespan","perContactInfection","setPerContactInfection","infectiousPeriodMean","setInfectiousPeriodMean","setRedrawTrigger","className","Grid","direction","justify","item","Card","List","ListSubheader","disableSticky","ListItem","ListItemText","primary","Slider","value","aria-labelledby","valueLabelDisplay","onChange","newValue","step","Button","variant","onClick","ReactDOM","StrictMode","document","getElementById"],"mappings":"+HAAA,IAAIA,EAASC,EAAQ,KAKrB,SAASC,EAAMC,GACdC,KAAKC,oBAAqB,EAC1BD,KAAKE,WAAQC,EACbH,KAAKD,KAAOA,EACZC,KAAKI,0BAAuBD,EAC5BH,KAAKK,KAAOT,IACZI,KAAKM,gBAAaH,EAClBH,KAAKO,OAAS,GAEdP,KAAKQ,cAAWL,EAChBH,KAAKS,UAAON,EACZH,KAAKU,QAAU,GACfV,KAAKW,WAAQR,EACbH,KAAKY,WAAa,GAClBZ,KAAKa,WAAY,EACjBb,KAAKc,QAAS,EACdd,KAAKe,cAAWZ,EAGjBL,EAAMkB,UAAUC,SAAW,SAASlB,GACnCC,KAAKD,KAAOA,GAGbD,EAAMkB,UAAUE,8BAAgC,SAAUd,GACzDJ,KAAKI,qBAAuBA,GAG7BN,EAAMkB,UAAUG,qBAAuB,SAASC,GAC/CpB,KAAKI,qBAAqBgB,IAG3BtB,EAAMkB,UAAUK,UAAY,SAASC,EAAKC,GACzCD,EAAIE,UAAY,UAChBF,EAAIG,YAAY,UAChBH,EAAII,UAAY,EAChBJ,EAAIK,SAAS3B,KAAKD,KAAK6B,SAASC,EAAEN,EAAYvB,KAAKD,KAAK6B,SAASE,EAAc,EAAXP,EAAcA,EAAW,GAC7FD,EAAIS,WAAW/B,KAAKD,KAAK6B,SAASC,EAAEN,EAAYvB,KAAKD,KAAK6B,SAASE,EAAc,EAAXP,EAAcA,EAAW,GAC/FD,EAAIU,UAILC,EAAOC,QAAUpC,G,0DC9CjB,IACIqC,EAAwB,CAC1BC,KAAM,0BACNC,QAAS,QACTC,IAAK,oBACLC,QAAS,SAASC,GAGhB,IAAIC,EAASD,EAAOE,KAAKD,OACzBD,EAAOE,KAAKD,OAAS,WACnB,IAAI1C,EAAO0C,EAAOE,MAAM,KAAMC,WAI9B,OAHA7C,EAAK8C,UAAY,SAASC,GAAM/C,EAAKgD,OAASD,GAC9C/C,EAAKiD,aAAe,SAASF,GAAM/C,EAAKkD,QAAUH,GAClD/C,EAAKmD,gBAAkB,SAASJ,GAAM/C,EAAKoD,QAAUL,GAC9C/C,GAETyC,EAAOY,MAAM,iBAAiB,WAC5BZ,EAAOa,OAAOC,GAAGtD,KAAM,kBAAkB,SAASuD,GAChDA,EAAMC,MAAMC,KAAI,SAASC,GACvBlB,EAAOa,OAAOM,QAAQD,EAAKE,MAAO,YAAa,CAAEF,KAAOA,IACxDlB,EAAOa,OAAOM,QAAQD,EAAKG,MAAO,YAAa,CAAEH,KAAOA,IACxDA,EAAKE,MAAMb,QACTW,EAAKE,MAAMb,OAAOW,GACpBA,EAAKG,MAAMd,QACTW,EAAKG,MAAMd,OAAOW,SAIxBlB,EAAOa,OAAOC,GAAGtD,KAAM,mBAAmB,SAASuD,GACjDA,EAAMC,MAAMC,KAAI,SAASC,GACvBlB,EAAOa,OAAOM,QACZD,EAAKE,MACL,kBACA,CAAEF,KAAMA,IAEVlB,EAAOa,OAAOM,QACZD,EAAKG,MACL,kBACA,CAAEH,KAAMA,IAEVA,EAAKE,MAAMT,SACTO,EAAKE,MAAMT,QAAQO,GACrBA,EAAKG,MAAMV,SACTO,EAAKG,MAAMV,QAAQO,SAIzBlB,EAAOa,OAAOC,GAAGtD,KAAM,gBAAgB,SAASuD,GAC9CA,EAAMC,MAAMC,KAAI,SAASC,GACvBlB,EAAOa,OAAOM,QAAQD,EAAKE,MAAO,eAAgB,CAAEF,KAAOA,IAC3DlB,EAAOa,OAAOM,QAAQD,EAAKG,MAAO,eAAgB,CAAEH,KAAOA,IAC3DA,EAAKE,MAAMX,SACTS,EAAKE,MAAMX,QAAQS,GACrBA,EAAKG,MAAMZ,SACTS,EAAKG,MAAMZ,QAAQS,cAtDlB7D,EAAQ,KA6DdiE,OAAOC,SAAS5B,GACvBF,EAAOC,QAAQC,sBAAwBA,G,oBC9DvC,IAAIvC,EAASC,EAAQ,KAErB,SAASmE,EAAmBC,EAAKC,GAC/B,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,EAOvC,SAASI,EAASjC,GACjBpC,KAAKoC,KAAOA,EACZpC,KAAKK,KAAOT,IACZI,KAAKsE,YAASnE,EACdH,KAAKuE,SAAW,GAChBvE,KAAKwE,UAAY,GACjBxE,KAAKyE,kBAAetE,EAGrBkE,EAASrD,UAAU0D,aAAe,SAASpD,EAAKG,GAI9CA,EAHIA,GAAgBzB,KAAKyE,aAGXhD,GAAezB,KAAKyE,aAFpB,QAMf,IAAIE,EAAQ3E,KAAKsE,OAAOJ,IAAIrC,EAAI7B,KAAKsE,OAAOL,IAAIpC,EAC5C+C,EAAS5E,KAAKsE,OAAOJ,IAAIpC,EAAI9B,KAAKsE,OAAOL,IAAInC,EAEjDR,EAAIuD,YACJvD,EAAIwD,KAAK9E,KAAKsE,OAAOL,IAAIpC,EAAE,EAAG7B,KAAKsE,OAAOL,IAAInC,EAAE,EAAG6C,EAAM,EAAGC,EAAO,GACnEtD,EAAIG,YAAcA,EAClBH,EAAII,UAAY,EAChBJ,EAAIU,UAGLqC,EAASrD,UAAU+D,oBAAsB,WACxC,OAAG/E,KAAKsE,OACA,CACNzC,EAAGmC,EAAmBhE,KAAKsE,OAAOL,IAAIpC,EAAG7B,KAAKsE,OAAOJ,IAAIrC,GACzDC,EAAGkC,EAAmBhE,KAAKsE,OAAOL,IAAInC,EAAG9B,KAAKsE,OAAOJ,IAAIpC,IAGnD,CACND,EAAG,EACHC,EAAG,IAKNuC,EAASrD,UAAUgE,aAAc,SAASC,GACzCjF,KAAKwE,UAAYxE,KAAKwE,UAAUU,QAAO,SAASC,GAC/C,OAAQA,IAAMF,KAEfA,EAAMzE,cAAWL,GAGlBkE,EAASrD,UAAUoE,WAAa,SAASd,GACxCtE,KAAKsE,OAASA,GAGfD,EAASrD,UAAUqE,WAAa,SAASC,EAAaL,EAAOM,GAC5DvF,KAAKgF,aAAaC,GAClBK,EAAYE,UAAUP,GAEnBM,GACFA,EAASN,IAIXZ,EAASrD,UAAUyE,6BAA+B,SAASC,GAE1D,IADA,IAlEwBC,EAkEpBC,EAAY,GACPC,EAAE,EAAGA,EAAEH,EAAYG,IAAK,CAChC,IAAIC,GApEmBH,EAoEM3F,KAAKwE,WAnErBL,KAAK4B,MAAMJ,EAAIK,OAAS7B,KAAKC,WAoEvC0B,GAA8B,GAApBA,EAAOjF,WACnB+E,EAAUK,KAAKH,GAIjB,OAAOF,GAIRvB,EAASrD,UAAUwE,UAAY,SAASP,GACvCjF,KAAKwE,UAAUyB,KAAKhB,GACpBA,EAAMzE,SAAWR,MAGlBiC,EAAOC,QAAUmC,G,kBCzFjB,SAAS6B,IACRlG,KAAKmG,QAAU,GAGhBD,EAAOlF,UAAUoF,YAAc,SAASd,EAAae,GACpD,IAAK,IAAIR,EAAE,EAAGA,EAAI7F,KAAKmG,QAAQH,OAAQH,IAAK,CAC3C,IAAIZ,EAAQjF,KAAKmG,QAAQN,GACzBZ,EAAMzE,SAAS6E,WAAWC,EAAaL,EAAOoB,KAIhDH,EAAOlF,UAAUsF,iBAAmB,SAASD,GAC5C,IAAK,IAAIR,EAAE,EAAGA,EAAI7F,KAAKmG,QAAQH,OAAQH,IAAK,CAC3C,IAAIZ,EAAQjF,KAAKmG,QAAQN,GACzBZ,EAAMzE,SAAS6E,WAAWJ,EAAMxE,KAAMwE,EAAOoB,KAI/CH,EAAOlF,UAAUwE,UAAY,SAASP,EAAOM,GAC5CvF,KAAKmG,QAAQF,KAAKhB,GAClBA,EAAMvE,QAAQuF,KAAKjG,MAEfuF,GAAUA,EAASN,IAGxBhD,EAAOC,QAAUgE,G,oBCzBjB,IAAIK,EAAoB1G,EAAQ,KAC5B2G,EAAS3G,EAAQ,KAGrB,SAAS4G,IACRzG,KAAK0G,WAAa,IAAIH,GAAkB,SAASpB,EAAEwB,GAClD,OAAOxB,EAAEyB,KAAOD,EAAEC,QAIpBH,EAAWzF,UAAU6F,UAAY,SAASC,EAAcC,GACvDP,EAAOO,EAAQH,MAAQG,EAAQxB,UAC/BwB,EAAQC,cAAgBD,EAAQH,KAChCG,EAAQH,MAAQE,EAChB9G,KAAK0G,WAAWO,IAAIF,IAGrBN,EAAWzF,UAAUkG,iBAAmB,SAASJ,EAAcK,GAE9D,IADA,IAAIC,EAAa,EACVpH,KAAK0G,WAAWW,QAAUrH,KAAK0G,WAAWW,OAAOT,KAAOE,GAAgBM,EAAaD,GAAY,CACvG,IAAIG,EAAatH,KAAK0G,WAAWa,OAET,GAApBD,EAAWE,QACVF,EAAWG,WACdzH,KAAK6G,UAAUC,EAAc,CAACF,KAAKU,EAAWN,cAAezB,SAAS+B,EAAW/B,SAAUkC,WAAU,EAAMD,OAAM,IAElHF,EAAW/B,WACX6B,GAAc,KAKjBX,EAAWzF,UAAU0G,aAAe,WACnC1H,KAAK0G,WAAa,KAClB1G,KAAK0G,WAAa,IAAIH,GAAkB,SAASpB,EAAEwB,GAClD,OAAOxB,EAAEyB,KAAOD,EAAEC,SAMpB3E,EAAOC,QAAUuE,G,yICvCb7G,EAASC,EAAQ,KAIjB8H,EAAiB,SAASvG,GAC7B,IAAIwG,EAAYxG,EAAYyG,YAAcC,QAAMC,YAAYC,OAAO,GAC/DC,EAAqB9D,KAAKD,IAAIC,KAAKF,IAAI7C,EAAY8G,eAAiBJ,QAAMK,OAAOH,OAAO,EAAG,KAAO,GAAI,GAE1GJ,GAAwB,EAGxB5H,KAAK6H,YAAcD,EACnB5H,KAAKkI,eAAiBD,GAGvB,SAASG,EAASzH,EAAO0H,GACxBrI,KAAKqI,YAASlI,EACdH,KAAKI,0BAAuBD,EAC5BH,KAAKK,KAAOT,IACZI,KAAK6H,YAAclH,GAASwD,KAAKC,SACjCpE,KAAKsI,kBAAoBX,EACzB3H,KAAKkI,eAAiB,GAGvBE,EAASpH,UAAUuH,cAAgB,SAASC,GAC3C,IACIC,EAAe,IAAIL,EADDpI,KAAK6H,aAO3B,OALAY,EAAaP,eAAiBlI,KAAKkI,eAE/B/D,KAAKC,SAAWoE,GAAYxI,KAAKsI,mBACpCG,EAAaH,kBAAkBtI,MAEzByI,GAGOL,QCjCTM,EAAS7I,EAAQ,KAkQR8I,GAjQF9I,EAAQ,KAGc,SAAC,GAAiG,IAAhG+I,EAA+F,EAA/FA,oBAAqBC,EAA0E,EAA1EA,oBAAqBC,EAAqD,EAArDA,eAAgBC,EAAqC,EAArCA,qBAAsBC,EAAe,EAAfA,UAC3GC,EAAUC,iBAAO,MAEjBC,EAAc,SAACC,GACjB,IAyIIC,EAAOR,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBAzIpE,CACXF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,GACHC,EAAG,IAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAgIX2H,EAAOZ,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBA3HnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,GACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAkHX4H,EAAOb,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBA7GnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,GACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAoGX6H,EAAOd,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBA/FnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,IAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAsFX8H,EAAOf,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBAjFnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAwEX+H,EAAOhB,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBApEnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UA2DXgI,EAAOjB,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBAtDnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,IAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UA6CXiI,EAAOlB,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBAxCnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UA+BXkI,EAAOnB,EAAoBD,EAAqB,CAACU,KAAK,eAAgBC,QAAQ,CAACC,gBA3BnE,CACZF,KAAM,YACN/E,SAAU,IACVD,OAAQ,CACJL,IAAK,CACDpC,EAAG,IACHC,EAAG,KAEPoC,IAAK,CACDrC,EAAG,IACHC,EAAG,UAmBf+G,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWZ,EAAMa,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWR,EAAMS,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWP,EAAMQ,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWN,EAAMO,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWL,EAAMM,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWJ,EAAMK,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWH,EAAMI,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWF,EAAMG,WAAY,MACnGrB,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAQ,CAACU,UAAWD,EAAME,WAAY,MAGnGtB,EAAoBuB,QAAQtD,UAAU,CAACD,KAAM,IAAMrB,SAAUqD,EAAoBuB,QAAQC,sBAAuB3C,WAAW,EAAMD,OAAM,IAGvIqB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAchB,EAAKhJ,KAAMiK,YAAYb,EAAKpJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcZ,EAAKpJ,KAAMiK,YAAYZ,EAAKrJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcX,EAAKrJ,KAAMiK,YAAYX,EAAKtJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYjB,EAAKhJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYV,EAAKvJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYT,EAAKxJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYR,EAAKzJ,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYP,EAAK1J,KAAM6J,WAAW,KAC1IrB,EAAoBD,EAAqB,CAACU,KAAK,qBAAsBC,QAAS,CAACc,cAAcV,EAAKtJ,KAAMiK,YAAYN,EAAK3J,KAAM6J,WAAW,KAG1IxB,EAAO6B,OAAOC,QAAQ5B,EAAoBuB,QAAQM,QAClD5B,EAAoBD,EAAqB,CAACU,KAAM,eAAgBC,QAAS,CAACmB,WAAYtB,MAkE1F,OA/DAuB,qBAAU,WAEN,IAWIC,EAAoB,CACpBC,iBAAkB,IAClBtJ,WAAY,EACZuJ,cAAe,KAEnBF,EAAkBE,cAAgB,EAAEF,EAAkBC,iBA2BtDE,QAAQC,IAAI,sBAEZpC,EAAoBuB,QAAU,IAAIc,GAAiB,EAAOL,EA3BnC,CACnBM,sBAAuB,GAEvBC,qBAAsB,EACtBC,wBAAyB,EAEzBC,qBAAsB,EACtBC,wBAAyB,EACzBC,sBAAuB,GAEvBC,kCAAmC,IACnCC,qCAAsC,IAEtCC,mBAAoB,GACpBC,iBAAkB,GAClBC,kBAAmB,IACnBC,eAAgB,GAGY,CAC5BC,YAAa,CAAC,WAAY,SAAY,WAAY,WAAY,MAAY,WAAY,WAAY,SAAW,WAAY,YACzHC,cAAe,CAAC,eAAgB,OAAQ,SAAU,SAAU,OAAQ,WAAY,UAAW,gBAAiB,YAAa,UAO7HlD,EAAoBD,EAAqB,CAACU,KAAK,oBAAqBC,QAAQ,CAACN,QAAQA,KAErFE,EAAYH,KAGb,IAGHgD,2BAAgB,WACTpD,EAAoBuB,UACnBhB,EAAYH,GACZD,GAAsB,SAAAkD,GAAC,OAAIA,EAAE,QAElC,CAACnD,IAGA,6BACI,yBAAKoD,IAAKjD,EAASkD,MAAO,CAACvH,OAAO,IAAKD,MAAM,UC1PrD+D,EAAS7I,EAAQ,KACrBA,EAAQ,KACR,IAAMsC,EAA0BtC,EAAQ,KAAlCsC,sBACNuG,EAAO0D,IAAI,cAAejK,GAE1BuG,EAAO2D,MAAQ,EACflI,KAAKC,OAASsE,EAAO6B,OAAOnG,OAC5B0D,QAAMwE,WAAa5D,EAAO6B,OAAOnG,OAEjC,IAAIoC,EAAS3G,EAAQ,KAEjB0M,EAAQ1M,EAAQ,KAChB2M,EAAe,IAAID,EAAME,MAAMC,MAE/BrI,EAAWxE,EAAQ,KACnBqG,EAASrG,EAAQ,KACjB4G,EAAa5G,EAAQ,KAErBC,EAAQD,EAAQ,KAEhB8M,EAAW9M,EAAQ,KAgBnB+M,GAfSD,EAAU,CACnBA,SAAU,cACVE,QAAS,EACTC,OAAQ,MACRC,MAAO,IAGWJ,EAAS,CAC3BA,SAAU,WACVE,QAAS,GACTC,OAAQ,MACRC,MAAO,IAGOlN,EAAQ,IACCmN,CAAY,CAAC,WAEpCC,EAAc,CACdC,YAAa,EACbC,SAAU,EACVC,UAAW,EACXC,KAAM,GAGNC,EAAS5E,EAAO4E,OAChBC,EAAS7E,EAAO6E,OAChBC,EAAQ9E,EAAO8E,MAEfC,GADO/E,EAAOhG,KACLgG,EAAO+E,QAEhBC,GADShF,EAAOiF,OACRjF,EAAOgF,OACfE,EAAkBlF,EAAOkF,gBACzBvK,EAASqF,EAAOrF,OAGhBwK,EAA4B,CAC5BhD,iBAAiB,IACjBtJ,WAAY,EACZuJ,cAAe,IACfgD,kBAAmB,GACnBC,eAAgB,IAGhBC,EAA2B,CAC3B9C,sBAAuB,GAEvBC,qBAAsB,EACtBC,wBAAyB,EAEzBC,qBAAsB,EACtBC,wBAAyB,EACzBC,sBAAuB,GAEvBC,kCAAmC,IACnCC,qCAAsC,IAEtCC,mBAAoB,GACpBC,iBAAkB,GAClBC,kBAAmB,IACnBC,eAAgB,GAChBoC,6BAA6B,GAG7BC,EAA4B,CAC5BpC,YAAa,CAAC,WAAY,SAAY,WAAY,WAAY,MAAY,WAAY,WAAY,SAAW,WAAY,YACzHC,cAAe,CAAC,cAAe,OAAQ,SAAU,SAAU,OAAQ,WAAY,UAAW,gBAAiB,YAAa,SAG5H,SAASd,EAAiBkD,EAAcvD,EAAmBwD,EAAkBC,GACzErO,KAAK4K,kBAAoBlC,EAAO6B,OAAO+D,OAAOT,EAA2BjD,GACzE5K,KAAKoO,iBAAmB1F,EAAO6B,OAAO+D,OAAON,EAA0BI,GACvEpO,KAAKqO,kBAAoB3F,EAAO6B,OAAO+D,OAAOJ,EAA2BG,GACzErO,KAAKuO,aAAef,EAAM/K,SAC1BzC,KAAKwO,SAAWL,IAAgB,EAChCnO,KAAK4M,qBAAuBA,EAE5B7B,QAAQC,IAAI,2CAEZhL,KAAKyO,cAAgBnB,EAAO7K,OAAO,CACjCiM,mBAAoB,GACpBC,mBAAoB,GACpBC,qBAAsB,KAGxB5O,KAAKyO,cAAcI,MAAMC,QAAQhN,EAAI,EACrC9B,KAAK+O,YAAc,IAAItI,EACvBzG,KAAKgP,gBAAkB,IAAIzC,EAAME,MAAMC,MAK3CzB,EAAiBjK,UAAUiO,eAAiB,SAASC,GACjD,IAAIC,EAAOD,EAEXlP,KAAKoP,cAAgB7B,EAAO9K,OAAO,CAC/B4M,QAASF,EACTG,OAAQtP,KAAKyO,cACbc,QAAS,CACL3K,OAAQuK,EAAKK,aACb7K,MAAOwK,EAAKM,YACZC,WAAY,oBACZC,YAAY,KAIpB,IAAIC,EAAQlC,EAAMjL,OAAOzC,KAAKoP,cAAcS,QAE5C7P,KAAK8P,gBAAkBlC,EAAgBnL,OAAOzC,KAAKyO,cAAe,CAC9DmB,MAAOA,EACPG,WAAY,CACRC,UAAW,GACXC,OAAQ,CACJC,SAAS,MAKrBN,EAAMP,QAAQc,oBAAoB,aAAcP,EAAMQ,YACtDR,EAAMP,QAAQc,oBAAoB,iBAAkBP,EAAMQ,YAC1DpQ,KAAKoP,cAAcQ,MAAQA,EAC3BpC,EAAMvG,IAAIjH,KAAKyO,cAAcI,MAAO7O,KAAK8P,iBAEzCvC,EAAO8C,IAAIrQ,KAAKoP,eAChB9B,EAAO+C,IAAIrQ,KAAKyO,gBAGpBxD,EAAiBjK,UAAUmN,aAAe,SAASmC,GAGlD,GAFAA,EAAYA,GAAa,GAEtBtQ,KAAKmO,aACD,IAAI,IAAIoC,EAAE,EAAGA,EAAED,EAAUtQ,KAAK4K,kBAAkBC,iBAAkB0F,IAAK,CAGtEvQ,KAAK+O,YAAY7H,iBAAiBlH,KAAK8G,aAAc,KAEjC4B,EAAO6B,OAAOiG,OAAOxQ,KAAKyK,QAI3C6C,EAAOmD,OAAOzQ,KAAKyO,cAAe,IAAO,IACzCzO,KAAK8G,aAAe9G,KAAKyO,cAAciC,OAAOC,YAM1D1F,EAAiBjK,UAAU4P,iBAAmB,WAAY,IAAD,OACrDpE,EAAaqE,QACb7Q,KAAK8Q,UAAY,GAEjB9Q,KAAKgP,gBAAgB6B,QACrB7Q,KAAK+Q,mBAAqB,GAE1B/Q,KAAKyK,OAAS,GACdzK,KAAKU,QAAU,GACfV,KAAK8G,aAAe,EACpB9G,KAAKgR,aAAe,GACpBhR,KAAKyO,cAAciC,OAAOC,UAAY,EAEtC,IAAK,IAAI9K,EAAE,EAAGA,EAAEoH,EAAYI,KAAMxH,IAC9B7F,KAAKgR,aAAa/K,KAAK,GAQvBjG,KAAKwO,WACRnL,EAAOC,GAAGtD,KAAKoP,cAAe,gBAAgB,SAAC6B,GAC3C,EAAKnK,aAAemK,EAAEN,UACtB,EAAK5B,YAAY7H,iBAAiB,EAAKJ,aAAc,QAGzDzD,EAAOC,GAAGtD,KAAKoP,cAAe,eAAe,SAAC6B,GAC1C,IAAI3P,EAAM,EAAK8N,cAAc8B,QAE7B,GAAG5P,EAAK,CAEJ,IAAK,IAAIuE,EAAE,EAAGA,EAAG,EAAKiL,UAAU9K,OAAQH,IACpC,EAAKiL,UAAUjL,GAAGnB,aAAapD,GAEhC,EAAKmJ,OAAO0G,SAAS,SAAClM,GACfA,EAAMnE,QACLmE,EAAM5D,UAAUC,EAAK,EAAKsJ,kBAAkBrJ,oBAOhEvB,KAAK6G,UAAU,CAACD,KAAM,IAAKrB,SAAUvF,KAAKoR,mBAAoB3J,WAAU,EAAMD,OAAM,KAIxFyD,EAAiBjK,UAAUqQ,iBAAmB,SAASC,EAAKC,GACxD,IAAIC,EAAYF,EAAIG,aAAavR,MACjCoR,EAAIG,aAAavR,MAAQqR,EAEA,qBAAdC,IAA2BxR,KAAKgR,aAAaQ,IAAc,GAEtExR,KAAKgR,aAAaO,IAAc,EAEhCD,EAAIrB,OAAOvO,UAAY,EACvB,IAAIgQ,EAAeJ,EAAIrB,OAAOxO,YAK9B,OAAO8P,GACH,KAAKtE,EAAYE,SACbuE,EAAe,MACG,WAClB,MAKJ,KAAKzE,EAAYG,UACbsE,EAAe,OACG,WAClB,MACJ,KAAKzE,EAAY0E,UACbL,EAAIrB,OAAOvO,UAAY,EAK/B,OADA4P,EAAIrB,OAAOxO,YAAciQ,EAClBJ,GAIXrG,EAAiBjK,UAAU4Q,aAAe,SAASxP,EAAMyP,GACrD,IAAIC,EAAe,IAAIzN,EAASjC,GAWhC,OAVA0P,EAAarN,aAAeoN,EAAoBpN,aAChDqN,EAAa1M,WAAWyM,EAAoBvN,QAC5CwN,EAAavN,SAAWsN,EAAoBtN,SAC5CuN,EAAaxI,KAAOuI,EAAoBvI,MAAQ,OAEhDwI,EAAaC,WAAa/R,KAAKqO,kBAAkBtC,cAAc/L,KAAK8Q,UAAU9K,QAC9E8L,EAAaE,gBAAkBhS,KAAKqO,kBAAkBvC,YAAY9L,KAAK8Q,UAAU9K,QAEjFhG,KAAK8Q,UAAU7K,KAAK6L,GACpB9R,KAAK+Q,mBAAmBe,EAAazR,MAAQyR,EACtCA,GAGX7G,EAAiBjK,UAAUiR,WAAa,WACpC,IAAIC,EAAa,IAAIhM,EAErB,OADAlG,KAAKU,QAAQuF,KAAKiM,GACXA,GAGXjH,EAAiBjK,UAAUmR,cAAgB,SAASb,EAAKc,GACrDA,EAAO5M,UAAU8L,EAAIG,eAGzBxG,EAAiBjK,UAAUqR,WAAa,SAASf,EAAKgB,EAAyBC,GAAkB,IAAD,OACxFA,GAAmBA,EAAgBxR,SACnCuQ,EAAIG,aAAa1Q,SAAWwR,EAAgBxR,SAASwH,cAAcvI,KAAK4K,kBAAkBkD,mBAE1FwD,EAAIG,aAAa1Q,SAAW,IAAIqH,EAAS,GAAK,QAElDpI,KAAKqR,iBAAiBC,EAAKrE,EAAYE,UACnCnN,KAAKwS,yBAAyBxS,KAAKwS,wBAAwBlB,EAAIG,aAAcc,GAEjF,IAEIE,EAAmB,CACnB7L,KAHkBzC,KAAKD,IAAI4D,QAAMC,YAAYC,OAAO,EAAEhI,KAAKoO,iBAAiB/C,sBAAuB,GAG7ErL,KAAK4K,kBAAkBC,iBAC7CtF,SAAU,WACN,EAAK8L,iBAAiBC,EAAKrE,EAAYG,WACvCkE,EAAIG,aAAa1Q,cAAWZ,GAEhCqH,OAAO,GAGXxH,KAAK6G,UAAU4L,GACfnB,EAAIG,aAAalR,OAAO0F,KAAKwM,IAGjCxH,EAAiBjK,UAAU0R,4BAA8B,SAASnN,GAC9DvF,KAAKwS,wBAA0BjN,GAGnC0F,EAAiBjK,UAAU2R,wBAA0B,SAASC,GAAO,IAAD,OAChE,OAAO,WACCA,EAAKC,KAAKlC,UAAY,EAAK7J,aAAe,EAAK8D,kBAAkBE,cACjE0B,EAAasG,WAAWF,GAGxB,EAAK/L,UAAW,CACZD,KAAM,EAAKE,aAAe,EAAK8D,kBAAkBE,cAAiB8H,EAAKC,KAAKlC,UAC5EpL,SAAU,EAAKoN,wBAAwBC,GACvCpL,OAAO,MAMvByD,EAAiBjK,UAAU+R,oBAAsB,SAASC,EAAcC,GACpE,OAAGjT,KAAKoO,iBAAiBH,4BACdgF,EAAaxB,aAAa1Q,SAASmH,eAEnClI,KAAKoO,iBAAiBlD,uBAGrCD,EAAiBjK,UAAUkS,8BAAiC,SAASC,GAAkB,IAAD,OAClF,OACI,SAAC/R,GACOA,EAAYlB,OAAS+M,EAAYE,UACjCgG,EAAgB1B,aAAavR,OAAS+M,EAAYC,aAE9CxE,EAAO6B,OAAOnG,OAAO,EAAG,GAAK,EAAK2O,oBAAoBI,EAAiB/R,EAAYrB,OAInF,EAAKsS,WAAWc,EAAiBlG,EAAYE,SAAU/L,GAI/DoF,EAAOpF,EAAYf,MAAQ8S,EAAgB1B,aAAapR,MAExD,IAAI+S,EAAY5G,EAAa6G,QAAQF,EAAgB1B,aAAapR,KAAMe,EAAYf,OAASmM,EAAa6G,QAAQjS,EAAYf,KAAM8S,EAAgB1B,aAAapR,MAC7J+S,EACAA,EAAUP,KAAKlC,UAAY,EAAK7J,cAEhCN,EAAOgG,EAAa8G,QAAQH,EAAgB1B,aAAapR,OAASmM,EAAa8G,QAAQH,EAAgB1B,aAAapR,OACpH+S,EAAY5G,EAAa+G,QAAQJ,EAAgB1B,aAAapR,KAAMe,EAAYf,KAAM,CAACmT,OAAOL,EAAgB1B,aAAapR,KAAMsQ,UAAU,EAAK7J,eAChJ,EAAKD,UAAW,CACZD,KAAM,EAAKgE,kBAAkBE,cAAc,EAC3CvF,SAAU,EAAKoN,wBAAwBS,GACvC5L,OAAO,OAQ3ByD,EAAiBjK,UAAUwE,UAAY,SAASiO,GAAqD,IAAtCC,EAAqC,uDAAzBzG,EAAYC,YAEnF1G,EAAOiN,GAAiBA,EAAc1O,qBAEtC,IAAI4O,EAAMF,EAAc1O,sBAEpB6O,EAAiBnG,EAAOoG,OAAOF,EAAI9R,EAAG8R,EAAI7R,EAAG9B,KAAK4K,kBAAkBrJ,WAAY,CAACuS,OAAQ,CAACC,KAAMN,EAAcnP,UAuClH,OAtCAsP,EAAe3D,OAAOzO,UAAYiS,EAAc1B,YAAc,QAC9D6B,EAAenS,YAAc,QAC7BmS,EAAelS,UAAY,EAE3BkS,EAAenC,aAAe,IAAI3R,EAAM8T,GACxCA,EAAeI,YAAcP,EAAclP,SAC3CqP,EAAerP,SAAW,EAC1BqP,EAAeK,YAAc,IAC7BL,EAAenC,aAAahR,KAAOgT,EACnCG,EAAenC,aAAanR,WAAamT,EAAczB,gBACvD4B,EAAenC,aAAayC,SAAWpM,QAAMC,YAAYC,OAAO,GAAGhI,KAAK4K,kBAAkBmD,eAAe/N,KAAK4K,kBAAkBC,mBAChI+I,EAAeO,KAAO3H,EAAa4H,QAAQR,EAAenC,aAAapR,KAAM,CAACoR,aAAamC,EAAenC,aAAcnR,WAAWmT,EAAczB,kBAEjJyB,EAAcjO,UAAUoO,EAAenC,cACvCzR,KAAKyK,OAAOxE,KAAK2N,EAAenC,cAChCzR,KAAKqR,iBAAiBuC,EAAgBF,GAEtCE,EAAenC,aAAavQ,8BAA8BlB,KAAKkT,8BAA8BU,EAAgB5T,KAAKqU,wBAGlHT,EAAe/Q,WAAW,SAACa,GACnBA,EAAKE,QAAUgQ,GAAkBlQ,EAAKG,MAAM4N,aAC5C/N,EAAKE,MAAM6N,aAAatQ,qBAAqBuC,EAAKG,MAAM4N,cAEjD/N,EAAKG,QAAU+P,GAAkBlQ,EAAKE,MAAM6N,cACnD/N,EAAKG,MAAM4N,aAAatQ,qBAAqBuC,EAAKE,MAAM6N,iBAIhEjE,EAAMvG,IAAIjH,KAAKyO,cAAcI,MAAO+E,GAEpC5T,KAAK6G,UAAW,CACZD,KAAMgN,EAAenC,aAAayC,SAClC3O,SAAUvF,KAAKsU,aAAaV,EAAenC,cAC3ChK,WAAU,EACVD,OAAM,IAGHoM,GAEX3I,EAAiBjK,UAAUsT,aAAe,SAASC,GAAkB,IAAD,OAChE,OAAO,WACH,IAAIC,EAAWD,EAAgB9T,KAC/B,EAAKgU,aAAaF,GAClB,EAAK/O,UAAUgP,KAIvBvJ,EAAiBjK,UAAUyT,aAAe,SAASC,GAC/CA,EAASlU,SAASwE,aAAa0P,GAE/B1U,KAAKyK,OAASzK,KAAKyK,OAAOvF,QAAO,SAASC,GAC5C,OAAQA,IAAMuP,KAGZhM,EAAOiM,UAAUC,OAAO5U,KAAKyO,cAAcI,MAAO6F,EAAS3U,MAC3DyM,EAAaqI,WAAWH,EAASrU,MAEjCL,KAAKgR,aAAa0D,EAASxU,QAAU,EAErCwU,EAASnU,OAAO4Q,SAAQ,SAAC5N,GAAWA,EAAMiE,OAAQ,MAGtDyD,EAAiBjK,UAAU6F,UAAY,SAAUiO,GAC7CtO,EAAOsO,EAAOlO,MAAQkO,EAAOvP,UAC7BvF,KAAK+O,YAAYlI,UAAU7G,KAAK8G,aAAcgO,IAGlD7J,EAAiBjK,UAAU+T,2BAA6B,SAAUxP,GAC9DvF,KAAKgV,uBAAyBzP,GAGlC0F,EAAiBjK,UAAUiU,gBAAkB,WAEzCzH,EAAMqD,MAAM7Q,KAAKyO,cAAcI,OAC/BvB,EAAOuD,MAAM7Q,KAAKyO,eAClBzO,KAAK+O,YAAYrH,gBAGrBuD,EAAiBjK,UAAUkU,iBAAmB,WAC1ClV,KAAKiV,kBACL1H,EAAO4H,OAEPnV,KAAKyO,cAAclO,OAAS,GAC5BP,KAAKoP,cAAcS,OAAO+E,SAC1B5U,KAAKoP,cAAcS,OAAS,KAC5B7P,KAAKoP,cAAc8B,QAAU,KAC7BlR,KAAKoP,cAAcgG,SAAW,GAE9BpV,KAAKuO,aAAe,KACpBvO,KAAKyO,cAAgB,KACrBzO,KAAK+O,YAAc,KACnB/O,KAAKoP,cAAgB,KACrBpP,KAAK8P,gBAAkB,MAG3B7E,EAAiBjK,UAAUoQ,iBAAmB,WAAY,IAAD,OACrD,OAAO,WACH,GAAI,EAAK3G,OAAOzE,OAAS,EACrB,IAAK,IAAIH,EAAE,EAAGA,EAAI,IAAKA,IAAK,CACxB,IAAIwP,EAAa3M,EAAO6B,OAAOiG,OAAO,EAAK/F,QAC3C/B,EAAOhG,KAAK4S,WAAWD,EAAWtV,KAAMsV,EAAWtV,KAAK6B,SAAU,CAC9DC,EAAE6G,EAAO6B,OAAOnG,QAAQ,KAAK,EAAKgK,iBAAiBvC,eAAgB,KAAK,EAAKuC,iBAAiBvC,gBAC9F/J,EAAE4G,EAAO6B,OAAOnG,QAAQ,KAAK,EAAKgK,iBAAiBvC,eAAgB,KAAK,EAAKuC,iBAAiBvC,qBAOlHZ,EAAiBjK,UAAUuU,oBAAsB,WAC7C,IAAI3P,EAAY,GAIhB,OAHA5F,KAAKgP,gBAAgBwG,aAAY,SAASC,GACtC7P,EAAUK,KAAK,CAACyP,UAAUD,EAAKE,OAAQC,QAAQH,EAAKI,KAAM3L,WAAWuL,EAAK5C,KAAK3I,gBAE5EtE,GAEXqF,EAAiBjK,UAAU8U,mBAAqB,SAASC,EAAoBC,EAAkBC,GAC3F,IAAIC,EAAgBlW,KAAKgP,gBAAgBqE,QAAQ0C,EAAoBC,GAClEE,EACCA,EAAcrD,KAAK3I,WAAa+L,EAEhCjW,KAAKgP,gBAAgBuE,QAAQwC,EAAoBC,EAAkB,CAAC9L,WAAW+L,KAGvFhL,EAAiBjK,UAAUmV,sBAAwB,SAASJ,EAAoBC,GAC5E,IAAIE,EAAgBlW,KAAKgP,gBAAgBqE,QAAQ0C,EAAoBC,GACjEE,GACAlW,KAAKgP,gBAAgB8D,WAAWoD,IAKxCjL,EAAiBjK,UAAUoJ,oBAAsB,WAAY,IAAD,OACxD,OAAO,WACH,EAAK4E,gBAAgBwG,aAAY,SAACC,GAC9B,IAAIW,EAAS,EAAKrF,mBAAmB0E,EAAKE,QACtCU,EAAO,EAAKtF,mBAAmB0E,EAAKI,MAEvBO,EAAO3Q,6BAA6BgQ,EAAK5C,KAAK3I,YACpDiH,SAAS,SAAAmF,GAChBA,EAAgB1V,WAAa,CACzBJ,SAAS4V,EACTxU,SAAS,eAAK0U,EAAgBvW,KAAK6B,UACnC2U,SAAS,eAAKD,EAAgBvW,KAAKwW,WAGvCH,EAAO/Q,WAAWgR,EAAMC,GAAiB,SAASrR,GAC9CA,EAAMlF,KAAK+T,OAAOC,KAAOsC,EAAK/R,OAC9BoE,EAAOhG,KAAK8T,YAAYvR,EAAMlF,KAAMsW,EAAKtR,uBACzCE,EAAMlF,KAAKiU,YAAcqC,EAAK9R,SAC9BU,EAAMpE,WAAY,KAGtB,EAAKgG,UAAW,CACZD,KAAM,EAAKgE,kBAAkBC,iBAC7BtF,SAAU,WACN8Q,EAAKhR,WAAW+Q,EAAQE,GAAiB,SAACrR,GACtCyD,EAAOhG,KAAK8T,YAAYvR,EAAMlF,KAAMuW,EAAgB1V,WAAWgB,UAC/DqD,EAAMlF,KAAK+T,OAAOC,KAAOqC,EAAO9R,OAChCoE,EAAOhG,KAAK+T,YAAYxR,EAAMlF,KAAMuW,EAAgB1V,WAAW2V,UAC/DtR,EAAMlF,KAAKiU,YAAcoC,EAAO7R,SAChCU,EAAMpE,WAAY,MAG1B2G,OAAM,Y,6BCjhBtBkP,EAAcC,IAAKlK,MAAMmK,OAAOC,cAAcrK,EAAc,CAC5DsK,aAAe,GACfC,YAAc,KACdC,UAAY,IACZlI,SAAW,MAGXmI,EAAgBN,IAAKlK,MAAMyK,KAAKC,gBAiDrBC,EA9CsB,SAAC,GAAmE,IAAlExO,EAAiE,EAAjEA,oBAAqBC,EAA4C,EAA5CA,oBAAqBwO,EAAuB,EAAvBA,kBACvEC,EAAYpO,iBAAO,MAuCzB,OArCAyB,qBAAW,WACPI,QAAQC,IAAI,0BACZ,IAAIuM,EAAgBZ,IAAKlK,MAAMyK,KAAKM,SAAShL,EAAc,CACvDiL,UAAWH,EAAUnN,QACrBuN,SAAUT,EACVU,aAAa,EACbC,OAAQlB,EACRmB,YAAa,cAGjBN,EAAclH,MACd,IAAK,IAAIxK,EAAE,EAAGA,EAAI,GAAIA,IAClB0R,EAAcO,UAGlBtL,EAAalJ,GAAG,WAAW,SAASyU,GAChCA,EAAQ5G,SAAS,SAAA6G,GACVA,EAAa7D,MAAmC,OAA3B6D,EAAaC,aACjChB,EAAciB,UAAUF,EAAa7D,KAAKgE,IAAIxX,MAAQqX,EAAa7D,KAAKtB,KAAKpB,aAAanR,WAC1F2W,EAAciB,UAAUF,EAAa7D,KAAKgE,IAAI9K,KAAO,YAKlE,IAEH1C,qBAAY,WAMR9B,EAAoBD,EAAqB,CAACU,KAAM,iBAAkBC,QAAQ,CAAChE,SALvD,SAACN,GACjBgS,EAAciB,UAAUjT,EAAM5E,MAAMM,MAAQsE,EAAM3E,WAClD2W,EAAciB,UAAUjT,EAAM5E,MAAMgN,KAAO,SAIhD,CAACgK,IAKA,yBAAKnL,IAAKoL,EAAWnL,MAAO,CAACxH,MAAM,IAAKC,OAAO,Q,0BC9CvD,IAqLiBwT,EArLsB,SAAC,GAAmE,IAAlExP,EAAiE,EAAjEA,oBAAqBC,EAA4C,EAA5CA,oBAAqBwO,EAAuB,EAAvBA,kBAC/E,EAAkCgB,mBAAS,IAA3C,mBAAOvH,EAAP,KAAkBwH,EAAlB,KACA,EAA0CD,mBAAS,IAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAAkDH,mBAAS,MAA3D,mBAEA,GAFA,UAEkDA,mBAAS,IAA3D,mBAAOI,EAAP,KAA0BC,EAA1B,KACA,EAA4CL,mBAAS,IAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KAEA,EAA8BP,mBAAS,CACnC,CAACQ,MAAM,gBAAiBC,MAAM,YAAaxP,KAAM,WACjD,CAACuP,MAAM,cAAeC,MAAM,UAAWxP,KAAM,WAC7C,CAACuP,MAAM,eAAgBC,MAAM,aAAcxP,KAAM,aAHrD,mBAAOyP,EAAP,KAAgBC,EAAhB,KAOMC,EAAY,SAACC,EAAUC,GACzB,OACID,EAAStD,SAAWuD,EAASvD,SAC7BsD,EAASxD,WAAayD,EAASzD,WAC/BwD,EAAShP,YAAciP,EAASjP,YA+HxC,OAzEAS,qBAAW,WACPqO,EAAW,CACP,CAACH,MAAM,gBAAiBC,MAAM,YAAaxP,KAAM,UAAW8P,OAAOb,EAAec,SAAS,SAC3F,CAACR,MAAM,cAAeC,MAAM,UAAWxP,KAAM,UAAW8P,OAAOb,EAAec,SAAS,SACvF,CAACR,MAAM,eAAgBC,MAAM,aAAcxP,KAAM,eAEtD,CAACiP,IAEJ5N,qBAAW,WAEJgO,EAAe3S,OAAS,GACvB2S,EAAexH,SAAS,SAACmI,GACrBzQ,EACID,EACA,CACIU,KAAK,qBACLC,QAAQ,CACJc,cAAeiP,EAAe5D,UAC9BpL,YAAagP,EAAe1D,QAC5B1L,WAAYoP,EAAepP,mBAKhD,CAACuO,IAEJ9N,qBAAW,WACP,IAAI4O,EAAoB,eAAOhB,GAC3BiB,EAAgB3Q,EAAoBD,EAAqB,CACzDU,KAAK,gBACLC,QAAQ,CACJhE,SAAU,SAACoO,EAAK8F,GACZ,MAAO,CAACC,aAAaD,EAASE,cAAchG,EAAItT,UAI5DiY,EAAakB,GACb,IAAII,EAAsB/Q,EAAoBD,EAAqB,CAACU,KAAK,wBAEtEqP,EAAe3S,OAAS,GAAKuT,IAC5B1Q,EAAoBD,EAAqB,CAACU,KAAM,0BAChDsQ,EAAsBjB,EAAelV,KAAK,SAAC6V,GACvC,IAAIO,EAAeN,EAAqBD,EAAe5D,WACnDoE,EAAaP,EAAqBD,EAAe1D,SACrD,MAAS,CACLF,UAAW8D,EAAcK,GAAcF,cACvC/D,QAAS4D,EAAcM,GAAYH,cACnCzP,WAAYoP,EAAepP,gBAIvC0O,EAAkBgB,GAElBlB,GAAqB,SAAAzM,GAAC,OAAIA,EAAE,OAE7B,CAACoL,IAEJ1M,qBAAW,WACP,IAAIoP,EAAe,GACnBjJ,EAAUK,SAAQ,SAACwC,GACfoG,EAAapG,EAAIgG,eAAiBhG,EAAI+F,gBAG1CV,EAAW,CACP,CAACH,MAAM,gBAAiBC,MAAM,YAAaxP,KAAM,UAAW8P,OAAOb,EAAec,SAAS,SAC3F,CAACR,MAAM,cAAeC,MAAM,UAAWxP,KAAM,UAAW8P,OAAOW,EAAcV,SAAS,SACtF,CAACR,MAAM,eAAgBC,MAAM,aAAcxP,KAAM,aAGrDkP,EAAiBuB,KAElB,CAACjJ,IAGF,kBAAC,IAAD,CACE+H,MAAO,kBACPE,QAASA,EACTlG,KAAM8F,EACNpJ,QAAS,CACLyK,WAAW,EACXC,SAAS,EACTC,QAAQ,EACRC,gBAAiB,CAAC,IAEtBd,SAAW,CACPe,SAAU,SAACC,GACP,OAAO,IAAIC,SAAU,SAACC,EAASC,GAC3B,IA1IoBC,IA0IiBJ,IAzI7B1B,EAAe+B,MAAM,SAACrL,GACtC,OAAQA,EAAQuG,SAAW6E,EAAc7E,SAAWvG,EAAQqG,WAAa+E,EAAc/E,cAGtE+E,EAAcvQ,WAAa,KAGhD0O,EAAkB,GAAD,mBAAKD,GAAL,CAAqB8B,KACtC/B,GAAqB,SAAAzM,GAAC,OAAIA,EAAE,MAkIhBsO,QAGRI,YAAa,SAACN,EAAUO,GACpB,OAAO,IAAIN,SAAS,SAACC,EAASC,IAjIX,SAASC,EAAeI,GAEnD,IAAIjB,EAAmB,YAAOjB,GAC1BmC,EAAanC,EAAeoC,WAAW,SAACC,GACxC,OACIA,EAAMpF,SAAWiF,EAAcjF,SAC/BoF,EAAMtF,WAAamF,EAAcnF,aAGrCuD,EAAUwB,EAAeI,KACzBjB,EAAoBkB,GAAcL,EAClC7B,EAAkBgB,GAClBlB,GAAqB,SAAAzM,GAAC,OAAIA,EAAE,MAsHpBgP,CAAuBZ,EAAUO,GACjCL,QAGRW,YAAa,SAACN,GACV,OAAO,IAAIN,SAAS,SAACC,EAASC,IAvHZ,SAASW,GACnC,IAAIvB,EAAsBjB,EAAezT,QAAQ,SAACoU,GAC9C,OAAOL,EAAUkC,EAAgB7B,MAErCV,EAAkBgB,GAGlB/Q,EACID,EACA,CACIU,KAAK,wBACLC,QAAS,CACLc,cAAe8Q,EAAezF,UAC9BpL,YAAa6Q,EAAevF,WAKxC8C,GAAqB,SAAAzM,GAAC,OAAIA,EAAE,KAsGhBkK,CAAsByE,GACtBL,Y,kBCzKhBa,GAAmB,CACrBC,OAAQ,CACJC,EAAG,GACHC,EAAG,GACH5U,EAAG,GACH4J,EAAG,GACHiL,IAAK,IAETC,YAAY,EACZC,OAAQ,CACJ7Z,EAAE,EACF8Z,QAAS,QACT7Z,EAAE,GAEN8Z,MAAO,CACH/C,MAAO,iBACPgD,UAAW,eAEfC,MAAO,CACHjD,MAAO,UACPgD,UAAW,eAEflX,MAAM,IACNC,OAAO,KAGHmX,GA7BG,CAPc,CACnBla,EAAG,GACHO,KAAM,iBACNkH,KAAM,YAEN0S,OAAQ,CAAErb,MAAO,UAiCrB,SAASsb,GAAQ/b,EAAOgc,GACjBhc,GAAS6K,QAAQC,IAAI,mBAC1B,IAAIuG,EAAS,YAAOrR,GACpB,OAAQgc,EAAO5S,MACb,IAAK,MAEH,OADAiI,EAAU,GAAG1P,EAAIqa,EAAO3S,QAAQ4S,kBACzB5K,EAET,IAAK,SAaH,OAZAA,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYE,WAEhEoE,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYG,YAEhEmE,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYC,cAKzDqE,EAET,IAAK,QAED,OADAA,EAvDC,CAPc,CACnB1P,EAAG,GACHO,KAAM,iBACNkH,KAAM,YAEN0S,OAAQ,CAAErb,MAAO,WAkErB,IA0Ce2b,GA1CiB,SAAC,GAAgE,IAA/D1T,EAA8D,EAA9DA,oBAAqBC,EAAyC,EAAzCA,oBAAqBC,EAAoB,EAApBA,eAE1E,EAAqCyT,qBAAWN,GAASF,IAAzD,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAwCpE,mBAAS,GAAjD,mBAAOqE,EAAP,KAAqBC,EAArB,KAEIC,EAAcxB,GA6BlB,OA3BAzQ,qBAAW,WACP,IAYIkS,EAAWC,aAAa,YAZN,WACpB,IAMIX,EADatT,EAAoBD,EAAqB,CAACU,KAAK,aAAcC,QAAS,CAAChE,SALhE,SAACN,EAAO8X,GAC9B,GAAI9X,EAAMlE,SACR,OAAOkE,EAAMlE,SAASmH,mBAIShD,QAAO,SAAA+L,GAAC,OAAS,MAALA,KAC/CwL,EAAe,CAACnT,KAAM,MAAOC,QAAQ,CAAC4S,kBAAmBA,KACzDQ,GAAgB,SAAAK,GAAC,OAAIA,EAAE,KAIzBC,KACC,KACH,OAAO,WAAQC,cAAcL,MAC5B,CAAC/T,IAGJkD,2BAAgB,WACXpD,EAAoBuB,UACnBsS,EAAe,CAACnT,KAAK,UACrBqT,GAAgB,SAAAK,GAAC,OAAIA,EAAE,QAE1B,CAAClU,IAGF,kBAAC,IAAD,CACE+J,KAAM2J,EACN5E,OAAM,2BAAMgF,GAAN,IAAmBO,aAAaT,OClFxCtB,GAAmB,CACrBC,OAAQ,CACJC,EAAG,GACHC,EAAG,GACH5U,EAAG,GACH4J,EAAG,GACHiL,IAAK,IAETC,YAAY,EACZC,OAAQ,CACJ7Z,EAAE,EACF8Z,QAAS,QACT7Z,EAAE,GAEN8Z,MAAO,CACH/C,MAAO,OACPgD,UAAW,eAEfC,MAAO,CACHjD,MAAO,QACPgD,UAAW,eAEflX,MAAM,IACNC,OAAO,KAGHmX,GA9BY,CAvBD,CACbla,EAAG,CAAC,GACJC,EAAG,CAAC,GACJwH,KAAM,UACNlH,KAAM,WACN4Z,OAAQ,CAAErb,MAAO,QAGH,CACdkB,EAAG,CAAC,GACJC,EAAG,CAAC,GACJM,KAAM,YACNkH,KAAM,UACN0S,OAAQ,CAAErb,MAAO,UAGD,CACdkB,EAAG,CAAC,GACJC,EAAG,CAAC,GACJM,KAAM,cACNkH,KAAM,UACN0S,OAAQ,CAAErb,MAAO,UAkCvB,SAASsb,GAAQ/b,EAAOgc,GACjBhc,GAAS6K,QAAQC,IAAI,mBAC1B,IAAIuG,EAAS,YAAOrR,GACpB,OAAQgc,EAAO5S,MACb,IAAK,SAaH,OAZAiI,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYE,WAEhEoE,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYG,YAEhEmE,EAAU,GAAG1P,EAAEoE,KAAKiW,EAAO3S,QAAQ6S,UACnC7K,EAAU,GAAGzP,EAAEmE,KAAKiW,EAAO3S,QAAQ8S,iBAAiBpP,EAAYC,cAKzDqE,EAET,IAAK,QAED,OADAA,EApDU,CAvBD,CACb1P,EAAG,CAAC,GACJC,EAAG,CAAC,GACJwH,KAAM,UACNlH,KAAM,WACN4Z,OAAQ,CAAErb,MAAO,QAGH,CACdkB,EAAG,CAAC,GACJC,EAAG,CAAC,GACJM,KAAM,YACNkH,KAAM,UACN0S,OAAQ,CAAErb,MAAO,UAGD,CACdkB,EAAG,CAAC,GACJC,EAAG,CAAC,GACJM,KAAM,cACNkH,KAAM,UACN0S,OAAQ,CAAErb,MAAO,WA+DvB,IAoCeyc,GApCc,SAAC,GAAgE,IAA/DxU,EAA8D,EAA9DA,oBAAqBC,EAAyC,EAAzCA,oBAAqBC,EAAoB,EAApBA,eAEvE,EAAqCyT,qBAAWN,GAASF,IAAzD,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAwCpE,mBAAS,GAAjD,mBAAOqE,EAAP,KAAqBC,EAArB,KAEIC,EAAcxB,GAuBlB,OArBAzQ,qBAAW,WACT,IAMMkS,EAAWC,aAAa,YANR,WAClB,IAAIO,EAAaxU,EAAoBD,EAAqB,CAACU,KAAK,qBAChEmT,EAAe,CAACnT,KAAM,SAAUC,QAAQ,CAAC6S,SAAUiB,EAAWjB,SAAUC,iBAAkBgB,EAAWrM,gBACrG2L,GAAgB,SAAAK,GAAC,OAAIA,EAAE,KAIzBC,KACC,KACH,OAAO,WAAQC,cAAcL,MAC5B,CAAC/T,IAGJkD,2BAAgB,WACXpD,EAAoBuB,UACnBsS,EAAe,CAACnT,KAAK,UACrBqT,GAAgB,SAAAK,GAAC,OAAIA,EAAE,QAE1B,CAAClU,IAGF,kBAAC,IAAD,CACE+J,KAAM2J,EACN5E,OAAM,2BAAMgF,GAAN,IAAmBO,aAAaT,O,uECnGtCY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,SAAS,MAEXC,UAAW,CACTjZ,MAAM,KAERkZ,MAAO,CACLC,UAAW,IACXH,SAAU,IACVI,UAAW,UAEbC,eAAgB,CACdF,UAAW,IACXH,SAAU,IACVI,UAAW,SACXE,QAAST,EAAMU,QAAQ,QAI3BjT,EAAiBjK,UAAUmd,wBAA0B,CAAEC,gBAAgB,IAAMC,kBAAkB,IAG/FpT,EAAiBjK,UAAU+R,oBAAsB,SAASC,EAAcC,GACtE,IAAIqL,EAAyBte,KAAKoO,iBAAiBlD,sBACnD,OAAG8H,EAAavB,aAAa3Q,QAAUmS,EAAaxB,aAAa3Q,OACtDwd,GAA0B,EAAEte,KAAKme,wBAAwBC,kBAAoB,EAAEpe,KAAKme,wBAAwBE,mBAC9GrL,EAAavB,aAAa3Q,SAAWmS,EAAaxB,aAAa3Q,OAC7Dwd,GAA0B,EAAEte,KAAKme,wBAAwBC,kBAC1DpL,EAAavB,aAAa3Q,QAAUmS,EAAaxB,aAAa3Q,OAC7Dwd,GAA0B,EAAEte,KAAKme,wBAAwBE,mBAC1DrL,EAAavB,aAAa3Q,QAAWmS,EAAaxB,aAAa3Q,YAApE,EACMwd,GAGb,IAAMzV,GAAsB,SAACD,EAAqBsT,GAsBhD,GArBmB,qBAAfA,EAAO5S,OACTV,EAAoBuB,QAAQ8E,eAAeiN,EAAO3S,QAAQN,QAAQkB,SAClEvB,EAAoBuB,QAAQyG,oBAEX,mCAAfsL,EAAO5S,OACN4S,EAAO3S,QAAQ6U,kBAChBxV,EAAoBuB,QAAQgU,wBAAwBC,gBAAkBlC,EAAO3S,QAAQ6U,iBAEpFlC,EAAO3S,QAAQ8U,oBAChBzV,EAAoBuB,QAAQgU,wBAAwBE,kBAAoBnC,EAAO3S,QAAQ8U,oBAGxE,yBAAfnC,EAAO5S,MACN4S,EAAO3S,QAAQsC,iBAChBjD,EAAoBuB,QAAQiE,iBAAiBvC,eAAiBqQ,EAAO3S,QAAQsC,gBAG9D,mBAAfqQ,EAAO5S,OACTV,EAAoBuB,QAAQ8K,kBAC5BrM,EAAoBuB,QAAQyG,oBAEX,gBAAfsL,EAAO5S,KAET,OADUV,EAAoBuB,QAAQyH,aAAa,YAAasK,EAAO3S,QAAQC,iBAGjF,GAAmB,cAAf0S,EAAO5S,KAAsB,CAC/B,IAAIiV,EAAY,KAChB,GAAIrC,EAAO3S,QAAQU,WAAaiS,EAAO3S,QAAQW,WAC7C,IAAK,IAAIrE,EAAE,EAAGA,EAAGqW,EAAO3S,QAAQW,WAAYrE,IAC1C0Y,EAAY3V,EAAoBuB,QAAQ3E,UAAU0W,EAAO3S,QAAQU,WAGjEiS,EAAO3S,QAAQhE,UAAYgZ,GAC7BrC,EAAO3S,QAAQhE,SAASgZ,EAAU9M,cAGtC,GAAmB,cAAfyK,EAAO5S,KACT,OAAOV,EAAoBuB,QAAQM,OAAOhH,KAAK,SAACwB,EAAO8X,GAAR,OAAqBb,EAAO3S,QAAQhE,SAASN,EAAO8X,MAKrG,GAHmB,kBAAfb,EAAO5S,MACTV,EAAoBuB,QAAQM,OAAO0G,SAAS,SAAClM,GAAD,OAAWiX,EAAO3S,QAAQhE,SAASN,MAE9D,iBAAfiX,EAAO5S,KACT,OAAOV,EAAoBuB,QAAQ2G,UAAUrN,KAAK,SAACkQ,EAAK8F,GAAN,OAAkByC,EAAO3S,QAAQhE,SAASoO,EAAK8F,MAKnG,GAHmB,oBAAfyC,EAAO5S,MACTV,EAAoBuB,QAAQ2G,UAAUK,SAAS,SAACwC,GAAD,OAASuI,EAAO3S,QAAQhE,SAASoO,MAE/D,wBAAfuI,EAAO5S,MACN4S,EAAO3S,QAAQW,WAChB,IAAI,IAAIrE,EAAE,EAAGA,EAAGqW,EAAO3S,QAAQW,WAAYrE,IAAK,CAC9C,IAAI2Y,EAAe9V,KAAO6B,OAAOiG,OAAO5H,EAAoBuB,QAAQM,QACpE7B,EAAoBuB,QAAQkI,WAAWmM,EAAaze,KAAMkN,EAAYE,UAI5E,GAAmB,uBAAf+O,EAAO5S,KACT,OAAOV,EAAoBuB,QAAQoL,sBAWrC,GATmB,sBAAf2G,EAAO5S,MACTV,EAAoBuB,QAAQ2L,mBAAmBoG,EAAO3S,QAAQc,cAAe6R,EAAO3S,QAAQe,YAAa4R,EAAO3S,QAAQW,YAEvG,yBAAfgS,EAAO5S,MACTV,EAAoBuB,QAAQ6E,gBAAgB6B,QAE3B,yBAAfqL,EAAO5S,MACTV,EAAoBuB,QAAQgM,sBAAsB+F,EAAO3S,QAAQc,cAAe6R,EAAO3S,QAAQe,aAE9E,oBAAf4R,EAAO5S,KACT,MAAO,CAAC0H,aAAcpI,EAAoBuB,QAAQ6G,aAAcoL,SAAUxT,EAAoBuB,QAAQrD,aAAc8B,EAAoBuB,QAAQS,kBAAkBC,kBAEpK,GAAmB,gBAAfqR,EAAO5S,KAAwB,CAEjC,IAAImV,EAAY,GACZC,EAAc,GAClB9V,EAAoBuB,QAAQM,OAAO0G,SAAS,SAAClM,GACxCA,EAAMnE,OACP2d,EAAYxY,KAAKhB,GAGjByZ,EAAczY,KAAKhB,MAIvB,IAAI0Z,EAAiBF,EAAYzY,OAC7B4Y,EAAoB1C,EAAO3S,QAAQmB,WAAaiU,EACpD,GAAIC,EAAoB,EACtB,IAAI,IAAI/Y,EAAE,EAAGA,EAAG+Y,EAAmB/Y,IACjC6Y,EAAc7Y,GAAG/E,QAAS,OAEvB,GAAI8d,EAAoB,EAC7B,IAAI,IAAI/Y,EAAE,EAAGA,GAAG+Y,EAAmB/Y,IACjC4Y,EAAY5Y,GAAG/E,QAAS,EAsBX,2BAAfob,EAAO5S,OACN4S,EAAO3S,QAAQ2B,wBAChBtC,EAAoBuB,QAAQiE,iBAAiBlD,sBAAwBgR,EAAO3S,QAAQ2B,uBAEnFgR,EAAO3S,QAAQ8B,uBAChBzC,EAAoBuB,QAAQiE,iBAAiB/C,qBAAuB6Q,EAAO3S,QAAQ8B,uBAGpE,yBAAf6Q,EAAO5S,MACN4S,EAAO3S,QAAQwE,iBAChBhD,QAAQC,IAAI,mBAAoBkR,EAAO3S,QAAQwE,gBAC/CnF,EAAoBuB,QAAQS,kBAAkBmD,eAAiBmO,EAAO3S,QAAQwE,iBAiRrE8Q,GAzQmB,SAACC,GACjC,IAAMC,EAAUzB,KACV1U,EAAsBM,iBAAO,MACnC,EAAkCmP,mBAAS,GAA3C,mBAAOrP,EAAP,KAAkBgW,EAAlB,KACA,EAAoD3G,mBAAS,KAA7D,mBAAO4G,EAAP,KAA2BC,EAA3B,KACA,EAAwD7G,mBAAS,IAAjE,mBAAO8G,EAAP,KAA6BC,EAA7B,KACA,EAA0C/G,mBAAS,GAAnD,mBAAOgH,EAAP,KAAsBC,EAAtB,KAEA,EAA0CjH,mBAAS,IAAnD,mBAAOkH,EAAP,KAAsBC,EAAtB,KACA,EAAsDnH,mBAAS,IAA/D,mBAAOoH,EAAP,KAA4BC,EAA5B,KACA,EAAwDrH,mBAAS,GAAjE,mBAAOsH,EAAP,KAA6BC,EAA7B,KAEA,EAA2CvH,mBAAS,GAApD,mBAAOvP,EAAP,KAAuB+W,EAAvB,KACA,EAAkDxH,mBAAS,GAA3D,mBAAOhB,EAAP,KAA0BtO,EAA1B,KAiFA,OAxCA4B,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,kCAAmCC,QAAS,CAAC6U,gBAAiBa,OACtE,CAACA,IAEJtU,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,kCAAmCC,QAAS,CAAC8U,kBAAmBc,OACxE,CAACA,IAEJxU,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,wBAAyBC,QAAS,CAACsC,eAAgBwT,OAC3D,CAACA,IAEJ1U,qBAAW,WACT9B,GAAoBD,EAAqB,CAACU,KAAM,eAAgBC,QAAS,CAACmB,WAAY1B,OACrF,CAACA,IAEJ2B,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,0BAA2BC,QAAS,CAAC2B,sBAAuBuU,OACpE,CAACA,IAEJ9U,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,0BAA2BC,QAAS,CAAC8B,qBAAsBsU,OACjE,CAACA,IAEJhV,qBAAW,WACT9B,GACED,EACA,CAACU,KAAM,wBAAyBC,QAAS,CAACwE,eAAgBwR,OAC3D,CAACA,IAGJ,yBAAKO,UAAU,OACb,kBAACC,EAAA,EAAD,CAAMtI,WAAS,EAACuI,UAAU,MAAMC,QAAQ,SAASH,UAAWf,EAAQtB,KAAMS,QAAS,GACjF,kBAAC6B,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAML,UAAWf,EAAQlB,OACzB,kBAAC,GAAD,CACEjV,oBAAqBA,EACrBC,oBAAqBA,GACrBC,eAAgBA,MAKpB,kBAACiX,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAML,UAAWf,EAAQlB,OACvB,kBAAC,GAAD,CACEjV,oBAAqBA,EACrBC,oBAAqBA,GACrBC,eAAgBA,OAKxB,kBAACiX,EAAA,EAAD,CAAMtI,WAAS,EAACuI,UAAU,MAAMC,QAAQ,SAASH,UAAWf,EAAQtB,KAAMS,QAAS,GACjF,kBAAC6B,EAAA,EAAD,CAAMG,MAAI,GACV,kBAACC,EAAA,EAAD,CAAML,UAAWf,EAAQlB,OACvB,kBAAC,EAAD,CACEjV,oBAAqBA,EACrBC,oBAAqBA,GACrBC,eAAgBA,EAChBC,qBAAsBA,EACtBC,UAAWA,MAIf,kBAAC+W,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAML,UAAWf,EAAQlB,OACvB,kBAAC,EAAD,CACEjV,oBAAqBA,EACrBC,oBAAqBA,GACrBwO,kBAAmBA,OAM3B,kBAAC0I,EAAA,EAAD,CAAMtI,WAAS,EAACuI,UAAU,MAAMC,QAAQ,SAASH,UAAWf,EAAQtB,KAAMS,QAAS,IACjF,kBAAC6B,EAAA,EAAD,CAAMG,MAAI,GACV,kBAACC,EAAA,EAAD,CAAML,UAAWf,EAAQlB,OACvB,kBAACuC,GAAA,EAAD,KACA,kBAACC,GAAA,EAAD,CAAeC,eAAe,GAA9B,kBAEA,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,WAAWsI,QAAQ,mBACpC,kBAACC,GAAA,EAAD,CACEC,MAAOtB,EACPuB,kBAAgB,kBAChBC,kBAAkB,KAClBC,SAjHZ,SAAmCvd,EAAOwd,GACxCzB,EAAiByB,IAiHPC,KAAM,IACN/c,IAAK,EACLC,IAAK,MAIT,kBAACqc,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,WAAWsI,QAAQ,mBAClC,kBAACC,GAAA,EAAD,CACEC,MAAOpB,EACPqB,kBAAgB,kBAChBC,kBAAkB,KAClBC,SAnHd,SAAmCvd,EAAOwd,GACxCvB,EAAiBuB,IAmHLC,KAAM,EACN/c,IAAK,EACLC,IAAK,OAIX,kBAACmc,GAAA,EAAD,CAAeC,eAAe,GAA9B,sBACA,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,gBAAgBsI,QAAQ,oBACvC,kBAACC,GAAA,EAAD,CACEC,MAAOlB,EACPmB,kBAAgB,oBAChBE,SAxId,SAAyCvd,EAAOwd,GAC9CrB,EAAuBqB,IAwIXF,kBAAkB,KAClB5c,IAAK,EACLC,IAAK,EACL8c,KAAM,OAGZ,kBAACT,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,mBAAmBsI,QAAQ,yBAC1C,kBAACC,GAAA,EAAD,CACEC,MAAOhB,EACPiB,kBAAgB,oBAChBE,SAhJd,SAAoCvd,EAAOwd,GACzCnB,EAAwBmB,IAgJZF,kBAAkB,KAClB5c,IAAK,EACLC,IAAK,GACL8c,KAAM,MAGZ,kBAACT,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,QAAQsI,QAAQ,kBAC/B,kBAACC,GAAA,EAAD,CACEC,MAAO3X,EACP4X,kBAAgB,kBAChBC,kBAAkB,KAClBC,SA7Kd,SAAqCvd,EAAOwd,GAC1C/B,EAAa+B,IA6KDC,KAAM,EACN/c,IAAK,EACLC,IAAK,OAKX,kBAACqc,GAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAMtI,WAAS,EAACuI,UAAU,MAAM9B,QAAS,GACvC,kBAAC6B,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAvMlB,SAAClQ,GACvBpI,GAAoBD,EAAqB,CAACU,KAAM,oBAChDuW,GAAiB,SAAA5T,GAAC,OAAEA,EAAE,OAqMV,UAEF,kBAAC8T,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAtMtB,SAAClQ,GACnBpI,GACED,EACA,CACEU,KAAM,uBACNC,QAAS,CACPW,WAAY,OAgMN,0BAON,kBAACmW,GAAA,EAAD,CAAeC,eAAe,GAA9B,iBACA,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,iBAAiBsI,QAAQ,oBACxC,kBAACC,GAAA,EAAD,CACEC,MAAO1B,EACP2B,kBAAgB,oBAChBE,SArMd,SAAwCvd,EAAOwd,GAC7C7B,EAAsB6B,IAqMVF,kBAAkB,KAClB5c,IAAK,EACLC,IAAK,EACL8c,KAAM,OAGZ,kBAACT,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAcrI,GAAG,mBAAmBsI,QAAQ,sBAC1C,kBAACC,GAAA,EAAD,CACEC,MAAOxB,EACPyB,kBAAgB,oBAChBE,SA9Md,SAA0Cvd,EAAOwd,GAC/C3B,EAAwB2B,IA8MZF,kBAAkB,KAClB5c,IAAK,EACLC,IAAK,EACL8c,KAAM,UAOhB,kBAACjB,EAAA,EAAD,CAAMG,MAAI,EAACJ,UAAWf,EAAQnB,WAC5B,kBAAC,EAAD,CACEhV,oBAAqBA,EACrBC,oBAAqBA,GACrBwO,kBAAmBA,QC5b7B+J,IAASnR,OACP,kBAAC,IAAMoR,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d63530bd.chunk.js","sourcesContent":["var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\tthis.events = [];\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n\tthis.pathogen = undefined;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.friction = 0.2;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\n\t\tif (this_event.stale == false) {\n\t\t\tif (this_event.recurring) {\n\t\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true, stale:false});\n\t\t\t}\n\t\t\tthis_event.callback();\n\t\t\tnum_events += 1;\n\t\t}\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.max(Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.02), 1), 0);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = 0.5;\n}\n\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\tnew_pathogen.contagiousness = this.contagiousness;\n\t\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, numMasked}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (num_to_mask) => {\n        let res_prop = {\n            type: \"residence\", \n            friction: 0.01,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 20,\n                },\n                max: {\n                    x: 130,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop2 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 150,\n                },\n                max: {\n                    x: 130,\n                    y: 250,\n                }\n            }\n        };\n\n        let res_prop3 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 270,\n                },\n                max: {\n                    x: 130,\n                    y: 380,\n                }\n            }\n        };\n\n        let res_prop4 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 20,\n                },\n                max: {\n                    x: 260,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop5 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 150,\n                },\n                max: {\n                    x: 260,\n                    y: 250,\n                }\n            }\n        };\n        let res_prop6 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 270,\n                },\n                max: {\n                    x: 260,\n                    y: 380,\n                }\n            }\n        };\n\n        let res_prop7 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 20,\n                },\n                max: {\n                    x: 380,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop8 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 150,\n                },\n                max: {\n                    x: 380,\n                    y: 250,\n                }\n            }\n        };\n        let res_prop9 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 270,\n                },\n                max: {\n                    x: 380,\n                    y: 380,\n                }\n            }\n        };\n        \n\n\n\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop}});\n        let res2 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop2}});\n        let res3 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop3}});\n        let res4 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop4}});\n        let res5 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop5}});\n        let res6 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop6}});\n        let res7 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop7}});\n        let res8 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop8}});\n        let res9 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop9}});\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res2, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res3, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res4, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res5, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res6, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res7, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res8, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res9, num_agents: 70}});\n\n        \n        InfectiousMatterRef.current.add_event({time: 1000, callback: InfectiousMatterRef.current.new_migration_event(), recurring: true, stale:false});\n        \n        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res1.uuid, to_location:res2.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res2.uuid, to_location:res3.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res3.uuid, to_location:res4.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res1.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res5.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res6.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res7.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res8.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res9.uuid, num_agents:2}});\n\n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: num_to_mask}});\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 2000,\n            agent_size: 3,\n            link_lifetime: 2000,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 2.0,\n        };\n  \n        let default_simulation_colors = {\n            viva_colors: [0x9370DBff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n            matter_colors: [\"mediumpurple\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, default_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(numMasked);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(numMasked);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:400, width:400}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    INFECTED: 1,\n    RECOVERED: 2,\n    size: 3\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:1000,\n    agent_size: 3,\n    link_lifetime: 3000,\n    pathogen_mut_prob: 0.3,\n    agent_lifespan: 50,\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: true\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10,\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                });\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true, stale:false})\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    //refactor to event!\n    switch(new_state) {\n        case AgentStates.INFECTED:\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"blue\";\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            org.render.lineWidth = 0;\n            break;\n        };\n\n    org.render.strokeStyle = stroke_color;\n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root');\n    }\n    this.update_org_state(org, AgentStates.INFECTED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n    let days_to_recover = Math.max(jStat.exponential.sample(1/this.infection_params.infectious_period_mu), 3);\n\n    let update_org_event = {\n        time: days_to_recover*this.simulation_params.sim_time_per_day,\n        callback: () => {\n            this.update_org_state(org, AgentStates.RECOVERED);\n            org.agent_object.pathogen = undefined;\n        },\n        stale: false,\n    };\n\n    this.add_event(update_org_event);\n    org.agent_object.events.push(update_org_event);\n};\n\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n};\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge), \n                stale: false\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    if(this.infection_params.use_pathogen_contagiousness)\n        return agent_b_body.agent_object.pathogen.contagiousness;\n    else\n        return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if (other_agent.state == AgentStates.INFECTED  && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    //we're going to infect this org so \n                    //now we have to pick which state...\n\n                    this.expose_org(this_agent_body, AgentStates.INFECTED, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n                this.add_event( {\n                    time: this.simulation_params.link_lifetime+1, \n                    callback: this._check_edge_for_removal(this_edge),\n                    stale: false\n                });\n            }\n\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n    new_agent_body.render.fillStyle = home_location.home_color || \"black\";\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color\n    new_agent_body.agent_object.lifetime = jStat.exponential.sample(1/(this.simulation_params.agent_lifespan*this.simulation_params.sim_time_per_day));\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {agent_object:new_agent_body.agent_object, viva_color:home_location.viva_node_color});\n\n    home_location.add_agent(new_agent_body.agent_object);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    \n    this.add_event( {\n        time: new_agent_body.agent_object.lifetime,\n        callback: this._death_birth(new_agent_body.agent_object),\n        recurring:false,\n        stale:false\n    } );\n\n    return(new_agent_body);\n};\nInfectiousMatter.prototype._death_birth = function(agent_to_remove) {\n    return () => {\n        let home_loc = agent_to_remove.home;\n        this.delete_agent(agent_to_remove);\n        this.add_agent(home_loc);\n    };\n};\n\nInfectiousMatter.prototype.delete_agent = function(an_agent) {\n    an_agent.location.remove_agent(an_agent);\n\n    this.agents = this.agents.filter(function(a) {\n\t\treturn (a !== an_agent)\n    });\n\n    Matter.Composite.remove(this.matter_engine.world, an_agent.body);\n    ContactGraph.removeNode(an_agent.uuid);\n\n    this.state_counts[an_agent.state] -= 1;\n    //TODO: Clear events associated with this agent?\n    an_agent.events.forEach((event) => {event.stale = true;})\n}\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 100; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n//TODO: the migration events for new orgs goes away!!\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }, \n                    stale:false\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import React, {useEffect, useState, useReducer, useRef, useLayoutEffect} from 'react';\nimport {AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nimport Agent from '../InfectiousMatter/agent.js';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Viva from 'vivagraphjs';\n\nlet viva_layout = Viva.Graph.Layout.forceDirected(ContactGraph, {\n    springLength : 15,\n    springCoeff : 0.00005,\n    dragCoeff : 0.01,\n    gravity : -1.5\n});\n\nlet viva_graphics = Viva.Graph.View.webglGraphics();\n\n\nconst InfectiousMatterContactGraph = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const graph_div = useRef(null);\n\n    useEffect( ()=> {\n        console.log(\"initalizing viva graph\");\n        let viva_renderer = Viva.Graph.View.renderer(ContactGraph, {\n            container: graph_div.current,\n            graphics: viva_graphics,\n            renderLinks: true,\n            layout: viva_layout,\n            interactive: 'node drag'\n    \n        });\n        viva_renderer.run();\n        for (let i=0; i < 30; i++) {\n            viva_renderer.zoomOut();\n        }\n\n        ContactGraph.on('changed', function(changes) {\n            changes.forEach( changeRecord =>  {\n                if(changeRecord.node && changeRecord.changeType == \"add\") {\n                    viva_graphics.getNodeUI(changeRecord.node.id).color = changeRecord.node.data.agent_object.viva_color;\n                    viva_graphics.getNodeUI(changeRecord.node.id).size = 40;\n                }\n            });\n        });\n\n    }, []);\n\n    useEffect ( () => {\n        const color_agent = (agent) => {\n            viva_graphics.getNodeUI(agent.uuid).color = agent.viva_color;\n            viva_graphics.getNodeUI(agent.uuid).size = 40;\n        }\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'forEach_agents', payload:{callback:color_agent}})\n    }, [worldReadyTrigger])\n\n    //do we need to call this ^ every time we add a new agent? \n\n    return (\n        <div ref={graph_div} style={{width:400, height:400}} >\n        </div>\n    );\n};\n\nexport default InfectiousMatterContactGraph;\n","import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport MaterialTable from 'material-table';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation';\n\nfunction swap(json){\n    var ret = {};\n    for(var key in json){\n      ret[json[key]] = key;\n    }\n    return ret;\n  }\n\nconst InfectiousMatterMigrationTable = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const [locations, setLocations] = useState([]);\n    const [locationIdMap, setlocationIdMap] = useState({});\n    const [lastLocationIdMap, setLastLocationIdMap] = useState(null);\n\n    const [migrationRevision, setMigrationRevision] = useState(0);\n    const [migrationLinks, setMigrationLinks] = useState([]);\n\n    const [columns, setColumns] = useState([\n        {title:\"From Location\", field:\"from_uuid\", type: \"numeric\"},\n        {title:\"To Location\", field:\"to_uuid\", type: \"numeric\"},\n        {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"}\n    ]);\n\n\n    const link_diff = (new_link, old_link) => {\n        return (\n            new_link.to_uuid != old_link.to_uuid ||\n            new_link.from_uuid != old_link.from_uuid ||\n            new_link.num_agents != old_link.num_agents\n            )\n    }\n    const add_migration_link = function(new_link_data) {\n        let existing_link = migrationLinks.find( (element) => {\n            return (element.to_uuid == new_link_data.to_uuid && element.from_uuid == new_link_data.from_uuid)\n        });\n\n        if (existing_link || new_link_data.num_agents < 0) {\n            return false;\n        }\n        setMigrationLinks([...migrationLinks, new_link_data]);\n        setMigrationRevision(c => c+1);\n\n        return true;\n    }  \n\n    const update_migration_links = function(new_link_data, old_link_data) {\n        //setMigrationLinks(new_links);\n        let new_migration_links = [...migrationLinks];\n        let update_idx = migrationLinks.findIndex( (entry) => {\n            return (\n                entry.to_uuid == old_link_data.to_uuid &&\n                entry.from_uuid == old_link_data.from_uuid\n            )\n        });\n        if (link_diff(new_link_data, old_link_data)){\n            new_migration_links[update_idx] = new_link_data;\n            setMigrationLinks(new_migration_links);\n            setMigrationRevision(c => c+1);\n        }\n    }\n\n    const remove_migration_link = function(link_to_remove) {\n        let new_migration_links = migrationLinks.filter( (migration_link) => {\n            return link_diff(link_to_remove, migration_link)\n        })\n        setMigrationLinks(new_migration_links);\n        \n        //we have to remove links ourselves...\n        InfectiousMatterAPI(\n            InfectiousMatterRef,\n            {\n                type:'remove_migration_link',\n                payload: {\n                    from_location: link_to_remove.from_uuid,\n                    to_location: link_to_remove.to_uuid\n                }\n            }\n        );\n\n        setMigrationRevision(c => c+1);\n    }\n \n    useEffect( () => {        \n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n    }, [locationIdMap]) \n    \n    useEffect( () => {\n        //don't run the first time when we don't have the migration list yet\n        if(migrationLinks.length > 0){\n            migrationLinks.forEach( (migration_link) => {\n                InfectiousMatterAPI(\n                    InfectiousMatterRef,\n                    {\n                        type:'add_migration_link', \n                        payload:{\n                            from_location: migration_link.from_uuid, \n                            to_location: migration_link.to_uuid,\n                            num_agents: migration_link.num_agents\n                        }\n                    });\n            })\n        }\n    }, [migrationRevision])\n\n    useEffect( () => {\n        let last_location_id_map = {...locationIdMap}\n        let location_list = InfectiousMatterAPI(InfectiousMatterRef, {\n            type:'map_locations', \n            payload:{\n                callback: (loc, loc_idx) => {\n                    return {location_idx:loc_idx, location_uuid:loc.uuid};\n                }\n            }\n        });\n        setLocations(location_list);\n        let new_migration_links = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_migration_links'});\n\n        if(migrationLinks.length > 0 && last_location_id_map)  {\n            InfectiousMatterAPI(InfectiousMatterRef, {type: 'clear_migration_links'});\n            new_migration_links = migrationLinks.map( (migration_link) => {\n                let new_from_idx = last_location_id_map[migration_link.from_uuid];\n                let new_to_idx = last_location_id_map[migration_link.to_uuid];\n                return ( {\n                    from_uuid: location_list[new_from_idx].location_uuid, \n                    to_uuid: location_list[new_to_idx].location_uuid,\n                    num_agents: migration_link.num_agents\n                });\n            });\n        }\n        setMigrationLinks(new_migration_links);\n\n        setMigrationRevision(c => c+1);\n\n    }, [worldReadyTrigger])\n\n    useEffect( () => {\n        let location_map = {}\n        locations.forEach((loc) => {\n            location_map[loc.location_uuid] = loc.location_idx;\n        });\n\n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:location_map, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n\n        setlocationIdMap(location_map);\n\n    }, [locations]);\n\n    return (\n      <MaterialTable \n        title={\"Migration Links\"}\n        columns={columns}\n        data={migrationLinks}\n        options={{\n            filtering: false,\n            toolbar: true,\n            search: false,\n            pageSizeOptions: [5]\n        }}\n        editable={ { \n            onRowAdd: (new_data) => {\n                return new Promise ( (resolve, reject) => {\n                    let add_success = add_migration_link(new_data);\n                    resolve();\n                });\n            }, \n            onRowUpdate: (new_data, old_data) => {\n                return new Promise( (resolve, reject) => {\n                    update_migration_links(new_data, old_data);\n                    resolve();\n                });\n            }, \n            onRowDelete: (old_data) => {\n                return new Promise( (resolve, reject) => {\n                    remove_migration_link(old_data);\n                    resolve();\n                })\n            }\n        }}\n      />\n    );\n  };\n  \n  export default InfectiousMatterMigrationTable;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport { jStat } from 'jstat';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let contagiousness = {\n    x: [],\n    name: \"Contagiousness\",\n    type: 'histogram',\n    //histnorm: 'probability',\n    marker: { color: \"grey\" }\n  };\n  return [contagiousness];\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Contagiousness\",\n      rangemode: 'nonnegative',\n  }, \n  yaxis: {\n      title: \"Density\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'set': {\n      new_state[0].x = action.payload.cur_contagousness;\n      return new_state;\n    }\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.INFECTED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterVirPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n      const update_traces = () => {\n        let get_contagousness = (agent, agent_id) => {\n          if (agent.pathogen)\n            return agent.pathogen.contagiousness\n          return undefined\n        }\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'map_agents', payload: {callback:get_contagousness}});\n        let cur_contagousness = api_return.filter(e => e != null);\n        dispatchTraces({type: 'set', payload:{cur_contagousness: cur_contagousness}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterVirPlot;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let infected = {\n    x: [0],\n    y: [0],\n    type: \"scatter\",\n    name: \"Infected\",\n    marker: { color: \"red\" }\n  };\n\n  let recovered = {\n    x: [0],\n    y: [0],\n    name: \"Recovered\",\n    type: \"scatter\",\n    marker: { color: \"green\" }\n  };\n\n  let susceptible = {\n      x: [0],\n      y: [0],\n      name: \"Susceptible\",\n      type: \"scatter\",\n      marker: { color: \"grey\" }\n  }\n  let plot_data = [infected, recovered, susceptible];\n  return plot_data;\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Days\",\n      rangemode: 'nonnegative'\n  }, \n  yaxis: {\n      title: \"Count\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.INFECTED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n    const update_traces = () => {\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_state_counts'});\n        dispatchTraces({type: 'extend', payload:{cur_time: api_return.cur_time, cur_state_counts: api_return.state_counts}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterPlot;\n","import React, {useRef, useEffect, useReducer, useState, useLayoutEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter} from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, {AgentStates, ContactGraph} from './InfectiousMatterSimulation.js';\nimport InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\nimport InfectiousMatterMigrationTable from './InfectiousMatterMigrationTable';\nimport InfectiousMatterVirPlot from './InfectiousMatterVirPlot';\nimport InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport MaterialTable from 'material-table';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth:1200\n  },\n  controlls: {\n    width:600,\n  },\n  paper: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n  },\n  paperControlls: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n    padding: theme.spacing(2)\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection:0.05, others_protection:0.5};\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  if(agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection) * (1-this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_mask_transmission_params') {\n    if(action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if(action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if(action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i=0; i< action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object); \n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map( (agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach( (agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map( (loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach( (loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if(action.payload.num_agents) {\n      for(let i=0; i< action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.INFECTED);\n      }\n    }\n  } \n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return {state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time/ InfectiousMatterRef.current.simulation_params.sim_time_per_day};\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list=[];\n    let unmasked_list=[];\n    InfectiousMatterRef.current.agents.forEach( (agent) => {\n      if(agent.masked){\n        masked_list.push(agent);\n      }\n      else{\n        unmasked_list.push(agent);\n      }\n    });\n\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for(let i=0; i< num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for(let i=0; i<-num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n    /*\n    if (num_needing_masks > 0){\n      for (let i=0; i < num_needing_masks; i++){\n        let agent_to_mask = Matter.Common.choose(unmasked_list);\n        if (agent_to_mask.masked == false){\n          agent_to_mask.masked = true;\n        }\n      }\n    }\n    else if(num_needing_masks < 0){\n      for (let i=0; i < -num_needing_masks; i++){\n        let agent_to_unmask = Matter.Common.choose(masked_list);\n        if (agent_to_unmask) {\n          agent_to_unmask.masked=false;\n        }\n      }\n    }\n    */\n  }\n  if (action.type == 'update_infection_params') {\n    if(action.payload.per_contact_infection) {\n      InfectiousMatterRef.current.infection_params.per_contact_infection = action.payload.per_contact_infection;\n    }\n    if(action.payload.infectious_period_mu) {\n      InfectiousMatterRef.current.infection_params.infectious_period_mu = action.payload.infectious_period_mu;\n    }\n  }\n  if (action.type == 'update_agent_lifespan') {\n    if(action.payload.agent_lifespan) {\n      console.log(\"update lifespan!\", action.payload.agent_lifespan)\n      InfectiousMatterRef.current.simulation_params.agent_lifespan = action.payload.agent_lifespan;\n    }\n  }\n\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n  const [numMasked, setNumMasked] = useState(0);\n  const [maskSelfProtection, setMaskSelfProtection] = useState(0.05);\n  const [maskOthersProtection, setMaskOthersProtection] = useState(0.5);\n  const [movementScale, setMovementScale] = useState(2.0);\n\n  const [agentLifespan, setAgentLifespan] = useState(50);\n  const [perContactInfection, setPerContactInfection] = useState(0.5);\n  const [infectiousPeriodMean, setInfectiousPeriodMean] = useState(5);\n\n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  const resetSimulation = (e) => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'reset_simulator'});\n    setRedrawTrigger(c=>c+1);\n  }\n  const infectAgent = (e) => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef, \n      {\n        type: 'infect_random_agents', \n        payload: {\n          num_agents: 1\n        }\n      });\n  }\n\n  function handleNumMaskedSliderChange(event, newValue){\n    setNumMasked(newValue);\n  }\n  function handleMaskSelfProtectionChange(event, newValue) {\n    setMaskSelfProtection(newValue);\n  }\n  function handleMaskOthersProtectionChange(event, newValue) {\n    setMaskOthersProtection(newValue);\n  }\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n  function handlePerContactInfectionChange(event, newValue) {\n    setPerContactInfection(newValue);\n  }\n\n  function handleInfectiousPeriodMean(event, newValue) {\n    setInfectiousPeriodMean(newValue);\n  }  \n\n  function handleAgentLifespanChange(event, newValue) {\n    setAgentLifespan(newValue);\n  }\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {self_protection: maskSelfProtection}});\n  }, [maskSelfProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {others_protection: maskOthersProtection}});\n  }, [maskOthersProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_movement_scale', payload: {movement_scale: movementScale}});\n  }, [movementScale])\n\n  useEffect( () => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: numMasked}});\n  }, [numMasked])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {per_contact_infection: perContactInfection}});\n  }, [perContactInfection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {infectious_period_mu: infectiousPeriodMean}});\n    }, [infectiousPeriodMean])\n\n    useEffect( () => {\n      InfectiousMatterAPI (\n        InfectiousMatterRef,\n        {type: 'update_agent_lifespan', payload: {agent_lifespan: agentLifespan}});\n    }, [agentLifespan])\n\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n          <Card className={classes.paper}>\n          <InfectiousMatterPlot                 \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n          />\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterVirPlot\n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI}\n              redraw_trigger={redraw_trigger}\n            />\n          </Card>\n        </Grid>\n      </Grid>\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n        <Card className={classes.paper}>\n          <InfectiousMatterSimulation \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n            setWorldReadyTrigger={setWorldReadyTrigger}\n            numMasked={numMasked}\n          />\n        </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterContactGraph                 \n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI} \n              worldReadyTrigger={worldReadyTrigger}\n            />\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={10}>\n        <Grid item >\n        <Card className={classes.paper}>\n          <List>\n          <ListSubheader disableSticky={true}>World Settings</ListSubheader>\n      \n          <ListItem>\n            <ListItemText id=\"Movement\" primary=\"Movement Scale\" />\n            <Slider\n              value={movementScale}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"on\"\n              onChange={handleMovementScaleChange}\n              step={0.25}\n              min={0}\n              max={10}\n            />\n          </ListItem>\n\n          <ListItem>\n            <ListItemText id=\"lifespan\" primary=\"Agent Lifespan\" />\n              <Slider\n                value={agentLifespan}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handleAgentLifespanChange}\n                step={5}\n                min={5}\n                max={200}\n              />\n          </ListItem>\n\n          <ListSubheader disableSticky={true}>Infection Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"infectionRate\" primary=\"Prob. Infection\"/>\n              <Slider\n                value={perContactInfection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handlePerContactInfectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"infectiousPeriod\" primary=\"Mean Infectious Days\" />\n              <Slider\n                value={infectiousPeriodMean}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleInfectiousPeriodMean}\n                valueLabelDisplay=\"on\"\n                min={3}\n                max={12}\n                step={0.1}\n              />\n          </ListItem>\n          <ListItem>\n            <ListItemText id=\"Masks\" primary=\"Number Masked\" />\n              <Slider\n                value={numMasked}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handleNumMaskedSliderChange}\n                step={1}\n                min={0}\n                max={400}\n              />\n          </ListItem>\n\n\n          <ListItem>\n            <Grid container direction=\"row\" spacing={3}>\n              <Grid item>\n                <Button variant=\"contained\" onClick={resetSimulation}>Reset</Button>\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" onClick={infectAgent}>\n                  Infect Random Agent\n                </Button>\n              </Grid>\n            </Grid>\n          </ListItem>\n\n          <ListSubheader disableSticky={true}>Mask Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"selfProtection\" primary=\"Self Protection\"/>\n              <Slider\n                value={maskSelfProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskSelfProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"othersProtection\" primary=\"Others Protection\" />\n              <Slider\n                value={maskOthersProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskOthersProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n          </ListItem>\n        </List>\n      </Card>\n        </Grid>\n        \n      <Grid item className={classes.controlls}>\n        <InfectiousMatterMigrationTable             \n          InfectiousMatterRef={InfectiousMatterRef}\n          InfectiousMatterAPI={InfectiousMatterAPI}\n          worldReadyTrigger={worldReadyTrigger}\n        />\n      </Grid>\n    </Grid>\n    </div>\n  )\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}