{"version":3,"sources":["InfectiousMatter/agent.js","InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","SimComponents/InfectiousMatterContactGraph.js","SimComponents/InfectiousMatterMigrationTable.js","SimComponents/InfectiousMatterVirPlot.js","SimComponents/InfectiousMatterPlot.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["uniqid","require","Agent","body","this","track_all_contacts","state","undefined","interaction_callback","uuid","viva_color","events","location","home","cohorts","color","home_state","migrating","masked","pathogen","birthtime","lifetime","prototype","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","ctx","agent_size","fillStyle","strokeStyle","lineWidth","fillRect","position","x","y","strokeRect","stroke","module","exports","MatterCollisionEvents","name","version","for","install","matter","create","Body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","event","pairs","map","pair","trigger","bodyA","bodyB","Plugin","register","getRandomArbitrary","min","max","Math","random","Location","bounds","friction","occupants","border_color","draw_borders","width","height","beginPath","rect","get_random_position","remove_agent","agent","filter","a","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","stale","recurring","clear_events","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_lifespan_multiplier","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","numMasked","sim_div","useRef","setup_world","num_to_mask","res1","type","payload","residence_props","res2","res3","res4","res5","res6","res7","res8","res9","residence","num_agents","current","new_migration_event","from_location","to_location","Common","shuffle","agents","num_masked","useEffect","simulation_params","sim_time_per_day","link_lifetime","console","log","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","use_pathogen_contagiousness","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","INFECTED","RECOVERED","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","agent_lifespan","default_infection_params","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","e","context","forEach","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","SENSITIVE","add_location","location_properties","new_location","home_color","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","post_infection_callback","days_to_recover","time_left","vir_death_event","delete_agent","killed_masked","killed_home","update_org_event","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","node","addNode","get_prob_of_infection","agent_birth_death_event","_death_birth","agent_to_remove","home_loc","an_agent","Composite","remove","removeNode","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","source","dest","migrating_agent","velocity","setPosition","setVelocity","viva_layout","Viva","Layout","forceDirected","springLength","springCoeff","dragCoeff","viva_graphics","View","webglGraphics","InfectiousMatterContactGraph","worldReadyTrigger","graph_div","viva_renderer","renderer","container","graphics","renderLinks","layout","interactive","zoomOut","changes","changeRecord","changeType","getNodeUI","id","InfectiousMatterMigrationTable","useState","setLocations","locationIdMap","setlocationIdMap","migrationRevision","setMigrationRevision","migrationLinks","setMigrationLinks","title","field","columns","setColumns","link_diff","new_link","old_link","lookup","editable","migration_link","last_location_id_map","location_list","loc_idx","location_idx","location_uuid","new_migration_links","new_from_idx","new_to_idx","location_map","filtering","toolbar","search","pageSizeOptions","onRowAdd","new_data","Promise","resolve","reject","new_link_data","find","onRowUpdate","old_data","old_link_data","update_idx","findIndex","entry","update_migration_links","onRowDelete","link_to_remove","infection_layout","margin","l","r","pad","showlegend","legend","xanchor","xaxis","rangemode","yaxis","initial_traces","marker","reducer","action","cur_contagousness","mean","toPrecision","cur_time","cur_state_counts","InfectiousMatterVirPlot","useReducer","plotTraces","dispatchTraces","plotRevision","setPlotRevision","plot_layout","interval","setInterval","agent_id","p","update_traces","clearInterval","datarevision","InfectiousMatterPlot","api_return","useStyles","makeStyles","theme","root","flexGrow","minWidth","controlls","paper","minHeight","textAlign","paperControlls","padding","spacing","mask_transmission_props","self_protection","others_protection","default_infection_prob","new_agent","random_agent","masked_list","unmasked_list","cur_num_masked","num_needing_masks","InfectiousMatterContainer","props","classes","setNumMasked","maskSelfProtection","setMaskSelfProtection","maskOthersProtection","setMaskOthersProtection","movementScale","setMovementScale","agentLifespan","setAgentLifespan","perContactInfection","setPerContactInfection","infectiousPeriodMean","setInfectiousPeriodMean","setRedrawTrigger","className","Grid","direction","justify","item","Card","List","ListSubheader","disableSticky","ListItem","ListItemText","primary","Slider","value","aria-labelledby","valueLabelDisplay","onChange","newValue","step","Button","variant","onClick","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fbd08e4.chunk.js","sourcesContent":["var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\tthis.events = [];\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n\tthis.pathogen = undefined;\n\tthis.birthtime = undefined;\n\tthis.lifetime = undefined;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.friction = 0.2;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\n\t\tif (this_event.stale == false) {\n\t\t\tif (this_event.recurring) {\n\t\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true, stale:false});\n\t\t\t}\n\t\t\tthis_event.callback();\n\t\t\tnum_events += 1;\n\t\t}\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.max(Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.05), 1), 0);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent, contagiousness) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = contagiousness;\n}\n\nPathogen.prototype.get_lifespan_multiplier = function() {\n\t// contagiousness varies between 0 - 1, \n\t// (1 - contagiousness) * lifespan -> \n\treturn (1.01 - this.contagiousness)\n}\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\tnew_pathogen.contagiousness = this.contagiousness;\n\t\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, numMasked}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (num_to_mask) => {\n        let res_prop = {\n            type: \"residence\", \n            friction: 0.01,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 20,\n                },\n                max: {\n                    x: 130,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop2 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 150,\n                },\n                max: {\n                    x: 130,\n                    y: 250,\n                }\n            }\n        };\n\n        let res_prop3 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 20,\n                    y: 270,\n                },\n                max: {\n                    x: 130,\n                    y: 380,\n                }\n            }\n        };\n\n        let res_prop4 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 20,\n                },\n                max: {\n                    x: 260,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop5 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 150,\n                },\n                max: {\n                    x: 260,\n                    y: 250,\n                }\n            }\n        };\n        let res_prop6 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 150,\n                    y: 270,\n                },\n                max: {\n                    x: 260,\n                    y: 380,\n                }\n            }\n        };\n\n        let res_prop7 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 20,\n                },\n                max: {\n                    x: 380,\n                    y: 130,\n                }\n            }\n        };\n\n        let res_prop8 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 150,\n                },\n                max: {\n                    x: 380,\n                    y: 250,\n                }\n            }\n        };\n        let res_prop9 = {\n            type: \"residence\", \n            friction: 0.02,\n            bounds: {\n                min: {\n                    x: 280,\n                    y: 270,\n                },\n                max: {\n                    x: 380,\n                    y: 380,\n                }\n            }\n        };\n        \n\n\n\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop}});\n        let res2 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop2}});\n        let res3 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop3}});\n        let res4 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop4}});\n        let res5 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop5}});\n        let res6 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop6}});\n        let res7 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop7}});\n        let res8 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop8}});\n        let res9 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop9}});\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res2, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res3, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res4, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res5, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res6, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res7, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res8, num_agents: 70}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res9, num_agents: 70}});\n\n        \n        InfectiousMatterRef.current.add_event({time: 1000, callback: InfectiousMatterRef.current.new_migration_event(), recurring: true, stale:false});\n        \n        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res1.uuid, to_location:res2.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res2.uuid, to_location:res3.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res3.uuid, to_location:res4.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res1.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res5.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res6.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res7.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res8.uuid, num_agents:2}});\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_migration_link', payload: {from_location:res4.uuid, to_location:res9.uuid, num_agents:2}});\n\n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: num_to_mask}});\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 2000,\n            agent_size: 3,\n            link_lifetime: 2000,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 2.0,\n            use_pathogen_contagiousness: true\n        };\n  \n        let default_simulation_colors = {\n            viva_colors: [0x9370DBff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n            matter_colors: [\"mediumpurple\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, default_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(numMasked);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(numMasked);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:400, width:400}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    INFECTED: 1,\n    RECOVERED: 2,\n    size: 3\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:1000,\n    agent_size: 3,\n    link_lifetime: 3000,\n    pathogen_mut_prob: 0.3,\n    agent_lifespan: 50,\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: true\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10,\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                });\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true, stale:false})\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    //refactor to event!\n    switch(new_state) {\n        case AgentStates.INFECTED:\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n            stroke_color = \"red\";\n            viva_node_color = 0xFF0000ff;\n\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"blue\";\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            org.render.lineWidth = 0;\n            break;\n        };\n\n    org.render.strokeStyle = stroke_color;\n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root', this.infection_params.per_contact_infection);\n    }\n    this.update_org_state(org, AgentStates.INFECTED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n    let days_to_recover = Math.max(jStat.exponential.sample(1/this.infection_params.infectious_period_mu), 3);\n    let time_left = (org.agent_object.birthtime + org.agent_object.lifetime) - this.cur_sim_time\n\n    if (org.agent_object.pathogen.get_lifespan_multiplier() * time_left < days_to_recover*this.simulation_params.sim_time_per_day) {\n        let vir_death_event = {\n            time: org.agent_object.pathogen.get_lifespan_multiplier() * time_left,\n            callback: () => {\n                this.delete_agent(org.agent_object)\n            },\n            stale: false\n        }\n        this.add_event(vir_death_event);\n        org.agent_object.events.push(vir_death_event);\n\n        var killed_masked = org.agent_object.masked;\n        var killed_home = org.agent_object.home;\n\n        //TODO: If we die by virulence, let's add a birth event here when the agent should have originally died.\n        this.add_event( {\n            time: time_left,\n            callback: () => {\n                let new_agent = this.add_agent(killed_home, AgentStates.SUSCEPTIBLE);\n                new_agent.agent_object.masked = killed_masked;\n            },\n            stale: false\n        })\n\n    } else {\n        let update_org_event = {\n            time: days_to_recover*this.simulation_params.sim_time_per_day,\n            callback: () => {\n                this.update_org_state(org, AgentStates.RECOVERED);\n                org.agent_object.pathogen = undefined;\n            },\n            stale: false,\n        };\n    \n        this.add_event(update_org_event);\n        org.agent_object.events.push(update_org_event);\n    }\n\n\n\n\n\n};\n\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n};\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge), \n                stale: false\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    if(this.infection_params.use_pathogen_contagiousness)\n        return agent_b_body.agent_object.pathogen.contagiousness;\n    else\n        return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if (other_agent.state == AgentStates.INFECTED  && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    //we're going to infect this org so \n                    //now we have to pick which state...\n\n                    this.expose_org(this_agent_body, AgentStates.INFECTED, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n                this.add_event( {\n                    time: this.simulation_params.link_lifetime+1, \n                    callback: this._check_edge_for_removal(this_edge),\n                    stale: false\n                });\n            }\n\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n    new_agent_body.render.fillStyle = home_location.home_color || \"black\";\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color\n    new_agent_body.agent_object.lifetime = jStat.exponential.sample(1/(this.simulation_params.agent_lifespan*this.simulation_params.sim_time_per_day));\n    new_agent_body.agent_object.birthtime = this.cur_sim_time;\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {agent_object:new_agent_body.agent_object, viva_color:home_location.viva_node_color});\n\n    home_location.add_agent(new_agent_body.agent_object);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    \n    // #### HANDLE BIRTH AND DEATH EVENTS ####\n    //Death Event\n    let agent_birth_death_event = {\n        time: new_agent_body.agent_object.lifetime,\n        callback: this._death_birth(new_agent_body.agent_object),\n        recurring:false,\n        stale:false\n    };\n\n    this.add_event(agent_birth_death_event);\n    new_agent_body.agent_object.events.push(agent_birth_death_event);\n\n    return(new_agent_body);\n};\n\nInfectiousMatter.prototype._death_birth = function(agent_to_remove) {\n    return () => {\n        let home_loc = agent_to_remove.home;\n        let masked = agent_to_remove.masked;\n        this.delete_agent(agent_to_remove);\n        let new_agent = this.add_agent(home_loc);\n        new_agent.agent_object.masked = masked;\n\n    };\n};\n\n\nInfectiousMatter.prototype.delete_agent = function(an_agent) {\n    an_agent.location.remove_agent(an_agent);\n\n    this.agents = this.agents.filter(function(a) {\n\t\treturn (a !== an_agent)\n    });\n\n    Matter.Composite.remove(this.matter_engine.world, an_agent.body);\n    ContactGraph.removeNode(an_agent.uuid);\n\n    this.state_counts[an_agent.state] -= 1;\n    an_agent.events.forEach((event) => {event.stale = true;})\n}\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 100; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n//TODO: the migration events for new orgs goes away!!\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }, \n                    stale:false\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import React, {useEffect, useState, useReducer, useRef, useLayoutEffect} from 'react';\nimport {AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nimport Agent from '../InfectiousMatter/agent.js';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Viva from 'vivagraphjs';\n\nlet viva_layout = Viva.Graph.Layout.forceDirected(ContactGraph, {\n    springLength : 15,\n    springCoeff : 0.00005,\n    dragCoeff : 0.01,\n    gravity : -1.5\n});\n\nlet viva_graphics = Viva.Graph.View.webglGraphics();\n\n\nconst InfectiousMatterContactGraph = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const graph_div = useRef(null);\n\n    useEffect( ()=> {\n        console.log(\"initalizing viva graph\");\n        let viva_renderer = Viva.Graph.View.renderer(ContactGraph, {\n            container: graph_div.current,\n            graphics: viva_graphics,\n            renderLinks: true,\n            layout: viva_layout,\n            interactive: 'node drag'\n    \n        });\n        viva_renderer.run();\n        for (let i=0; i < 30; i++) {\n            viva_renderer.zoomOut();\n        }\n\n        ContactGraph.on('changed', function(changes) {\n            changes.forEach( changeRecord =>  {\n                if(changeRecord.node && changeRecord.changeType == \"add\") {\n                    viva_graphics.getNodeUI(changeRecord.node.id).color = changeRecord.node.data.agent_object.viva_color;\n                    viva_graphics.getNodeUI(changeRecord.node.id).size = 40;\n                }\n            });\n        });\n\n    }, []);\n\n    useEffect ( () => {\n        const color_agent = (agent) => {\n            viva_graphics.getNodeUI(agent.uuid).color = agent.viva_color;\n            viva_graphics.getNodeUI(agent.uuid).size = 40;\n        }\n\n        InfectiousMatterAPI(InfectiousMatterRef, {type: 'forEach_agents', payload:{callback:color_agent}})\n    }, [worldReadyTrigger])\n\n    //do we need to call this ^ every time we add a new agent? \n\n    return (\n        <div ref={graph_div} style={{width:400, height:400}} >\n        </div>\n    );\n};\n\nexport default InfectiousMatterContactGraph;\n","import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport MaterialTable from 'material-table';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation';\n\nfunction swap(json){\n    var ret = {};\n    for(var key in json){\n      ret[json[key]] = key;\n    }\n    return ret;\n  }\n\nconst InfectiousMatterMigrationTable = ({InfectiousMatterRef, InfectiousMatterAPI, worldReadyTrigger}) => {\n    const [locations, setLocations] = useState([]);\n    const [locationIdMap, setlocationIdMap] = useState({});\n    const [lastLocationIdMap, setLastLocationIdMap] = useState(null);\n\n    const [migrationRevision, setMigrationRevision] = useState(0);\n    const [migrationLinks, setMigrationLinks] = useState([]);\n\n    const [columns, setColumns] = useState([\n        {title:\"From Location\", field:\"from_uuid\", type: \"numeric\"},\n        {title:\"To Location\", field:\"to_uuid\", type: \"numeric\"},\n        {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"}\n    ]);\n\n\n    const link_diff = (new_link, old_link) => {\n        return (\n            new_link.to_uuid != old_link.to_uuid ||\n            new_link.from_uuid != old_link.from_uuid ||\n            new_link.num_agents != old_link.num_agents\n            )\n    }\n    const add_migration_link = function(new_link_data) {\n        let existing_link = migrationLinks.find( (element) => {\n            return (element.to_uuid == new_link_data.to_uuid && element.from_uuid == new_link_data.from_uuid)\n        });\n\n        if (existing_link || new_link_data.num_agents < 0) {\n            return false;\n        }\n        setMigrationLinks([...migrationLinks, new_link_data]);\n        setMigrationRevision(c => c+1);\n\n        return true;\n    }  \n\n    const update_migration_links = function(new_link_data, old_link_data) {\n        //setMigrationLinks(new_links);\n        let new_migration_links = [...migrationLinks];\n        let update_idx = migrationLinks.findIndex( (entry) => {\n            return (\n                entry.to_uuid == old_link_data.to_uuid &&\n                entry.from_uuid == old_link_data.from_uuid\n            )\n        });\n        if (link_diff(new_link_data, old_link_data)){\n            new_migration_links[update_idx] = new_link_data;\n            setMigrationLinks(new_migration_links);\n            setMigrationRevision(c => c+1);\n        }\n    }\n\n    const remove_migration_link = function(link_to_remove) {\n        let new_migration_links = migrationLinks.filter( (migration_link) => {\n            return link_diff(link_to_remove, migration_link)\n        })\n        setMigrationLinks(new_migration_links);\n        \n        //we have to remove links ourselves...\n        InfectiousMatterAPI(\n            InfectiousMatterRef,\n            {\n                type:'remove_migration_link',\n                payload: {\n                    from_location: link_to_remove.from_uuid,\n                    to_location: link_to_remove.to_uuid\n                }\n            }\n        );\n\n        setMigrationRevision(c => c+1);\n    }\n \n    useEffect( () => {        \n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n    }, [locationIdMap]) \n    \n    useEffect( () => {\n        //don't run the first time when we don't have the migration list yet\n        if(migrationLinks.length > 0){\n            migrationLinks.forEach( (migration_link) => {\n                InfectiousMatterAPI(\n                    InfectiousMatterRef,\n                    {\n                        type:'add_migration_link', \n                        payload:{\n                            from_location: migration_link.from_uuid, \n                            to_location: migration_link.to_uuid,\n                            num_agents: migration_link.num_agents\n                        }\n                    });\n            })\n        }\n    }, [migrationRevision])\n\n    useEffect( () => {\n        let last_location_id_map = {...locationIdMap}\n        let location_list = InfectiousMatterAPI(InfectiousMatterRef, {\n            type:'map_locations', \n            payload:{\n                callback: (loc, loc_idx) => {\n                    return {location_idx:loc_idx, location_uuid:loc.uuid};\n                }\n            }\n        });\n        setLocations(location_list);\n        let new_migration_links = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_migration_links'});\n\n        if(migrationLinks.length > 0 && last_location_id_map)  {\n            InfectiousMatterAPI(InfectiousMatterRef, {type: 'clear_migration_links'});\n            new_migration_links = migrationLinks.map( (migration_link) => {\n                let new_from_idx = last_location_id_map[migration_link.from_uuid];\n                let new_to_idx = last_location_id_map[migration_link.to_uuid];\n                return ( {\n                    from_uuid: location_list[new_from_idx].location_uuid, \n                    to_uuid: location_list[new_to_idx].location_uuid,\n                    num_agents: migration_link.num_agents\n                });\n            });\n        }\n        setMigrationLinks(new_migration_links);\n\n        setMigrationRevision(c => c+1);\n\n    }, [worldReadyTrigger])\n\n    useEffect( () => {\n        let location_map = {}\n        locations.forEach((loc) => {\n            location_map[loc.location_uuid] = loc.location_idx;\n        });\n\n        setColumns([\n            {title:\"From Location\", field:\"from_uuid\", type: \"numeric\", lookup:locationIdMap, editable:\"onAdd\"},\n            {title:\"To Location\", field:\"to_uuid\", type: \"numeric\", lookup:location_map, editable:\"onAdd\"},\n            {title:\"Visitors/Day\", field:\"num_agents\", type: \"numeric\"},\n        ]);\n\n        setlocationIdMap(location_map);\n\n    }, [locations]);\n\n    return (\n      <MaterialTable \n        title={\"Migration Links\"}\n        columns={columns}\n        data={migrationLinks}\n        options={{\n            filtering: false,\n            toolbar: true,\n            search: false,\n            pageSizeOptions: [5]\n        }}\n        editable={ { \n            onRowAdd: (new_data) => {\n                return new Promise ( (resolve, reject) => {\n                    let add_success = add_migration_link(new_data);\n                    resolve();\n                });\n            }, \n            onRowUpdate: (new_data, old_data) => {\n                return new Promise( (resolve, reject) => {\n                    update_migration_links(new_data, old_data);\n                    resolve();\n                });\n            }, \n            onRowDelete: (old_data) => {\n                return new Promise( (resolve, reject) => {\n                    remove_migration_link(old_data);\n                    resolve();\n                })\n            }\n        }}\n      />\n    );\n  };\n  \n  export default InfectiousMatterMigrationTable;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport { jStat } from 'jstat';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let contagiousness = {\n    x: [],\n    name: \"Contagiousness\",\n    type: 'histogram',\n    //histnorm: 'probability',\n    marker: { color: \"grey\" }\n  };\n  return [contagiousness];\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Contagiousness\",\n      rangemode: 'nonnegative',\n  }, \n  yaxis: {\n      title: \"Density\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'set': {\n      new_state[0].x = action.payload.cur_contagousness;\n      new_state[0].name = \"Mean Contagiousness: \" + jStat.mean(action.payload.cur_contagousness).toPrecision(3)\n      return new_state;\n    }\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.INFECTED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterVirPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n      const update_traces = () => {\n        let get_contagousness = (agent, agent_id) => {\n          if (agent.pathogen)\n            return agent.pathogen.contagiousness\n          return undefined\n        }\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'map_agents', payload: {callback:get_contagousness}});\n        let cur_contagousness = api_return.filter(e => e != null);\n        dispatchTraces({type: 'set', payload:{cur_contagousness: cur_contagousness}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterVirPlot;\n","import React, {useEffect, useState, useReducer, useLayoutEffect} from 'react';\nimport Plot from 'react-plotly.js'; //TODO: use bundles to limit the size of this app\nimport {AgentStates} from '../InfectiousMatter/simulation.js';\n\nlet get_fresh_traces = function() {\n  let infected = {\n    x: [0],\n    y: [0],\n    type: \"scatter\",\n    name: \"Infected\",\n    marker: { color: \"red\" }\n  };\n\n  let recovered = {\n    x: [0],\n    y: [0],\n    name: \"Recovered\",\n    type: \"scatter\",\n    marker: { color: \"green\" }\n  };\n\n  let susceptible = {\n      x: [0],\n      y: [0],\n      name: \"Susceptible\",\n      type: \"scatter\",\n      marker: { color: \"grey\" }\n  }\n  let plot_data = [infected, recovered, susceptible];\n  return plot_data;\n}\n\nlet infection_layout = {\n  margin: {\n      l: 50,\n      r: 10,\n      b: 50,\n      t: 10,\n      pad: 10\n    },\n  showlegend: true,\n  legend: {\n      x:1,\n      xanchor: 'right',\n      y:1\n  }, \n  xaxis: {\n      title: \"Days\",\n      rangemode: 'nonnegative'\n  }, \n  yaxis: {\n      title: \"Count\",\n      rangemode: 'nonnegative'\n  },\n  width:390,\n  height:390\n};\n\nconst initial_traces = get_fresh_traces();\n\nfunction reducer(state, action) {\n  if (!state) { console.log('didnt get state');}\n  let new_state = [...state];\n  switch (action.type) {\n    case 'extend': {\n      new_state[0].x.push(action.payload.cur_time);\n      new_state[0].y.push(action.payload.cur_state_counts[AgentStates.INFECTED]);\n\n      new_state[1].x.push(action.payload.cur_time);\n      new_state[1].y.push(action.payload.cur_state_counts[AgentStates.RECOVERED]);\n\n      new_state[2].x.push(action.payload.cur_time);\n      new_state[2].y.push(action.payload.cur_state_counts[AgentStates.SUSCEPTIBLE]);\n\n      // new_state[1].push(action.payload.state_counts[AgentStates.S_INFECTED] + action.state_counts[AgentStates.A_INFECTED]);\n      // new_state[2].push(action.payload.state_counts[AgentStates.RECOVERED]);\n      // new_state[3].push(action.payload.state_counts[AgentStates.SUSCEPTIBLE]);\n      return new_state;\n    }\n    case 'reset': {\n        new_state = get_fresh_traces();\n        return new_state;\n    }\n    default: {\n\n    }\n  }\n}\n\nconst InfectiousMatterPlot = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger}) => {\n\n  const [plotTraces, dispatchTraces] = useReducer(reducer, initial_traces);\n  const [plotRevision, setPlotRevision] = useState(0);\n  let plot_data = get_fresh_traces();\n  let plot_layout = infection_layout;\n\n  useEffect( () => {\n    const update_traces = () => {\n        let api_return = InfectiousMatterAPI(InfectiousMatterRef, {type:'get_state_counts'});\n        dispatchTraces({type: 'extend', payload:{cur_time: api_return.cur_time, cur_state_counts: api_return.state_counts}});\n        setPlotRevision(p => p+1);\n      };\n\n    const interval = setInterval( ()=> {\n      update_traces();\n    }, 600);\n    return () => { clearInterval(interval);};\n  }, [redraw_trigger])\n\n  //redraw plot if we get the triggers\n  useLayoutEffect(()=> { \n    if(InfectiousMatterRef.current) {\n        dispatchTraces({type:'reset'});\n        setPlotRevision(p => p+1);\n    }\n  }, [redraw_trigger])\n\n  return (\n    <Plot\n      data={plotTraces}\n      layout={{...plot_layout, datarevision:plotRevision}}\n    />\n  );\n};\n\nexport default InfectiousMatterPlot;\n","import React, {useRef, useEffect, useReducer, useState, useLayoutEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter} from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, {AgentStates, ContactGraph} from './InfectiousMatterSimulation.js';\nimport InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\nimport InfectiousMatterMigrationTable from './InfectiousMatterMigrationTable';\nimport InfectiousMatterVirPlot from './InfectiousMatterVirPlot';\nimport InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport MaterialTable from 'material-table';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth:1200\n  },\n  controlls: {\n    width:600,\n  },\n  paper: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n  },\n  paperControlls: {\n    minHeight: 400,\n    minWidth: 400,\n    textAlign: 'center',\n    padding: theme.spacing(2)\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection:0.05, others_protection:0.5};\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n\n}\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  \n  if(this.infection_params.use_pathogen_contagiousness) {\n    default_infection_prob = agent_b_body.agent_object.pathogen.contagiousness;\n  }\n  if(agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection) * (1-this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n      return default_infection_prob * (1-this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked &&! agent_b_body.agent_object.masked)\n      return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_mask_transmission_params') {\n    if(action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if(action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if(action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i=0; i< action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object); \n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map( (agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach( (agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map( (loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach( (loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if(action.payload.num_agents) {\n      for(let i=0; i< action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.INFECTED);\n      }\n    }\n  } \n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return {state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time/ InfectiousMatterRef.current.simulation_params.sim_time_per_day};\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list=[];\n    let unmasked_list=[];\n    InfectiousMatterRef.current.agents.forEach( (agent) => {\n      if(agent.masked){\n        masked_list.push(agent);\n      }\n      else{\n        unmasked_list.push(agent);\n      }\n    });\n    //TODO: This crashes if num_to_mask is greater tha pop\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for(let i=0; i< num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for(let i=0; i<-num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n    /*\n    if (num_needing_masks > 0){\n      for (let i=0; i < num_needing_masks; i++){\n        let agent_to_mask = Matter.Common.choose(unmasked_list);\n        if (agent_to_mask.masked == false){\n          agent_to_mask.masked = true;\n        }\n      }\n    }\n    else if(num_needing_masks < 0){\n      for (let i=0; i < -num_needing_masks; i++){\n        let agent_to_unmask = Matter.Common.choose(masked_list);\n        if (agent_to_unmask) {\n          agent_to_unmask.masked=false;\n        }\n      }\n    }\n    */\n  }\n  if (action.type == 'update_infection_params') {\n    if(action.payload.per_contact_infection) {\n      InfectiousMatterRef.current.infection_params.per_contact_infection = action.payload.per_contact_infection;\n    }\n    if(action.payload.infectious_period_mu) {\n      InfectiousMatterRef.current.infection_params.infectious_period_mu = action.payload.infectious_period_mu;\n    }\n  }\n  if (action.type == 'update_agent_lifespan') {\n    if(action.payload.agent_lifespan) {\n      InfectiousMatterRef.current.simulation_params.agent_lifespan = action.payload.agent_lifespan;\n    }\n  }\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n  const [numMasked, setNumMasked] = useState(0);\n  const [maskSelfProtection, setMaskSelfProtection] = useState(0.05);\n  const [maskOthersProtection, setMaskOthersProtection] = useState(0.5);\n  const [movementScale, setMovementScale] = useState(2.0);\n\n  const [agentLifespan, setAgentLifespan] = useState(50);\n  const [perContactInfection, setPerContactInfection] = useState(0.5);\n  const [infectiousPeriodMean, setInfectiousPeriodMean] = useState(5);\n\n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  const resetSimulation = (e) => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'reset_simulator'});\n    setRedrawTrigger(c=>c+1);\n  }\n  const infectAgent = (e) => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef, \n      {\n        type: 'infect_random_agents', \n        payload: {\n          num_agents: 1\n        }\n      });\n  }\n\n  function handleNumMaskedSliderChange(event, newValue){\n    setNumMasked(newValue);\n  }\n  function handleMaskSelfProtectionChange(event, newValue) {\n    setMaskSelfProtection(newValue);\n  }\n  function handleMaskOthersProtectionChange(event, newValue) {\n    setMaskOthersProtection(newValue);\n  }\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n  function handlePerContactInfectionChange(event, newValue) {\n    setPerContactInfection(newValue);\n  }\n\n  function handleInfectiousPeriodMean(event, newValue) {\n    setInfectiousPeriodMean(newValue);\n  }  \n\n  function handleAgentLifespanChange(event, newValue) {\n    setAgentLifespan(newValue);\n  }\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {self_protection: maskSelfProtection}});\n  }, [maskSelfProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_mask_transmission_params', payload: {others_protection: maskOthersProtection}});\n  }, [maskOthersProtection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_movement_scale', payload: {movement_scale: movementScale}});\n  }, [movementScale])\n\n  useEffect( () => {\n    InfectiousMatterAPI(InfectiousMatterRef, {type: 'set_num_mask', payload: {num_masked: numMasked}});\n  }, [numMasked])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {per_contact_infection: perContactInfection}});\n  }, [perContactInfection])\n\n  useEffect( () => {\n    InfectiousMatterAPI (\n      InfectiousMatterRef, \n      {type: 'update_infection_params', payload: {infectious_period_mu: infectiousPeriodMean}});\n    }, [infectiousPeriodMean])\n\n    useEffect( () => {\n      InfectiousMatterAPI (\n        InfectiousMatterRef,\n        {type: 'update_agent_lifespan', payload: {agent_lifespan: agentLifespan}});\n    }, [agentLifespan])\n\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n          <Card className={classes.paper}>\n          <InfectiousMatterPlot                 \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n          />\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterVirPlot\n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI}\n              redraw_trigger={redraw_trigger}\n            />\n          </Card>\n        </Grid>\n      </Grid>\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n        <Grid item>\n        <Card className={classes.paper}>\n          <InfectiousMatterSimulation \n            InfectiousMatterRef={InfectiousMatterRef}\n            InfectiousMatterAPI={InfectiousMatterAPI}\n            redraw_trigger={redraw_trigger}\n            setWorldReadyTrigger={setWorldReadyTrigger}\n            numMasked={numMasked}\n          />\n        </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.paper}>\n            <InfectiousMatterContactGraph                 \n              InfectiousMatterRef={InfectiousMatterRef}\n              InfectiousMatterAPI={InfectiousMatterAPI} \n              worldReadyTrigger={worldReadyTrigger}\n            />\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={10}>\n        <Grid item >\n        <Card className={classes.paper}>\n          <List>\n          <ListSubheader disableSticky={true}>World Settings</ListSubheader>\n      \n          <ListItem>\n            <ListItemText id=\"Movement\" primary=\"Movement Scale\" />\n            <Slider\n              value={movementScale}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"on\"\n              onChange={handleMovementScaleChange}\n              step={0.25}\n              min={0}\n              max={10}\n            />\n          </ListItem>\n\n          <ListItem>\n            <ListItemText id=\"lifespan\" primary=\"Agent Lifespan\" />\n              <Slider\n                value={agentLifespan}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handleAgentLifespanChange}\n                step={5}\n                min={5}\n                max={200}\n              />\n          </ListItem>\n\n          <ListSubheader disableSticky={true}>Infection Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"infectionRate\" primary=\"Prob. Infection\"/>\n              <Slider\n                value={perContactInfection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handlePerContactInfectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"infectiousPeriod\" primary=\"Mean Infectious Days\" />\n              <Slider\n                value={infectiousPeriodMean}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleInfectiousPeriodMean}\n                valueLabelDisplay=\"on\"\n                min={3}\n                max={12}\n                step={0.1}\n              />\n          </ListItem>\n          <ListItem>\n            <ListItemText id=\"Masks\" primary=\"Number Masked\" />\n              <Slider\n                value={numMasked}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"on\"\n                onChange={handleNumMaskedSliderChange}\n                step={1}\n                min={0}\n                max={630}\n              />\n          </ListItem>\n\n\n          <ListItem>\n            <Grid container direction=\"row\" spacing={3}>\n              <Grid item>\n                <Button variant=\"contained\" onClick={resetSimulation}>Reset</Button>\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" onClick={infectAgent}>\n                  Infect Random Agent\n                </Button>\n              </Grid>\n            </Grid>\n          </ListItem>\n\n          <ListSubheader disableSticky={true}>Mask Settings</ListSubheader>\n          <ListItem>\n            <ListItemText id=\"selfProtection\" primary=\"Self Protection\"/>\n              <Slider\n                value={maskSelfProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskSelfProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n            </ListItem>\n          <ListItem>\n            <ListItemText id=\"othersProtection\" primary=\"Others Protection\" />\n              <Slider\n                value={maskOthersProtection}\n                aria-labelledby=\"continuous-slider\"\n                onChange={handleMaskOthersProtectionChange}\n                valueLabelDisplay=\"on\"\n                min={0}\n                max={1}\n                step={0.01}\n              />\n          </ListItem>\n        </List>\n      </Card>\n        </Grid>\n        \n      <Grid item className={classes.controlls}>\n        <InfectiousMatterMigrationTable             \n          InfectiousMatterRef={InfectiousMatterRef}\n          InfectiousMatterAPI={InfectiousMatterAPI}\n          worldReadyTrigger={worldReadyTrigger}\n        />\n      </Grid>\n    </Grid>\n    </div>\n  )\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}