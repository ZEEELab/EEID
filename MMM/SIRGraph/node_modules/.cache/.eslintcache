[{"/Users/zamanlh/github/MMM_Worksheets/networksir/src/index.js":"1","/Users/zamanlh/github/MMM_Worksheets/networksir/src/App.js":"2","/Users/zamanlh/github/MMM_Worksheets/networksir/src/reportWebVitals.js":"3","/Users/zamanlh/github/MMM_Worksheets/networksir/src/event_queue.js":"4"},{"size":535,"mtime":1677384963358,"results":"5","hashOfConfig":"6"},{"size":3629,"mtime":1677641806815,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1677384963358,"results":"8","hashOfConfig":"6"},{"size":1147,"mtime":1677642282685,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"14inuxl",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zamanlh/github/MMM_Worksheets/networksir/src/index.js",[],[],[],"/Users/zamanlh/github/MMM_Worksheets/networksir/src/App.js",["24"],[],"import './App.css';\nimport Viva from 'vivagraphjs';\nimport {useEffect, useRef} from 'react';\nimport {EventQueue} from './event_queue';\nimport { jStat } from 'jstat';\n\nvar graphGenerator = Viva.Graph.generator();\nvar graph = graphGenerator.wattsStrogatz(1000, 8, 0.1);\n\n\ngraph.forEachNode( (node) => {\n  node.data = {state: \"susceptible\"}\n})\n\nfunction App() {\n  const graph_div = useRef(null);\n  const viva_timer = useRef(null);\n\n  useEffect( ()=> {\n    var curTime = 0;\n    var eventQ = new EventQueue();\n\n\n    let viva_layout = Viva.Graph.Layout.forceDirected(graph, {\n      springLength : 10,\n      springCoeff : 0.0001,\n      dragCoeff : 0.1,\n      gravity : -1.2,\n    });\n    \n    let viva_graphics = Viva.Graph.View.svgGraphics();\n\n    let viva_renderer = Viva.Graph.View.renderer(graph, {\n      container: graph_div.current,\n      graphics: viva_graphics,\n      renderLinks: true,\n      layout: viva_layout,\n      interactive: 'scroll node drag'\n    });\n\n\n    let highlight_neighborhood = (node_graphic) => {\n      let node_obj = node_graphic.target.node;\n\n    \n      viva_graphics.getNodeUI(node_obj.id)\n        .attr(\"r\", 20);\n\n      graph.forEachLinkedNode(node_obj.id, (neighbor)=> {\n        viva_graphics.getNodeUI(neighbor.id)\n          .attr(\"r\", 20);\n      });\n    };\n\n    let unhighlight_neighborhood = (node_graphic) => {\n      let node_obj = node_graphic.target.node;\n\n      viva_graphics.getNodeUI(node_obj.id)\n        .attr(\"r\", 10);\n\n      graph.forEachLinkedNode(node_obj.id, (neighbor)=> {\n        viva_graphics.getNodeUI(neighbor.id)\n          .attr(\"r\", 10);\n      });\n    };\n\n    let spreadInfection = (node_obj) => {\n\n      viva_graphics.getNodeUI(node_obj.id)\n        .attr(\"fill\", \"orange\");\n\n      //TODO: keep track of states...\n      node_obj.data[\"state\"] = \"infected\"\n\n      eventQ.add_event(curTime, {time: 300, callback: () => { \n        node_obj.data[\"state\"] = \"recovered\";\n        viva_graphics.getNodeUI(node_obj.id)\n          .attr(\"fill\", \"green\");\n      }});\n\n      graph.forEachLinkedNode(node_obj.id, (neighbor_node) => {\n        if(neighbor_node.data[\"state\"] == \"susceptible\" && jStat.uniform.sample(0,1) > 0.65) {\n          eventQ.add_event(curTime, {time: jStat.uniform.sample(0,300), callback: () => {\n            spreadInfection(neighbor_node);\n          }});\n        }\n      });\n  \n\n      //calculte time to recover...\n      //  how many neighbors should I infect in the time it takes to recover?\n      //  randomly sample neighbor that will be (attempted) infected\n\n    };\n\n    viva_graphics.node((node) => {\n      var ui = Viva.Graph.svg(\"circle\")\n        .attr(\"r\", 10)\n        .attr(\"fill\", \"MediumBlue\")\n        .on(\"click\", (t) => spreadInfection(t.target.node))\n        .on(\"mouseover\", (t) => highlight_neighborhood(t))\n        .on(\"mouseout\", (t) => unhighlight_neighborhood(t));\n\n      return ui;\n    });\n\n    viva_graphics.placeNode(function(nodeUI, pos) {\n      nodeUI.attr('cx', pos.x).attr('cy', pos.y);\n    });\n  \n    viva_renderer.run();\n\n    for (let i=0; i<15; i++) {\n      viva_renderer.zoomOut();\n    }\n\n\n    viva_timer.current = Viva.Graph.Utils.timer( () => {\n      //actually do something here...\n      //calculate when transmissions occur and when recovery occurs, enter them as events\n      curTime += 1;\n      eventQ.run_events_fired(curTime, 10);\n      return true;\n    });\n\n    return () => {\n      viva_renderer.dispose();\n      eventQ.clear_events();\n\n      viva_timer.current.stop();\n      viva_timer.current = null;\n    };\n\n\n  }, [])\n\n\n\n  return (\n    <svg ref={graph_div} style={{width:800, height:600}} >\n    </svg>\n  );\n}\n\nexport default App;\n","/Users/zamanlh/github/MMM_Worksheets/networksir/src/reportWebVitals.js",[],[],"/Users/zamanlh/github/MMM_Worksheets/networksir/src/event_queue.js",["25"],[],{"ruleId":"26","severity":1,"message":"27","line":82,"column":40,"nodeType":"28","messageId":"29","endLine":82,"endColumn":42},{"ruleId":"26","severity":1,"message":"27","line":24,"column":24,"nodeType":"28","messageId":"29","endLine":24,"endColumn":26},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]