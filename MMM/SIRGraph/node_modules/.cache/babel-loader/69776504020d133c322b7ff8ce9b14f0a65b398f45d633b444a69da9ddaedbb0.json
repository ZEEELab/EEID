{"ast":null,"code":"/**\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = webglInputManager;\nvar createInputEvents = require('../WebGL/webglInputEvents.js');\nfunction webglInputManager(graph, graphics) {\n  var inputEvents = createInputEvents(graphics),\n    draggedNode = null,\n    internalHandlers = {},\n    pos = {\n      x: 0,\n      y: 0\n    };\n  inputEvents.mouseDown(function (node, e) {\n    draggedNode = node;\n    pos.x = e.clientX;\n    pos.y = e.clientY;\n    inputEvents.mouseCapture(draggedNode);\n    var handlers = internalHandlers[node.id];\n    if (handlers && handlers.onStart) {\n      handlers.onStart(e, pos);\n    }\n    return true;\n  }).mouseUp(function (node) {\n    inputEvents.releaseMouseCapture(draggedNode);\n    draggedNode = null;\n    var handlers = internalHandlers[node.id];\n    if (handlers && handlers.onStop) {\n      handlers.onStop();\n    }\n    return true;\n  }).mouseMove(function (node, e) {\n    if (draggedNode) {\n      var handlers = internalHandlers[draggedNode.id];\n      if (handlers && handlers.onDrag) {\n        handlers.onDrag(e, {\n          x: e.clientX - pos.x,\n          y: e.clientY - pos.y\n        });\n      }\n      pos.x = e.clientX;\n      pos.y = e.clientY;\n      return true;\n    }\n  });\n  return {\n    /**\n     * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\n     * graphics we may listen to DOM events, whereas for WebGL we graphics\n     * should provide custom eventing mechanism.\n     *\n     * @param node - to be monitored.\n     * @param handlers - object with set of three callbacks:\n     *   onStart: function(),\n     *   onDrag: function(e, offset),\n     *   onStop: function()\n     */\n    bindDragNDrop: function (node, handlers) {\n      internalHandlers[node.id] = handlers;\n      if (!handlers) {\n        delete internalHandlers[node.id];\n      }\n    }\n  };\n}","map":{"version":3,"names":["module","exports","webglInputManager","createInputEvents","require","graph","graphics","inputEvents","draggedNode","internalHandlers","pos","x","y","mouseDown","node","e","clientX","clientY","mouseCapture","handlers","id","onStart","mouseUp","releaseMouseCapture","onStop","mouseMove","onDrag","bindDragNDrop"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/vivagraphjs/src/Input/webglInputManager.js"],"sourcesContent":["/**\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = webglInputManager;\n\nvar createInputEvents = require('../WebGL/webglInputEvents.js');\n\nfunction webglInputManager(graph, graphics) {\n    var inputEvents = createInputEvents(graphics),\n        draggedNode = null,\n        internalHandlers = {},\n        pos = {x : 0, y : 0};\n\n    inputEvents.mouseDown(function (node, e) {\n        draggedNode = node;\n        pos.x = e.clientX;\n        pos.y = e.clientY;\n\n        inputEvents.mouseCapture(draggedNode);\n\n        var handlers = internalHandlers[node.id];\n        if (handlers && handlers.onStart) {\n            handlers.onStart(e, pos);\n        }\n\n        return true;\n    }).mouseUp(function (node) {\n        inputEvents.releaseMouseCapture(draggedNode);\n\n        draggedNode = null;\n        var handlers = internalHandlers[node.id];\n        if (handlers && handlers.onStop) {\n            handlers.onStop();\n        }\n        return true;\n    }).mouseMove(function (node, e) {\n        if (draggedNode) {\n            var handlers = internalHandlers[draggedNode.id];\n            if (handlers && handlers.onDrag) {\n                handlers.onDrag(e, {x : e.clientX - pos.x, y : e.clientY - pos.y });\n            }\n\n            pos.x = e.clientX;\n            pos.y = e.clientY;\n            return true;\n        }\n    });\n\n    return {\n        /**\n         * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\n         * graphics we may listen to DOM events, whereas for WebGL we graphics\n         * should provide custom eventing mechanism.\n         *\n         * @param node - to be monitored.\n         * @param handlers - object with set of three callbacks:\n         *   onStart: function(),\n         *   onDrag: function(e, offset),\n         *   onStop: function()\n         */\n        bindDragNDrop : function (node, handlers) {\n            internalHandlers[node.id] = handlers;\n            if (!handlers) {\n                delete internalHandlers[node.id];\n            }\n        }\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,iBAAiB;AAElC,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAE/D,SAASF,iBAAiBA,CAACG,KAAK,EAAEC,QAAQ,EAAE;EACxC,IAAIC,WAAW,GAAGJ,iBAAiB,CAACG,QAAQ,CAAC;IACzCE,WAAW,GAAG,IAAI;IAClBC,gBAAgB,GAAG,CAAC,CAAC;IACrBC,GAAG,GAAG;MAACC,CAAC,EAAG,CAAC;MAAEC,CAAC,EAAG;IAAC,CAAC;EAExBL,WAAW,CAACM,SAAS,CAAC,UAAUC,IAAI,EAAEC,CAAC,EAAE;IACrCP,WAAW,GAAGM,IAAI;IAClBJ,GAAG,CAACC,CAAC,GAAGI,CAAC,CAACC,OAAO;IACjBN,GAAG,CAACE,CAAC,GAAGG,CAAC,CAACE,OAAO;IAEjBV,WAAW,CAACW,YAAY,CAACV,WAAW,CAAC;IAErC,IAAIW,QAAQ,GAAGV,gBAAgB,CAACK,IAAI,CAACM,EAAE,CAAC;IACxC,IAAID,QAAQ,IAAIA,QAAQ,CAACE,OAAO,EAAE;MAC9BF,QAAQ,CAACE,OAAO,CAACN,CAAC,EAAEL,GAAG,CAAC;IAC5B;IAEA,OAAO,IAAI;EACf,CAAC,CAAC,CAACY,OAAO,CAAC,UAAUR,IAAI,EAAE;IACvBP,WAAW,CAACgB,mBAAmB,CAACf,WAAW,CAAC;IAE5CA,WAAW,GAAG,IAAI;IAClB,IAAIW,QAAQ,GAAGV,gBAAgB,CAACK,IAAI,CAACM,EAAE,CAAC;IACxC,IAAID,QAAQ,IAAIA,QAAQ,CAACK,MAAM,EAAE;MAC7BL,QAAQ,CAACK,MAAM,EAAE;IACrB;IACA,OAAO,IAAI;EACf,CAAC,CAAC,CAACC,SAAS,CAAC,UAAUX,IAAI,EAAEC,CAAC,EAAE;IAC5B,IAAIP,WAAW,EAAE;MACb,IAAIW,QAAQ,GAAGV,gBAAgB,CAACD,WAAW,CAACY,EAAE,CAAC;MAC/C,IAAID,QAAQ,IAAIA,QAAQ,CAACO,MAAM,EAAE;QAC7BP,QAAQ,CAACO,MAAM,CAACX,CAAC,EAAE;UAACJ,CAAC,EAAGI,CAAC,CAACC,OAAO,GAAGN,GAAG,CAACC,CAAC;UAAEC,CAAC,EAAGG,CAAC,CAACE,OAAO,GAAGP,GAAG,CAACE;QAAE,CAAC,CAAC;MACvE;MAEAF,GAAG,CAACC,CAAC,GAAGI,CAAC,CAACC,OAAO;MACjBN,GAAG,CAACE,CAAC,GAAGG,CAAC,CAACE,OAAO;MACjB,OAAO,IAAI;IACf;EACJ,CAAC,CAAC;EAEF,OAAO;IACH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQU,aAAa,EAAG,SAAAA,CAAUb,IAAI,EAAEK,QAAQ,EAAE;MACtCV,gBAAgB,CAACK,IAAI,CAACM,EAAE,CAAC,GAAGD,QAAQ;MACpC,IAAI,CAACA,QAAQ,EAAE;QACX,OAAOV,gBAAgB,CAACK,IAAI,CAACM,EAAE,CAAC;MACpC;IACJ;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}