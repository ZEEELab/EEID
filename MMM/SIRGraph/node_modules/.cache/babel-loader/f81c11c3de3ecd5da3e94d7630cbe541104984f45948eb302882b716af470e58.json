{"ast":null,"code":"/**\r\n * @fileOverview Defines a graph renderer that uses SVG based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\n\nmodule.exports = svgGraphics;\nvar svg = require('simplesvg');\nvar eventify = require('ngraph.events');\nvar domInputManager = require('../Input/domInputManager.js');\n\n/**\r\n * Performs svg-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n */\nfunction svgGraphics() {\n  var svgContainer,\n    svgRoot,\n    offsetX = 0,\n    offsetY = 0,\n    initCallback,\n    actualScale = 1,\n    allNodes = {},\n    allLinks = {},\n    /*jshint unused: false */\n    nodeBuilder = function (node) {\n      return svg(\"rect\").attr(\"width\", 10).attr(\"height\", 10).attr(\"fill\", \"#00a2e8\");\n    },\n    nodePositionCallback = function (nodeUI, pos) {\n      // TODO: Remove magic 5. It should be half of the width or height of the node.\n      nodeUI.attr(\"x\", pos.x - 5).attr(\"y\", pos.y - 5);\n    },\n    linkBuilder = function (link) {\n      return svg(\"line\").attr(\"stroke\", \"#999\");\n    },\n    linkPositionCallback = function (linkUI, fromPos, toPos) {\n      linkUI.attr(\"x1\", fromPos.x).attr(\"y1\", fromPos.y).attr(\"x2\", toPos.x).attr(\"y2\", toPos.y);\n    },\n    fireRescaled = function (graphics) {\n      // TODO: maybe we shall copy changes?\n      graphics.fire(\"rescaled\");\n    },\n    cachedPos = {\n      x: 0,\n      y: 0\n    },\n    cachedFromPos = {\n      x: 0,\n      y: 0\n    },\n    cachedToPos = {\n      x: 0,\n      y: 0\n    },\n    updateTransform = function () {\n      if (svgContainer) {\n        var transform = \"matrix(\" + actualScale + \", 0, 0,\" + actualScale + \",\" + offsetX + \",\" + offsetY + \")\";\n        svgContainer.attr(\"transform\", transform);\n      }\n    };\n  svgRoot = createSvgRoot();\n  var graphics = {\n    getNodeUI: function (nodeId) {\n      return allNodes[nodeId];\n    },\n    getLinkUI: function (linkId) {\n      return allLinks[linkId];\n    },\n    /**\r\n     * Sets the callback that creates node representation.\r\n     *\r\n     * @param builderCallback a callback function that accepts graph node\r\n     * as a parameter and must return an element representing this node.\r\n     *\r\n     * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n     * Otherwise undefined value is returned\r\n     */\n    node: function (builderCallback) {\n      if (typeof builderCallback !== \"function\") {\n        return; // todo: throw? This is not compatible with old versions\n      }\n\n      nodeBuilder = builderCallback;\n      return this;\n    },\n    /**\r\n     * Sets the callback that creates link representation\r\n     *\r\n     * @param builderCallback a callback function that accepts graph link\r\n     * as a parameter and must return an element representing this link.\r\n     *\r\n     * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n     * Otherwise undefined value is returned.\r\n     */\n    link: function (builderCallback) {\n      if (typeof builderCallback !== \"function\") {\n        return; // todo: throw? This is not compatible with old versions\n      }\n\n      linkBuilder = builderCallback;\n      return this;\n    },\n    /**\r\n     * Allows to override default position setter for the node with a new\r\n     * function. newPlaceCallback(nodeUI, position, node) is function which\r\n     * is used by updateNodePosition().\r\n     */\n    placeNode: function (newPlaceCallback) {\n      nodePositionCallback = newPlaceCallback;\n      return this;\n    },\n    placeLink: function (newPlaceLinkCallback) {\n      linkPositionCallback = newPlaceLinkCallback;\n      return this;\n    },\n    /**\r\n     * Called every before renderer starts rendering.\r\n     */\n    beginRender: function () {},\n    /**\r\n     * Called every time when renderer finishes one step of rendering.\r\n     */\n    endRender: function () {},\n    /**\r\n     * Sets translate operation that should be applied to all nodes and links.\r\n     */\n    graphCenterChanged: function (x, y) {\n      offsetX = x;\n      offsetY = y;\n      updateTransform();\n    },\n    /**\r\n     * Default input manager listens to DOM events to process nodes drag-n-drop\r\n     */\n    inputManager: domInputManager,\n    translateRel: function (dx, dy) {\n      var p = svgRoot.createSVGPoint(),\n        t = svgContainer.getCTM(),\n        origin = svgRoot.createSVGPoint().matrixTransform(t.inverse());\n      p.x = dx;\n      p.y = dy;\n      p = p.matrixTransform(t.inverse());\n      p.x = (p.x - origin.x) * t.a;\n      p.y = (p.y - origin.y) * t.d;\n      t.e += p.x;\n      t.f += p.y;\n      var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\n      svgContainer.attr(\"transform\", transform);\n    },\n    scale: function (scaleFactor, scrollPoint) {\n      var p = svgRoot.createSVGPoint();\n      p.x = scrollPoint.x;\n      p.y = scrollPoint.y;\n      p = p.matrixTransform(svgContainer.getCTM().inverse()); // translate to SVG coordinates\n\n      // Compute new scale matrix in current mouse position\n      var k = svgRoot.createSVGMatrix().translate(p.x, p.y).scale(scaleFactor).translate(-p.x, -p.y),\n        t = svgContainer.getCTM().multiply(k);\n      actualScale = t.a;\n      offsetX = t.e;\n      offsetY = t.f;\n      var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\n      svgContainer.attr(\"transform\", transform);\n      fireRescaled(this);\n      return actualScale;\n    },\n    resetScale: function () {\n      actualScale = 1;\n      var transform = \"matrix(1, 0, 0, 1, 0, 0)\";\n      svgContainer.attr(\"transform\", transform);\n      fireRescaled(this);\n      return this;\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider prepare to render.\r\n     */\n    init: function (container) {\n      container.appendChild(svgRoot);\n      updateTransform();\n      // Notify the world if someone waited for update. TODO: should send an event\n      if (typeof initCallback === \"function\") {\n        initCallback(svgRoot);\n      }\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider release occupied resources.\r\n     */\n    release: function (container) {\n      if (svgRoot && container) {\n        container.removeChild(svgRoot);\n      }\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider prepare to render given link of the graph\r\n     *\r\n     * @param link - model of a link\r\n     */\n    addLink: function (link, pos) {\n      var linkUI = linkBuilder(link);\n      if (!linkUI) {\n        return;\n      }\n      linkUI.position = pos;\n      linkUI.link = link;\n      allLinks[link.id] = linkUI;\n      if (svgContainer.childElementCount > 0) {\n        svgContainer.insertBefore(linkUI, svgContainer.firstChild);\n      } else {\n        svgContainer.appendChild(linkUI);\n      }\n      return linkUI;\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider remove link from rendering surface.\r\n     *\r\n     * @param linkUI visual representation of the link created by link() execution.\r\n     **/\n    releaseLink: function (link) {\n      var linkUI = allLinks[link.id];\n      if (linkUI) {\n        svgContainer.removeChild(linkUI);\n        delete allLinks[link.id];\n      }\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider prepare to render given node of the graph.\r\n     *\r\n     * @param nodeUI visual representation of the node created by node() execution.\r\n     **/\n    addNode: function (node, pos) {\n      var nodeUI = nodeBuilder(node);\n      if (!nodeUI) {\n        return;\n      }\n      nodeUI.position = pos;\n      nodeUI.node = node;\n      allNodes[node.id] = nodeUI;\n      svgContainer.appendChild(nodeUI);\n      return nodeUI;\n    },\n    /**\r\n     * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n     * provider remove node from rendering surface.\r\n     *\r\n     * @param node graph's node\r\n     **/\n    releaseNode: function (node) {\n      var nodeUI = allNodes[node.id];\n      if (nodeUI) {\n        svgContainer.removeChild(nodeUI);\n        delete allNodes[node.id];\n      }\n    },\n    renderNodes: function () {\n      for (var key in allNodes) {\n        if (allNodes.hasOwnProperty(key)) {\n          var nodeUI = allNodes[key];\n          cachedPos.x = nodeUI.position.x;\n          cachedPos.y = nodeUI.position.y;\n          nodePositionCallback(nodeUI, cachedPos, nodeUI.node);\n        }\n      }\n    },\n    renderLinks: function () {\n      for (var key in allLinks) {\n        if (allLinks.hasOwnProperty(key)) {\n          var linkUI = allLinks[key];\n          cachedFromPos.x = linkUI.position.from.x;\n          cachedFromPos.y = linkUI.position.from.y;\n          cachedToPos.x = linkUI.position.to.x;\n          cachedToPos.y = linkUI.position.to.y;\n          linkPositionCallback(linkUI, cachedFromPos, cachedToPos, linkUI.link);\n        }\n      }\n    },\n    /**\r\n     * Returns root element which hosts graphics.\r\n     */\n    getGraphicsRoot: function (callbackWhenReady) {\n      // todo: should fire an event, instead of having this context.\n      if (typeof callbackWhenReady === \"function\") {\n        if (svgRoot) {\n          callbackWhenReady(svgRoot);\n        } else {\n          initCallback = callbackWhenReady;\n        }\n      }\n      return svgRoot;\n    },\n    /**\r\n     * Returns root SVG element.\r\n     *\r\n     * Note: This is internal method specific to this renderer\r\n     */\n    getSvgRoot: function () {\n      return svgRoot;\n    }\n  };\n\n  // Let graphics fire events before we return it to the caller.\n  eventify(graphics);\n  return graphics;\n  function createSvgRoot() {\n    var svgRoot = svg(\"svg\");\n    svgContainer = svg(\"g\").attr(\"buffered-rendering\", \"dynamic\");\n    svgRoot.appendChild(svgContainer);\n    return svgRoot;\n  }\n}","map":{"version":3,"names":["module","exports","svgGraphics","svg","require","eventify","domInputManager","svgContainer","svgRoot","offsetX","offsetY","initCallback","actualScale","allNodes","allLinks","nodeBuilder","node","attr","nodePositionCallback","nodeUI","pos","x","y","linkBuilder","link","linkPositionCallback","linkUI","fromPos","toPos","fireRescaled","graphics","fire","cachedPos","cachedFromPos","cachedToPos","updateTransform","transform","createSvgRoot","getNodeUI","nodeId","getLinkUI","linkId","builderCallback","placeNode","newPlaceCallback","placeLink","newPlaceLinkCallback","beginRender","endRender","graphCenterChanged","inputManager","translateRel","dx","dy","p","createSVGPoint","t","getCTM","origin","matrixTransform","inverse","a","d","e","f","scale","scaleFactor","scrollPoint","k","createSVGMatrix","translate","multiply","resetScale","init","container","appendChild","release","removeChild","addLink","position","id","childElementCount","insertBefore","firstChild","releaseLink","addNode","releaseNode","renderNodes","key","hasOwnProperty","renderLinks","from","to","getGraphicsRoot","callbackWhenReady","getSvgRoot"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/vivagraphjs/src/View/svgGraphics.js"],"sourcesContent":["/**\r\n * @fileOverview Defines a graph renderer that uses SVG based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = svgGraphics;\r\n\r\nvar svg = require('simplesvg');\r\nvar eventify = require('ngraph.events');\r\nvar domInputManager = require('../Input/domInputManager.js');\r\n\r\n/**\r\n * Performs svg-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n */\r\nfunction svgGraphics() {\r\n    var svgContainer,\r\n        svgRoot,\r\n        offsetX = 0,\r\n        offsetY = 0,\r\n        initCallback,\r\n        actualScale = 1,\r\n        allNodes = {},\r\n        allLinks = {},\r\n/*jshint unused: false */\r\n        nodeBuilder = function (node) {\r\n            return svg(\"rect\")\r\n                     .attr(\"width\", 10)\r\n                     .attr(\"height\", 10)\r\n                     .attr(\"fill\", \"#00a2e8\");\r\n        },\r\n\r\n        nodePositionCallback = function (nodeUI, pos) {\r\n            // TODO: Remove magic 5. It should be half of the width or height of the node.\r\n            nodeUI.attr(\"x\", pos.x - 5)\r\n                  .attr(\"y\", pos.y - 5);\r\n        },\r\n\r\n        linkBuilder = function (link) {\r\n            return svg(\"line\").attr(\"stroke\", \"#999\");\r\n        },\r\n\r\n        linkPositionCallback = function (linkUI, fromPos, toPos) {\r\n            linkUI.attr(\"x1\", fromPos.x)\r\n                  .attr(\"y1\", fromPos.y)\r\n                  .attr(\"x2\", toPos.x)\r\n                  .attr(\"y2\", toPos.y);\r\n        },\r\n\r\n        fireRescaled = function (graphics) {\r\n            // TODO: maybe we shall copy changes?\r\n            graphics.fire(\"rescaled\");\r\n        },\r\n\r\n        cachedPos = {x : 0, y: 0},\r\n        cachedFromPos = {x : 0, y: 0},\r\n        cachedToPos = {x : 0, y: 0},\r\n\r\n        updateTransform = function () {\r\n            if (svgContainer) {\r\n                var transform = \"matrix(\" + actualScale + \", 0, 0,\" + actualScale + \",\" + offsetX + \",\" + offsetY + \")\";\r\n                svgContainer.attr(\"transform\", transform);\r\n            }\r\n        };\r\n\r\n    svgRoot = createSvgRoot();\r\n\r\n    var graphics = {\r\n        getNodeUI: function (nodeId) {\r\n            return allNodes[nodeId];\r\n        },\r\n\r\n        getLinkUI: function (linkId) {\r\n            return allLinks[linkId];\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates node representation.\r\n         *\r\n         * @param builderCallback a callback function that accepts graph node\r\n         * as a parameter and must return an element representing this node.\r\n         *\r\n         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned\r\n         */\r\n        node : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            nodeBuilder = builderCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates link representation\r\n         *\r\n         * @param builderCallback a callback function that accepts graph link\r\n         * as a parameter and must return an element representing this link.\r\n         *\r\n         * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned.\r\n         */\r\n        link : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            linkBuilder = builderCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Allows to override default position setter for the node with a new\r\n         * function. newPlaceCallback(nodeUI, position, node) is function which\r\n         * is used by updateNodePosition().\r\n         */\r\n        placeNode : function (newPlaceCallback) {\r\n            nodePositionCallback = newPlaceCallback;\r\n            return this;\r\n        },\r\n\r\n        placeLink : function (newPlaceLinkCallback) {\r\n            linkPositionCallback = newPlaceLinkCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called every before renderer starts rendering.\r\n         */\r\n        beginRender : function () {},\r\n\r\n        /**\r\n         * Called every time when renderer finishes one step of rendering.\r\n         */\r\n        endRender : function () {},\r\n\r\n        /**\r\n         * Sets translate operation that should be applied to all nodes and links.\r\n         */\r\n        graphCenterChanged : function (x, y) {\r\n            offsetX = x;\r\n            offsetY = y;\r\n            updateTransform();\r\n        },\r\n\r\n        /**\r\n         * Default input manager listens to DOM events to process nodes drag-n-drop\r\n         */\r\n        inputManager : domInputManager,\r\n\r\n        translateRel : function (dx, dy) {\r\n            var p = svgRoot.createSVGPoint(),\r\n                t = svgContainer.getCTM(),\r\n                origin = svgRoot.createSVGPoint().matrixTransform(t.inverse());\r\n\r\n            p.x = dx;\r\n            p.y = dy;\r\n\r\n            p = p.matrixTransform(t.inverse());\r\n            p.x = (p.x - origin.x) * t.a;\r\n            p.y = (p.y - origin.y) * t.d;\r\n\r\n            t.e += p.x;\r\n            t.f += p.y;\r\n\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n        },\r\n\r\n        scale : function (scaleFactor, scrollPoint) {\r\n            var p = svgRoot.createSVGPoint();\r\n            p.x = scrollPoint.x;\r\n            p.y = scrollPoint.y;\r\n\r\n            p = p.matrixTransform(svgContainer.getCTM().inverse()); // translate to SVG coordinates\r\n\r\n            // Compute new scale matrix in current mouse position\r\n            var k = svgRoot.createSVGMatrix().translate(p.x, p.y).scale(scaleFactor).translate(-p.x, -p.y),\r\n                t = svgContainer.getCTM().multiply(k);\r\n\r\n            actualScale = t.a;\r\n            offsetX = t.e;\r\n            offsetY = t.f;\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n\r\n            fireRescaled(this);\r\n            return actualScale;\r\n        },\r\n\r\n        resetScale : function () {\r\n            actualScale = 1;\r\n            var transform = \"matrix(1, 0, 0, 1, 0, 0)\";\r\n            svgContainer.attr(\"transform\", transform);\r\n            fireRescaled(this);\r\n            return this;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render.\r\n        */\r\n        init : function (container) {\r\n            container.appendChild(svgRoot);\r\n            updateTransform();\r\n            // Notify the world if someone waited for update. TODO: should send an event\r\n            if (typeof initCallback === \"function\") {\r\n                initCallback(svgRoot);\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider release occupied resources.\r\n        */\r\n        release : function (container) {\r\n            if (svgRoot && container) {\r\n                container.removeChild(svgRoot);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n         * provider prepare to render given link of the graph\r\n         *\r\n         * @param link - model of a link\r\n         */\r\n        addLink: function (link, pos) {\r\n            var linkUI = linkBuilder(link);\r\n            if (!linkUI) { return; }\r\n            linkUI.position = pos;\r\n            linkUI.link = link;\r\n            allLinks[link.id] = linkUI;\r\n            if (svgContainer.childElementCount > 0) {\r\n                svgContainer.insertBefore(linkUI, svgContainer.firstChild);\r\n            } else {\r\n                svgContainer.appendChild(linkUI);\r\n            }\r\n            return linkUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove link from rendering surface.\r\n        *\r\n        * @param linkUI visual representation of the link created by link() execution.\r\n        **/\r\n        releaseLink : function (link) {\r\n            var linkUI = allLinks[link.id];\r\n            if (linkUI) {\r\n                svgContainer.removeChild(linkUI);\r\n                delete allLinks[link.id];\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render given node of the graph.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        addNode : function (node, pos) {\r\n            var nodeUI = nodeBuilder(node);\r\n            if (!nodeUI) {\r\n                return;\r\n            }\r\n            nodeUI.position = pos;\r\n            nodeUI.node = node;\r\n            allNodes[node.id] = nodeUI;\r\n\r\n            svgContainer.appendChild(nodeUI);\r\n\r\n            return nodeUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove node from rendering surface.\r\n        *\r\n        * @param node graph's node\r\n        **/\r\n        releaseNode : function (node) {\r\n            var nodeUI = allNodes[node.id];\r\n            if (nodeUI) {\r\n                svgContainer.removeChild(nodeUI);\r\n                delete allNodes[node.id];\r\n            }\r\n        },\r\n\r\n        renderNodes : function () {\r\n            for (var key in allNodes) {\r\n                if (allNodes.hasOwnProperty(key)) {\r\n                    var nodeUI = allNodes[key];\r\n                    cachedPos.x = nodeUI.position.x;\r\n                    cachedPos.y = nodeUI.position.y;\r\n                    nodePositionCallback(nodeUI, cachedPos, nodeUI.node);\r\n                }\r\n            }\r\n        },\r\n\r\n        renderLinks : function () {\r\n            for (var key in allLinks) {\r\n                if (allLinks.hasOwnProperty(key)) {\r\n                    var linkUI = allLinks[key];\r\n                    cachedFromPos.x = linkUI.position.from.x;\r\n                    cachedFromPos.y = linkUI.position.from.y;\r\n                    cachedToPos.x = linkUI.position.to.x;\r\n                    cachedToPos.y = linkUI.position.to.y;\r\n                    linkPositionCallback(linkUI, cachedFromPos, cachedToPos, linkUI.link);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns root element which hosts graphics.\r\n         */\r\n        getGraphicsRoot : function (callbackWhenReady) {\r\n            // todo: should fire an event, instead of having this context.\r\n            if (typeof callbackWhenReady === \"function\") {\r\n                if (svgRoot) {\r\n                    callbackWhenReady(svgRoot);\r\n                } else {\r\n                    initCallback = callbackWhenReady;\r\n                }\r\n            }\r\n            return svgRoot;\r\n        },\r\n        /**\r\n         * Returns root SVG element.\r\n         *\r\n         * Note: This is internal method specific to this renderer\r\n         */\r\n        getSvgRoot : function () {\r\n            return svgRoot;\r\n        }\r\n    };\r\n\r\n\r\n    // Let graphics fire events before we return it to the caller.\r\n    eventify(graphics);\r\n\r\n    return graphics;\r\n\r\n    function createSvgRoot() {\r\n        var svgRoot = svg(\"svg\");\r\n\r\n        svgContainer = svg(\"g\")\r\n              .attr(\"buffered-rendering\", \"dynamic\");\r\n\r\n        svgRoot.appendChild(svgContainer);\r\n        return svgRoot;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}