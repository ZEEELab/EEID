{"ast":null,"code":"module.exports = eccentricity;\n\n/**\r\n * The eccentricity centrality of a node is the greatest distance between that node and\r\n * any other node in the network. \r\n */\nfunction eccentricity(graph, oriented) {\n  var Q = [];\n  // distance from source\n  var dist = Object.create(null);\n  var currentNode;\n  var centrality = Object.create(null);\n  graph.forEachNode(setCentralityToZero);\n  graph.forEachNode(calculateCentrality);\n  return centrality;\n  function setCentralityToZero(node) {\n    centrality[node.id] = 0;\n  }\n  function calculateCentrality(node) {\n    currentNode = node.id;\n    singleSourceShortestPath(currentNode);\n    accumulate();\n  }\n  function accumulate() {\n    var maxDist = 0;\n    Object.keys(dist).forEach(function (key) {\n      var val = dist[key];\n      if (maxDist < val) maxDist = val;\n    });\n    centrality[currentNode] = maxDist;\n  }\n  function singleSourceShortestPath(source) {\n    graph.forEachNode(initNode);\n    dist[source] = 0;\n    Q.push(source);\n    while (Q.length) {\n      var v = Q.shift();\n      graph.forEachLinkedNode(v, processNode, oriented);\n    }\n    function initNode(node) {\n      var nodeId = node.id;\n      dist[nodeId] = -1;\n    }\n    function processNode(otherNode) {\n      var w = otherNode.id;\n      if (dist[w] === -1) {\n        // Node w is found for the first time\n        dist[w] = dist[v] + 1;\n        Q.push(w);\n      }\n    }\n  }\n}","map":{"version":3,"names":["module","exports","eccentricity","graph","oriented","Q","dist","Object","create","currentNode","centrality","forEachNode","setCentralityToZero","calculateCentrality","node","id","singleSourceShortestPath","accumulate","maxDist","keys","forEach","key","val","source","initNode","push","length","v","shift","forEachLinkedNode","processNode","nodeId","otherNode","w"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.centrality/src/eccentricity.js"],"sourcesContent":["module.exports = eccentricity;\r\n\r\n/**\r\n * The eccentricity centrality of a node is the greatest distance between that node and\r\n * any other node in the network. \r\n */\r\nfunction eccentricity(graph, oriented) {\r\n  var Q = [];\r\n  // distance from source\r\n  var dist = Object.create(null);\r\n\r\n  var currentNode;\r\n  var centrality = Object.create(null);\r\n\r\n  graph.forEachNode(setCentralityToZero);\r\n  graph.forEachNode(calculateCentrality);\r\n\r\n  return centrality;\r\n\r\n  function setCentralityToZero(node) {\r\n    centrality[node.id] = 0;\r\n  }\r\n\r\n  function calculateCentrality(node) {\r\n    currentNode = node.id;\r\n    singleSourceShortestPath(currentNode);\r\n    accumulate();\r\n  }\r\n\r\n  function accumulate() {\r\n    var maxDist = 0;\r\n    Object.keys(dist).forEach(function (key) {\r\n      var val = dist[key];\r\n      if (maxDist < val) maxDist = val;\r\n    });\r\n\r\n    centrality[currentNode] = maxDist;\r\n  }\r\n\r\n  function singleSourceShortestPath(source) {\r\n    graph.forEachNode(initNode);\r\n    dist[source] = 0;\r\n    Q.push(source);\r\n\r\n    while (Q.length) {\r\n      var v = Q.shift();\r\n      graph.forEachLinkedNode(v, processNode, oriented);\r\n    }\r\n\r\n    function initNode(node) {\r\n      var nodeId = node.id;\r\n      dist[nodeId] = -1;\r\n    }\r\n\r\n    function processNode(otherNode) {\r\n      var w = otherNode.id\r\n      if (dist[w] === -1) {\r\n        // Node w is found for the first time\r\n        dist[w] = dist[v] + 1;\r\n        Q.push(w);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACrC,IAAIC,CAAC,GAAG,EAAE;EACV;EACA,IAAIC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAE9B,IAAIC,WAAW;EACf,IAAIC,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEpCL,KAAK,CAACQ,WAAW,CAACC,mBAAmB,CAAC;EACtCT,KAAK,CAACQ,WAAW,CAACE,mBAAmB,CAAC;EAEtC,OAAOH,UAAU;EAEjB,SAASE,mBAAmBA,CAACE,IAAI,EAAE;IACjCJ,UAAU,CAACI,IAAI,CAACC,EAAE,CAAC,GAAG,CAAC;EACzB;EAEA,SAASF,mBAAmBA,CAACC,IAAI,EAAE;IACjCL,WAAW,GAAGK,IAAI,CAACC,EAAE;IACrBC,wBAAwB,CAACP,WAAW,CAAC;IACrCQ,UAAU,EAAE;EACd;EAEA,SAASA,UAAUA,CAAA,EAAG;IACpB,IAAIC,OAAO,GAAG,CAAC;IACfX,MAAM,CAACY,IAAI,CAACb,IAAI,CAAC,CAACc,OAAO,CAAC,UAAUC,GAAG,EAAE;MACvC,IAAIC,GAAG,GAAGhB,IAAI,CAACe,GAAG,CAAC;MACnB,IAAIH,OAAO,GAAGI,GAAG,EAAEJ,OAAO,GAAGI,GAAG;IAClC,CAAC,CAAC;IAEFZ,UAAU,CAACD,WAAW,CAAC,GAAGS,OAAO;EACnC;EAEA,SAASF,wBAAwBA,CAACO,MAAM,EAAE;IACxCpB,KAAK,CAACQ,WAAW,CAACa,QAAQ,CAAC;IAC3BlB,IAAI,CAACiB,MAAM,CAAC,GAAG,CAAC;IAChBlB,CAAC,CAACoB,IAAI,CAACF,MAAM,CAAC;IAEd,OAAOlB,CAAC,CAACqB,MAAM,EAAE;MACf,IAAIC,CAAC,GAAGtB,CAAC,CAACuB,KAAK,EAAE;MACjBzB,KAAK,CAAC0B,iBAAiB,CAACF,CAAC,EAAEG,WAAW,EAAE1B,QAAQ,CAAC;IACnD;IAEA,SAASoB,QAAQA,CAACV,IAAI,EAAE;MACtB,IAAIiB,MAAM,GAAGjB,IAAI,CAACC,EAAE;MACpBT,IAAI,CAACyB,MAAM,CAAC,GAAG,CAAC,CAAC;IACnB;IAEA,SAASD,WAAWA,CAACE,SAAS,EAAE;MAC9B,IAAIC,CAAC,GAAGD,SAAS,CAACjB,EAAE;MACpB,IAAIT,IAAI,CAAC2B,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAClB;QACA3B,IAAI,CAAC2B,CAAC,CAAC,GAAG3B,IAAI,CAACqB,CAAC,CAAC,GAAG,CAAC;QACrBtB,CAAC,CAACoB,IAAI,CAACQ,CAAC,CAAC;MACX;IACF;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}