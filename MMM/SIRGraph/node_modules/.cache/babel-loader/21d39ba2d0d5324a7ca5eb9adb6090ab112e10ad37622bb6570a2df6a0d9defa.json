{"ast":null,"code":"module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random, module.exports.randomIterator = randomIterator;\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : +new Date();\n  return new Generator(seed);\n}\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number uniformly in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\nGenerator.prototype.gaussian = gaussian;\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n  return x * Math.sqrt(-2 * Math.log(r) / r);\n}\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;\n  seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;\n  seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;\n  seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;\n  seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;\n  seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n  return {\n    forEach: forEach,\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n    return array;\n  }\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n      callback(t);\n    }\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}","map":{"version":3,"names":["module","exports","random","randomIterator","inputSeed","seed","Date","Generator","prototype","next","nextDouble","uniform","gaussian","r","x","y","Math","sqrt","log","maxValue","floor","array","customRandom","localRandom","Error","forEach","shuffle","i","j","t","length","callback"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.generators/node_modules/ngraph.random/index.js"],"sourcesContent":["module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number uniformly in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}