{"ast":null,"code":"/**\n * FastPriorityQueue.js : a fast heap-based priority queue  in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized heap-based priority queue for modern browsers and JavaScript engines.\n *\n * Usage :\n         Installation (in shell, if you use node):\n         $ npm install fastpriorityqueue\n\n         Running test program (in JavaScript):\n\n         // var FastPriorityQueue = require(\"fastpriorityqueue\");// in node\n         var x = new FastPriorityQueue();\n         x.add(1);\n         x.add(0);\n         x.add(5);\n         x.add(4);\n         x.add(3);\n         x.peek(); // should return 0, leaves x unchanged\n         x.size; // should return 5, leaves x unchanged\n         while(!x.isEmpty()) {\n           console.log(x.poll());\n         } // will print 0 1 3 4 5\n         x.trim(); // (optional) optimizes memory usage\n */\n'use strict';\n\nvar defaultcomparator = function (a, b) {\n  return a < b;\n};\n\n// the provided comparator function should take a, b and return *true* when a < b\nfunction FastPriorityQueue(comparator) {\n  if (!(this instanceof FastPriorityQueue)) return new FastPriorityQueue(comparator);\n  this.array = [];\n  this.size = 0;\n  this.compare = comparator || defaultcomparator;\n}\n\n// copy the priority queue into another, and return it. Queue items are shallow-copied.\n// Runs in `O(n)` time.\nFastPriorityQueue.prototype.clone = function () {\n  var fpq = new FastPriorityQueue(this.compare);\n  fpq.size = this.size;\n  fpq.array = this.array.slice(0, this.size);\n  return fpq;\n};\n\n// Add an element into the queue\n// runs in O(log n) time\nFastPriorityQueue.prototype.add = function (myval) {\n  var i = this.size;\n  this.array[this.size] = myval;\n  this.size += 1;\n  var p;\n  var ap;\n  while (i > 0) {\n    p = i - 1 >> 1;\n    ap = this.array[p];\n    if (!this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// replace the content of the heap by provided array and \"heapify it\"\nFastPriorityQueue.prototype.heapify = function (arr) {\n  this.array = arr;\n  this.size = arr.length;\n  var i;\n  for (i = this.size >> 1; i >= 0; i--) {\n    this._percolateDown(i);\n  }\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateUp = function (i, force) {\n  var myval = this.array[i];\n  var p;\n  var ap;\n  while (i > 0) {\n    p = i - 1 >> 1;\n    ap = this.array[p];\n    // force will skip the compare\n    if (!force && !this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateDown = function (i) {\n  var size = this.size;\n  var hsize = this.size >>> 1;\n  var ai = this.array[i];\n  var l;\n  var r;\n  var bestc;\n  while (i < hsize) {\n    l = (i << 1) + 1;\n    r = l + 1;\n    bestc = this.array[l];\n    if (r < size) {\n      if (this.compare(this.array[r], bestc)) {\n        l = r;\n        bestc = this.array[r];\n      }\n    }\n    if (!this.compare(bestc, ai)) {\n      break;\n    }\n    this.array[i] = bestc;\n    i = l;\n  }\n  this.array[i] = ai;\n};\n\n// internal\n// _removeAt(index) will remove the item at the given index from the queue,\n// retaining balance. returns the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype._removeAt = function (index) {\n  if (index > this.size - 1 || index < 0) return undefined;\n\n  // impl1:\n  //this.array.splice(index, 1);\n  //this.heapify(this.array);\n  // impl2:\n  this._percolateUp(index, true);\n  return this.poll();\n};\n\n// remove(myval) will remove an item matching the provided value from the\n// queue, checked for equality by using the queue's comparator.\n// return true if removed, false otherwise.\nFastPriorityQueue.prototype.remove = function (myval) {\n  for (var i = 0; i < this.size; i++) {\n    if (!this.compare(this.array[i], myval) && !this.compare(myval, this.array[i])) {\n      // items match, comparator returns false both ways, remove item\n      this._removeAt(i);\n      return true;\n    }\n  }\n  return false;\n};\n\n// removeOne(callback) will execute the callback function for each item of the queue\n// and will remove the first item for which the callback will return true.\n// return the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype.removeOne = function (callback) {\n  if (typeof callback !== \"function\") {\n    return undefined;\n  }\n  for (var i = 0; i < this.size; i++) {\n    if (callback(this.array[i])) {\n      return this._removeAt(i);\n    }\n  }\n};\n\n// remove(callback[, limit]) will execute the callback function for each item of\n// the queue and will remove each item for which the callback returns true, up to\n// a max limit of removed items if specified or no limit if unspecified.\n// return an array containing the removed items.\n// The callback function should be a pure function.\nFastPriorityQueue.prototype.removeMany = function (callback, limit) {\n  // Skip unnecessary processing for edge cases\n  if (typeof callback !== \"function\" || this.size < 1) {\n    return [];\n  }\n  limit = limit ? Math.min(limit, this.size) : this.size;\n\n  // Prepare the results container to hold up to the results limit\n  var resultSize = 0;\n  var result = new Array(limit);\n\n  // Prepare a temporary array to hold items we'll traverse through and need to keep\n  var tmpSize = 0;\n  var tmp = new Array(this.size);\n  while (resultSize < limit && !this.isEmpty()) {\n    // Dequeue items into either the results or our temporary array\n    var item = this.poll();\n    if (callback(item)) {\n      result[resultSize++] = item;\n    } else {\n      tmp[tmpSize++] = item;\n    }\n  }\n  // Update the result array with the exact number of results\n  result.length = resultSize;\n\n  // Re-add all the items we can keep\n  var i = 0;\n  while (i < tmpSize) {\n    this.add(tmp[i++]);\n  }\n  return result;\n};\n\n// Look at the top of the queue (one of the smallest elements) without removing it\n// executes in constant time\n//\n// Calling peek on an empty priority queue returns\n// the \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\nFastPriorityQueue.prototype.peek = function () {\n  if (this.size == 0) return undefined;\n  return this.array[0];\n};\n\n// remove the element on top of the heap (one of the smallest elements)\n// runs in logarithmic time\n//\n// If the priority queue is empty, the function returns the\n// \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\n// For long-running and large priority queues, or priority queues\n// storing large objects, you may  want to call the trim function\n// at strategic times to recover allocated memory.\nFastPriorityQueue.prototype.poll = function () {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  if (this.size > 1) {\n    this.array[0] = this.array[--this.size];\n    this._percolateDown(0);\n  } else {\n    this.size -= 1;\n  }\n  return ans;\n};\n\n// This function adds the provided value to the heap, while removing\n// and returning one of the smallest elements (like poll). The size of the queue\n// thus remains unchanged.\nFastPriorityQueue.prototype.replaceTop = function (myval) {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  this.array[0] = myval;\n  this._percolateDown(0);\n  return ans;\n};\n\n// recover unused memory (for long-running priority queues)\nFastPriorityQueue.prototype.trim = function () {\n  this.array = this.array.slice(0, this.size);\n};\n\n// Check whether the heap is empty\nFastPriorityQueue.prototype.isEmpty = function () {\n  return this.size === 0;\n};\n\n// iterate over the items in order, pass a callback that receives (item, index) as args.\n// TODO once we transpile, uncomment\n// if (Symbol && Symbol.iterator) {\n//   FastPriorityQueue.prototype[Symbol.iterator] = function*() {\n//     if (this.isEmpty()) return;\n//     var fpq = this.clone();\n//     while (!fpq.isEmpty()) {\n//       yield fpq.poll();\n//     }\n//   };\n// }\nFastPriorityQueue.prototype.forEach = function (callback) {\n  if (this.isEmpty() || typeof callback != 'function') return;\n  var i = 0;\n  var fpq = this.clone();\n  while (!fpq.isEmpty()) {\n    callback(fpq.poll(), i++);\n  }\n};\n\n// return the k 'smallest' elements of the queue as an array,\n// runs in O(k log k) time, the elements are not removed\n// from the priority queue.\nFastPriorityQueue.prototype.kSmallest = function (k) {\n  if (this.size == 0) return [];\n  k = Math.min(this.size, k);\n  var fpq = new FastPriorityQueue(this.compare);\n  const newSize = Math.min((k > 0 ? Math.pow(2, k - 1) : 0) + 1, this.size);\n  fpq.size = newSize;\n  fpq.array = this.array.slice(0, newSize);\n  var smallest = new Array(k);\n  for (var i = 0; i < k; i++) {\n    smallest[i] = fpq.poll();\n  }\n  return smallest;\n};\nmodule.exports = FastPriorityQueue;","map":{"version":3,"names":["defaultcomparator","a","b","FastPriorityQueue","comparator","array","size","compare","prototype","clone","fpq","slice","add","myval","i","p","ap","heapify","arr","length","_percolateDown","_percolateUp","force","hsize","ai","l","r","bestc","_removeAt","index","undefined","poll","remove","removeOne","callback","removeMany","limit","Math","min","resultSize","result","Array","tmpSize","tmp","isEmpty","item","peek","ans","replaceTop","trim","forEach","kSmallest","k","newSize","pow","smallest","module","exports"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/fastpriorityqueue/FastPriorityQueue.js"],"sourcesContent":["/**\n * FastPriorityQueue.js : a fast heap-based priority queue  in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized heap-based priority queue for modern browsers and JavaScript engines.\n *\n * Usage :\n         Installation (in shell, if you use node):\n         $ npm install fastpriorityqueue\n\n         Running test program (in JavaScript):\n\n         // var FastPriorityQueue = require(\"fastpriorityqueue\");// in node\n         var x = new FastPriorityQueue();\n         x.add(1);\n         x.add(0);\n         x.add(5);\n         x.add(4);\n         x.add(3);\n         x.peek(); // should return 0, leaves x unchanged\n         x.size; // should return 5, leaves x unchanged\n         while(!x.isEmpty()) {\n           console.log(x.poll());\n         } // will print 0 1 3 4 5\n         x.trim(); // (optional) optimizes memory usage\n */\n'use strict';\n\nvar defaultcomparator = function(a, b) {\n  return a < b;\n};\n\n// the provided comparator function should take a, b and return *true* when a < b\nfunction FastPriorityQueue(comparator) {\n  if (!(this instanceof FastPriorityQueue)) return new FastPriorityQueue(comparator);\n  this.array = [];\n  this.size = 0;\n  this.compare = comparator || defaultcomparator;\n}\n\n// copy the priority queue into another, and return it. Queue items are shallow-copied.\n// Runs in `O(n)` time.\nFastPriorityQueue.prototype.clone = function() {\n  var fpq = new FastPriorityQueue(this.compare);\n  fpq.size = this.size;\n  fpq.array = this.array.slice(0, this.size);\n  return fpq;\n};\n\n// Add an element into the queue\n// runs in O(log n) time\nFastPriorityQueue.prototype.add = function(myval) {\n  var i = this.size;\n  this.array[this.size] = myval;\n  this.size += 1;\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    if (!this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// replace the content of the heap by provided array and \"heapify it\"\nFastPriorityQueue.prototype.heapify = function(arr) {\n  this.array = arr;\n  this.size = arr.length;\n  var i;\n  for (i = this.size >> 1; i >= 0; i--) {\n    this._percolateDown(i);\n  }\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateUp = function(i, force) {\n  var myval = this.array[i];\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    // force will skip the compare\n    if (!force && !this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateDown = function(i) {\n  var size = this.size;\n  var hsize = this.size >>> 1;\n  var ai = this.array[i];\n  var l;\n  var r;\n  var bestc;\n  while (i < hsize) {\n    l = (i << 1) + 1;\n    r = l + 1;\n    bestc = this.array[l];\n    if (r < size) {\n      if (this.compare(this.array[r], bestc)) {\n        l = r;\n        bestc = this.array[r];\n      }\n    }\n    if (!this.compare(bestc, ai)) {\n      break;\n    }\n    this.array[i] = bestc;\n    i = l;\n  }\n  this.array[i] = ai;\n};\n\n// internal\n// _removeAt(index) will remove the item at the given index from the queue,\n// retaining balance. returns the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype._removeAt = function(index) {\n  if (index > this.size - 1 || index < 0) return undefined;\n\n  // impl1:\n  //this.array.splice(index, 1);\n  //this.heapify(this.array);\n  // impl2:\n  this._percolateUp(index, true);\n  return this.poll();\n};\n\n// remove(myval) will remove an item matching the provided value from the\n// queue, checked for equality by using the queue's comparator.\n// return true if removed, false otherwise.\nFastPriorityQueue.prototype.remove = function(myval) {\n  for (var i = 0; i < this.size; i++) {\n    if (!this.compare(this.array[i], myval) && !this.compare(myval, this.array[i])) {\n      // items match, comparator returns false both ways, remove item\n      this._removeAt(i);\n      return true;\n    }\n  }\n  return false;\n};\n\n// removeOne(callback) will execute the callback function for each item of the queue\n// and will remove the first item for which the callback will return true.\n// return the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype.removeOne = function(callback) {\n  if (typeof callback !== \"function\") {\n    return undefined;\n  }\n  for (var i = 0; i < this.size; i++) {\n    if (callback(this.array[i])) {\n      return this._removeAt(i);\n    }\n  }\n};\n\n// remove(callback[, limit]) will execute the callback function for each item of\n// the queue and will remove each item for which the callback returns true, up to\n// a max limit of removed items if specified or no limit if unspecified.\n// return an array containing the removed items.\n// The callback function should be a pure function.\nFastPriorityQueue.prototype.removeMany = function(callback, limit) {\n  // Skip unnecessary processing for edge cases\n  if (typeof callback !== \"function\" || this.size < 1) {\n    return [];\n  }\n  limit = limit ? Math.min(limit, this.size) : this.size;\n\n  // Prepare the results container to hold up to the results limit\n  var resultSize = 0;\n  var result = new Array(limit);\n\n  // Prepare a temporary array to hold items we'll traverse through and need to keep\n  var tmpSize = 0;\n  var tmp = new Array(this.size);\n\n  while (resultSize < limit && !this.isEmpty()) {\n    // Dequeue items into either the results or our temporary array\n    var item = this.poll();\n    if (callback(item)) {\n      result[resultSize++] = item;\n    } else {\n      tmp[tmpSize++] = item;\n    }\n  }\n  // Update the result array with the exact number of results\n  result.length = resultSize;\n\n  // Re-add all the items we can keep\n  var i = 0;\n  while (i < tmpSize) {\n    this.add(tmp[i++]);\n  }\n\n  return result;\n};\n\n// Look at the top of the queue (one of the smallest elements) without removing it\n// executes in constant time\n//\n// Calling peek on an empty priority queue returns\n// the \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\nFastPriorityQueue.prototype.peek = function() {\n  if (this.size == 0) return undefined;\n  return this.array[0];\n};\n\n// remove the element on top of the heap (one of the smallest elements)\n// runs in logarithmic time\n//\n// If the priority queue is empty, the function returns the\n// \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\n// For long-running and large priority queues, or priority queues\n// storing large objects, you may  want to call the trim function\n// at strategic times to recover allocated memory.\nFastPriorityQueue.prototype.poll = function() {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  if (this.size > 1) {\n    this.array[0] = this.array[--this.size];\n    this._percolateDown(0);\n  } else {\n    this.size -= 1;\n  }\n  return ans;\n};\n\n// This function adds the provided value to the heap, while removing\n// and returning one of the smallest elements (like poll). The size of the queue\n// thus remains unchanged.\nFastPriorityQueue.prototype.replaceTop = function(myval) {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  this.array[0] = myval;\n  this._percolateDown(0);\n  return ans;\n};\n\n// recover unused memory (for long-running priority queues)\nFastPriorityQueue.prototype.trim = function() {\n  this.array = this.array.slice(0, this.size);\n};\n\n// Check whether the heap is empty\nFastPriorityQueue.prototype.isEmpty = function() {\n  return this.size === 0;\n};\n\n// iterate over the items in order, pass a callback that receives (item, index) as args.\n// TODO once we transpile, uncomment\n// if (Symbol && Symbol.iterator) {\n//   FastPriorityQueue.prototype[Symbol.iterator] = function*() {\n//     if (this.isEmpty()) return;\n//     var fpq = this.clone();\n//     while (!fpq.isEmpty()) {\n//       yield fpq.poll();\n//     }\n//   };\n// }\nFastPriorityQueue.prototype.forEach = function(callback) {\n  if (this.isEmpty() || typeof callback != 'function') return;\n  var i = 0;\n  var fpq = this.clone();\n  while (!fpq.isEmpty()) {\n    callback(fpq.poll(), i++);\n  }\n};\n\n// return the k 'smallest' elements of the queue as an array,\n// runs in O(k log k) time, the elements are not removed\n// from the priority queue.\nFastPriorityQueue.prototype.kSmallest = function(k) {\n  if (this.size == 0) return [];\n  k = Math.min(this.size, k);\n  var fpq = new FastPriorityQueue(this.compare);\n  const newSize = Math.min((k > 0 ? Math.pow(2, k - 1) : 0) + 1, this.size);\n  fpq.size = newSize;\n  fpq.array = this.array.slice(0, newSize);\n\n  var smallest = new Array(k);\n  for (var i = 0; i < k; i++) {\n    smallest[i] = fpq.poll();\n  }\n  return smallest;\n}\n\nmodule.exports = FastPriorityQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}