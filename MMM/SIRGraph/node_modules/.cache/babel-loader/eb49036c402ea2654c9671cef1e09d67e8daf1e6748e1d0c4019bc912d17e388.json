{"ast":null,"code":"module.exports = save;\nfunction save(graph, customNodeTransform, customLinkTransform) {\n  // Object contains `nodes` and `links` arrays.\n  var result = {\n    nodes: [],\n    links: []\n  };\n  var nodeTransform = customNodeTransform || defaultTransformForNode;\n  var linkTransform = customLinkTransform || defaultTransformForLink;\n  graph.forEachNode(saveNode);\n  graph.forEachLink(saveLink);\n  return JSON.stringify(result);\n  function saveNode(node) {\n    // Each node of the graph is processed to take only required fields\n    // `id` and `data`\n    result.nodes.push(nodeTransform(node));\n  }\n  function saveLink(link) {\n    // Each link of the graph is also processed to take `fromId`, `toId` and\n    // `data`\n    result.links.push(linkTransform(link));\n  }\n  function defaultTransformForNode(node) {\n    var result = {\n      id: node.id\n    };\n    // We don't want to store undefined fields when it's not necessary:\n    if (node.data !== undefined) {\n      result.data = node.data;\n    }\n    return result;\n  }\n  function defaultTransformForLink(link) {\n    var result = {\n      fromId: link.fromId,\n      toId: link.toId\n    };\n    if (link.data !== undefined) {\n      result.data = link.data;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["module","exports","save","graph","customNodeTransform","customLinkTransform","result","nodes","links","nodeTransform","defaultTransformForNode","linkTransform","defaultTransformForLink","forEachNode","saveNode","forEachLink","saveLink","JSON","stringify","node","push","link","id","data","undefined","fromId","toId"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.tojson/index.js"],"sourcesContent":["module.exports = save;\n\nfunction save(graph, customNodeTransform, customLinkTransform) {\n  // Object contains `nodes` and `links` arrays.\n  var result = {\n    nodes: [],\n    links: []\n  };\n\n  var nodeTransform = customNodeTransform || defaultTransformForNode;\n  var linkTransform = customLinkTransform || defaultTransformForLink;\n\n  graph.forEachNode(saveNode);\n  graph.forEachLink(saveLink);\n\n  return JSON.stringify(result);\n\n  function saveNode(node) {\n    // Each node of the graph is processed to take only required fields\n    // `id` and `data`\n    result.nodes.push(nodeTransform(node));\n  }\n\n  function saveLink(link) {\n    // Each link of the graph is also processed to take `fromId`, `toId` and\n    // `data`\n    result.links.push(linkTransform(link));\n  }\n\n  function defaultTransformForNode(node) {\n    var result = {\n      id: node.id\n    };\n    // We don't want to store undefined fields when it's not necessary:\n    if (node.data !== undefined) {\n      result.data = node.data;\n    }\n\n    return result;\n  }\n\n  function defaultTransformForLink(link) {\n    var result = {\n      fromId: link.fromId,\n      toId: link.toId,\n    };\n\n    if (link.data !== undefined) {\n      result.data = link.data;\n    }\n\n    return result;\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,IAAI;AAErB,SAASA,IAAIA,CAACC,KAAK,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE;EAC7D;EACA,IAAIC,MAAM,GAAG;IACXC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC;EAED,IAAIC,aAAa,GAAGL,mBAAmB,IAAIM,uBAAuB;EAClE,IAAIC,aAAa,GAAGN,mBAAmB,IAAIO,uBAAuB;EAElET,KAAK,CAACU,WAAW,CAACC,QAAQ,CAAC;EAC3BX,KAAK,CAACY,WAAW,CAACC,QAAQ,CAAC;EAE3B,OAAOC,IAAI,CAACC,SAAS,CAACZ,MAAM,CAAC;EAE7B,SAASQ,QAAQA,CAACK,IAAI,EAAE;IACtB;IACA;IACAb,MAAM,CAACC,KAAK,CAACa,IAAI,CAACX,aAAa,CAACU,IAAI,CAAC,CAAC;EACxC;EAEA,SAASH,QAAQA,CAACK,IAAI,EAAE;IACtB;IACA;IACAf,MAAM,CAACE,KAAK,CAACY,IAAI,CAACT,aAAa,CAACU,IAAI,CAAC,CAAC;EACxC;EAEA,SAASX,uBAAuBA,CAACS,IAAI,EAAE;IACrC,IAAIb,MAAM,GAAG;MACXgB,EAAE,EAAEH,IAAI,CAACG;IACX,CAAC;IACD;IACA,IAAIH,IAAI,CAACI,IAAI,KAAKC,SAAS,EAAE;MAC3BlB,MAAM,CAACiB,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACzB;IAEA,OAAOjB,MAAM;EACf;EAEA,SAASM,uBAAuBA,CAACS,IAAI,EAAE;IACrC,IAAIf,MAAM,GAAG;MACXmB,MAAM,EAAEJ,IAAI,CAACI,MAAM;MACnBC,IAAI,EAAEL,IAAI,CAACK;IACb,CAAC;IAED,IAAIL,IAAI,CAACE,IAAI,KAAKC,SAAS,EAAE;MAC3BlB,MAAM,CAACiB,IAAI,GAAGF,IAAI,CAACE,IAAI;IACzB;IAEA,OAAOjB,MAAM;EACf;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}