{"ast":null,"code":"/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\nvar eventify = require('ngraph.events');\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn('ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' + 'Use `multigraph` option instead\\n', '\\n', 'Note: there is also change in default behavior: From now own each graph\\n' + 'is considered to be not a multigraph by default (each edge is unique).');\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n  var nodes = typeof Object.create === 'function' ? Object.create(null) : {},\n    links = [],\n    // Hash of multi-edges. Used to track ids of edges between same nodes\n    multiEdges = {},\n    nodesCount = 0,\n    suspendEvents = 0,\n    forEachNode = createNodeIterator(),\n    createLink = options.multigraph ? createUniqueLink : createSingleLink,\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodesCount: function () {\n      return nodesCount;\n    },\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinksCount: function () {\n      return links.length;\n    },\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Array of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonim for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonim for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n  monitorSubscribers();\n  return graphPart;\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n    enterModification();\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      nodesCount++;\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n    nodes[nodeId] = node;\n    exitModification();\n    return node;\n  }\n  function getNode(nodeId) {\n    return nodes[nodeId];\n  }\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n    enterModification();\n    var prevLinks = node.links;\n    if (prevLinks) {\n      node.links = null;\n      for (var i = 0; i < prevLinks.length; ++i) {\n        removeLink(prevLinks[i]);\n      }\n    }\n    delete nodes[nodeId];\n    nodesCount--;\n    recordNodeChange(node, 'remove');\n    exitModification();\n    return true;\n  }\n  function addLink(fromId, toId, data) {\n    enterModification();\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n    var link = createLink(fromId, toId, data);\n    links.push(link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n    recordLinkChange(link, 'add');\n    exitModification();\n    return link;\n  }\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    return new Link(fromId, toId, data, linkId);\n  }\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Get rid of this method.\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + ++multiEdges[linkId];\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n    return new Link(fromId, toId, data, linkId);\n  }\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n  function removeLink(link) {\n    if (!link) {\n      return false;\n    }\n    var idx = indexOfElementInArray(link, links);\n    if (idx < 0) {\n      return false;\n    }\n    enterModification();\n    links.splice(idx, 1);\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n    if (fromNode) {\n      idx = indexOfElementInArray(link, fromNode.links);\n      if (idx >= 0) {\n        fromNode.links.splice(idx, 1);\n      }\n    }\n    if (toNode) {\n      idx = indexOfElementInArray(link, toNode.links);\n      if (idx >= 0) {\n        toNode.links.splice(idx, 1);\n      }\n    }\n    recordLinkChange(link, 'remove');\n    exitModification();\n    return true;\n  }\n  function getLink(fromNodeId, toNodeId) {\n    // TODO: Use sorted links to speed this up\n    var node = getNode(fromNodeId),\n      i;\n    if (!node || !node.links) {\n      return null;\n    }\n    for (i = 0; i < node.links.length; ++i) {\n      var link = node.links[i];\n      if (link.fromId === fromNodeId && link.toId === toNodeId) {\n        return link;\n      }\n    }\n    return null; // no link.\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function (node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n  function forEachLink(callback) {\n    var i, length;\n    if (typeof callback === 'function') {\n      for (i = 0, length = links.length; i < length; ++i) {\n        callback(links[i]);\n      }\n    }\n  }\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n      quitFast = callback(nodes[linkedNodeId], link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n    }\n  }\n\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes[link.toId], link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() {}\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n  function createNodeIterator() {\n    // Object.keys iterator is 1.3x faster than `for in` loop.\n    // See `https://github.com/anvaka/ngraph.graph/tree/bench-for-in-vs-obj-keys`\n    // branch for perf test\n    return Object.keys ? objectKeysIterator : forInIterator;\n  }\n  function objectKeysIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n    var keys = Object.keys(nodes);\n    for (var i = 0; i < keys.length; ++i) {\n      if (callback(nodes[keys[i]])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n\n  function forInIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n    var node;\n    for (node in nodes) {\n      if (callback(nodes[node])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n}\n\n// need this for old browsers. Should this be a separate module?\nfunction indexOfElementInArray(element, array) {\n  if (!array) return -1;\n  if (array.indexOf) {\n    return array.indexOf(element);\n  }\n  var len = array.length,\n    i;\n  for (i = 0; i < len; i += 1) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.push(link);\n  } else {\n    node.links = [link];\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\nfunction hashCode(str) {\n  var hash = 0,\n    i,\n    chr,\n    len;\n  if (str.length == 0) return hash;\n  for (i = 0, len = str.length; i < len; i++) {\n    chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return hash;\n}\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}","map":{"version":3,"names":["module","exports","createGraph","eventify","require","options","console","warn","multigraph","uniqueLinkId","undefined","nodes","Object","create","links","multiEdges","nodesCount","suspendEvents","forEachNode","createNodeIterator","createLink","createUniqueLink","createSingleLink","changes","recordLinkChange","noop","recordNodeChange","enterModification","exitModification","graphPart","addNode","addLink","removeLink","removeNode","getNode","getNodesCount","getLinksCount","length","getLinks","forEachLinkedNode","forEachLink","beginUpdate","endUpdate","clear","hasLink","getLink","hasNode","monitorSubscribers","realOn","on","enterModificationReal","exitModificationReal","recordLinkChangeReal","recordNodeChangeReal","apply","arguments","link","changeType","push","node","nodeId","data","Error","Node","prevLinks","i","fromId","toId","fromNode","toNode","addLinkToNode","linkId","makeLinkId","Link","isMultiEdge","hasOwnProperty","suffix","idx","indexOfElementInArray","splice","fromNodeId","toNodeId","id","callback","oriented","forEachOrientedLink","forEachNonOrientedLink","quitFast","linkedNodeId","fire","keys","objectKeysIterator","forInIterator","element","array","indexOf","len","hashCode","str","hash","chr","charCodeAt","toString"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.graph/index.js"],"sourcesContent":["/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now own each graph\\n'+\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  var nodes = typeof Object.create === 'function' ? Object.create(null) : {},\n    links = [],\n    // Hash of multi-edges. Used to track ids of edges between same nodes\n    multiEdges = {},\n    nodesCount = 0,\n    suspendEvents = 0,\n\n    forEachNode = createNodeIterator(),\n    createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodesCount: function () {\n      return nodesCount;\n    },\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinksCount: function () {\n      return links.length;\n    },\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Array of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonim for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonim for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      nodesCount++;\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes[nodeId] = node;\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes[nodeId];\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      node.links = null;\n      for(var i = 0; i < prevLinks.length; ++i) {\n        removeLink(prevLinks[i]);\n      }\n    }\n\n    delete nodes[nodeId];\n    nodesCount--;\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n\n    links.push(link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Get rid of this method.\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link) {\n    if (!link) {\n      return false;\n    }\n    var idx = indexOfElementInArray(link, links);\n    if (idx < 0) {\n      return false;\n    }\n\n    enterModification();\n\n    links.splice(idx, 1);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      idx = indexOfElementInArray(link, fromNode.links);\n      if (idx >= 0) {\n        fromNode.links.splice(idx, 1);\n      }\n    }\n\n    if (toNode) {\n      idx = indexOfElementInArray(link, toNode.links);\n      if (idx >= 0) {\n        toNode.links.splice(idx, 1);\n      }\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    // TODO: Use sorted links to speed this up\n    var node = getNode(fromNodeId),\n      i;\n    if (!node || !node.links) {\n      return null;\n    }\n\n    for (i = 0; i < node.links.length; ++i) {\n      var link = node.links[i];\n      if (link.fromId === fromNodeId && link.toId === toNodeId) {\n        return link;\n      }\n    }\n\n    return null; // no link.\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function(node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    var i, length;\n    if (typeof callback === 'function') {\n      for (i = 0, length = links.length; i < length; ++i) {\n        callback(links[i]);\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n\n      quitFast = callback(nodes[linkedNodeId], link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n    }\n  }\n\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes[link.toId], link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() {}\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function createNodeIterator() {\n    // Object.keys iterator is 1.3x faster than `for in` loop.\n    // See `https://github.com/anvaka/ngraph.graph/tree/bench-for-in-vs-obj-keys`\n    // branch for perf test\n    return Object.keys ? objectKeysIterator : forInIterator;\n  }\n\n  function objectKeysIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n\n    var keys = Object.keys(nodes);\n    for (var i = 0; i < keys.length; ++i) {\n      if (callback(nodes[keys[i]])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n\n  function forInIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n    var node;\n\n    for (node in nodes) {\n      if (callback(nodes[node])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n}\n\n// need this for old browsers. Should this be a separate module?\nfunction indexOfElementInArray(element, array) {\n  if (!array) return -1;\n\n  if (array.indexOf) {\n    return array.indexOf(element);\n  }\n\n  var len = array.length,\n    i;\n\n  for (i = 0; i < len; i += 1) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.push(link);\n  } else {\n    node.links = [link];\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction hashCode(str) {\n  var hash = 0, i, chr, len;\n  if (str.length == 0) return hash;\n  for (i = 0, len = str.length; i < len; i++) {\n    chr   = str.charCodeAt(i);\n    hash  = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}