{"ast":null,"code":"/**\r\n * @fileOverview Contains collection of primitive operations under graph.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\nmodule.exports = operations;\nfunction operations() {\n  return {\n    /**\r\n     * Gets graph density, which is a ratio of actual number of edges to maximum\r\n     * number of edges. I.e. graph density 1 means all nodes are connected with each other with an edge.\r\n     * Density 0 - graph has no edges. Runtime: O(1)\r\n     * \r\n     * @param graph represents oriented graph structure.\r\n     * @param directed (optional boolean) represents if the graph should be treated as a directed graph.\r\n     * \r\n     * @returns density of the graph if graph has nodes. NaN otherwise. Returns density for undirected graph by default but returns density for directed graph if a boolean 'true' is passed along with the graph.\r\n     */\n    density: function density(graph, directed) {\n      var nodes = graph.getNodesCount();\n      if (nodes === 0) {\n        return NaN;\n      }\n      if (directed) {\n        return graph.getLinksCount() / (nodes * (nodes - 1));\n      } else {\n        return 2 * graph.getLinksCount() / (nodes * (nodes - 1));\n      }\n    }\n  };\n}\n;","map":{"version":3,"names":["module","exports","operations","density","graph","directed","nodes","getNodesCount","NaN","getLinksCount"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/vivagraphjs/src/Algorithms/operations.js"],"sourcesContent":["/**\r\n * @fileOverview Contains collection of primitive operations under graph.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\nmodule.exports = operations;\r\n\r\nfunction operations() {\r\n\r\n    return {\r\n        /**\r\n         * Gets graph density, which is a ratio of actual number of edges to maximum\r\n         * number of edges. I.e. graph density 1 means all nodes are connected with each other with an edge.\r\n         * Density 0 - graph has no edges. Runtime: O(1)\r\n         * \r\n         * @param graph represents oriented graph structure.\r\n         * @param directed (optional boolean) represents if the graph should be treated as a directed graph.\r\n         * \r\n         * @returns density of the graph if graph has nodes. NaN otherwise. Returns density for undirected graph by default but returns density for directed graph if a boolean 'true' is passed along with the graph.\r\n         */\r\n        density : function (graph,directed) {\r\n            var nodes = graph.getNodesCount();\r\n            if (nodes === 0) {\r\n                return NaN;\r\n            }\r\n            if(directed){\r\n                return graph.getLinksCount() / (nodes * (nodes - 1));\r\n            } else {\r\n                return 2 * graph.getLinksCount() / (nodes * (nodes - 1));\r\n            }\r\n        }\r\n    };\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAGC,UAAU;AAE3B,SAASA,UAAUA,CAAA,EAAG;EAElB,OAAO;IACH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,OAAO,EAAG,SAAAA,QAAUC,KAAK,EAACC,QAAQ,EAAE;MAChC,IAAIC,KAAK,GAAGF,KAAK,CAACG,aAAa,EAAE;MACjC,IAAID,KAAK,KAAK,CAAC,EAAE;QACb,OAAOE,GAAG;MACd;MACA,IAAGH,QAAQ,EAAC;QACR,OAAOD,KAAK,CAACK,aAAa,EAAE,IAAIH,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC,CAAC;MACxD,CAAC,MAAM;QACH,OAAO,CAAC,GAAGF,KAAK,CAACK,aAAa,EAAE,IAAIH,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC,CAAC;MAC5D;IACJ;EACJ,CAAC;AACL;AAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}