{"ast":null,"code":"module.exports = closeness;\n\n/**\r\n * In a connected graph, the normalized closeness centrality of a node is the average\r\n * length of the shortest path between the node and all other nodes in the\r\n * graph. Thus the more central a node is, the closer it is to all other nodes.\r\n */\nfunction closeness(graph, oriented) {\n  var Q = [];\n  // list of predcessors on shortest paths from source\n  // distance from source\n  var dist = Object.create(null);\n  var currentNode;\n  var centrality = Object.create(null);\n  graph.forEachNode(setCentralityToZero);\n  graph.forEachNode(calculateCentrality);\n  return centrality;\n  function setCentralityToZero(node) {\n    centrality[node.id] = 0;\n  }\n  function calculateCentrality(node) {\n    currentNode = node.id;\n    singleSourceShortestPath(currentNode);\n    accumulate();\n  }\n  function accumulate() {\n    // Add all distances for node to array, excluding -1s\n    var distances = Object.keys(dist).map(function (key) {\n      return dist[key];\n    }).filter(function (val) {\n      return val !== -1;\n    });\n    // Set number of reachable nodes\n    var reachableNodesTotal = distances.length;\n    // Compute sum of all distances for node\n    var totalDistance = distances.reduce(function (a, b) {\n      return a + b;\n    });\n    if (totalDistance > 0) {\n      centrality[currentNode] = (reachableNodesTotal - 1) / totalDistance;\n    } else {\n      centrality[currentNode] = 0;\n    }\n  }\n  function singleSourceShortestPath(source) {\n    graph.forEachNode(initNode);\n    dist[source] = 0;\n    Q.push(source);\n    while (Q.length) {\n      var v = Q.shift();\n      graph.forEachLinkedNode(v, processNode, oriented);\n    }\n    function initNode(node) {\n      var nodeId = node.id;\n      dist[nodeId] = -1;\n    }\n    function processNode(otherNode) {\n      var w = otherNode.id;\n      if (dist[w] === -1) {\n        // Node w is found for the first time\n        dist[w] = dist[v] + 1;\n        Q.push(w);\n      }\n    }\n  }\n}","map":{"version":3,"names":["module","exports","closeness","graph","oriented","Q","dist","Object","create","currentNode","centrality","forEachNode","setCentralityToZero","calculateCentrality","node","id","singleSourceShortestPath","accumulate","distances","keys","map","key","filter","val","reachableNodesTotal","length","totalDistance","reduce","a","b","source","initNode","push","v","shift","forEachLinkedNode","processNode","nodeId","otherNode","w"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.centrality/src/closeness.js"],"sourcesContent":["module.exports = closeness;\r\n\r\n/**\r\n * In a connected graph, the normalized closeness centrality of a node is the average\r\n * length of the shortest path between the node and all other nodes in the\r\n * graph. Thus the more central a node is, the closer it is to all other nodes.\r\n */\r\nfunction closeness(graph, oriented) {\r\n  var Q = [];\r\n  // list of predcessors on shortest paths from source\r\n  // distance from source\r\n  var dist = Object.create(null);\r\n\r\n  var currentNode;\r\n  var centrality = Object.create(null);\r\n\r\n  graph.forEachNode(setCentralityToZero);\r\n  graph.forEachNode(calculateCentrality);\r\n\r\n  return centrality;\r\n\r\n  function setCentralityToZero(node) {\r\n    centrality[node.id] = 0;\r\n  }\r\n\r\n  function calculateCentrality(node) {\r\n    currentNode = node.id;\r\n    singleSourceShortestPath(currentNode);\r\n    accumulate();\r\n  }\r\n\r\n  function accumulate() {\r\n    // Add all distances for node to array, excluding -1s\r\n    var distances = Object.keys(dist).map(function(key) {return dist[key]}).filter(function(val){return val !== -1});\r\n    // Set number of reachable nodes\r\n    var reachableNodesTotal = distances.length;\r\n    // Compute sum of all distances for node\r\n    var totalDistance = distances.reduce(function(a,b) { return a + b });\r\n    if (totalDistance > 0) {\r\n      centrality[currentNode] = ((reachableNodesTotal - 1) / totalDistance); \r\n    } else {\r\n      centrality[currentNode] = 0;\r\n    }\r\n  }\r\n\r\n  function singleSourceShortestPath(source) {\r\n    graph.forEachNode(initNode);\r\n    dist[source] = 0;\r\n    Q.push(source);\r\n\r\n    while (Q.length) {\r\n      var v = Q.shift();\r\n      graph.forEachLinkedNode(v, processNode, oriented);\r\n    }\r\n\r\n    function initNode(node) {\r\n      var nodeId = node.id;\r\n      dist[nodeId] = -1;\r\n    }\r\n\r\n    function processNode(otherNode) {\r\n      var w = otherNode.id\r\n      if (dist[w] === -1) {\r\n        // Node w is found for the first time\r\n        dist[w] = dist[v] + 1;\r\n        Q.push(w);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,SAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAClC,IAAIC,CAAC,GAAG,EAAE;EACV;EACA;EACA,IAAIC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAE9B,IAAIC,WAAW;EACf,IAAIC,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEpCL,KAAK,CAACQ,WAAW,CAACC,mBAAmB,CAAC;EACtCT,KAAK,CAACQ,WAAW,CAACE,mBAAmB,CAAC;EAEtC,OAAOH,UAAU;EAEjB,SAASE,mBAAmBA,CAACE,IAAI,EAAE;IACjCJ,UAAU,CAACI,IAAI,CAACC,EAAE,CAAC,GAAG,CAAC;EACzB;EAEA,SAASF,mBAAmBA,CAACC,IAAI,EAAE;IACjCL,WAAW,GAAGK,IAAI,CAACC,EAAE;IACrBC,wBAAwB,CAACP,WAAW,CAAC;IACrCQ,UAAU,EAAE;EACd;EAEA,SAASA,UAAUA,CAAA,EAAG;IACpB;IACA,IAAIC,SAAS,GAAGX,MAAM,CAACY,IAAI,CAACb,IAAI,CAAC,CAACc,GAAG,CAAC,UAASC,GAAG,EAAE;MAAC,OAAOf,IAAI,CAACe,GAAG,CAAC;IAAA,CAAC,CAAC,CAACC,MAAM,CAAC,UAASC,GAAG,EAAC;MAAC,OAAOA,GAAG,KAAK,CAAC,CAAC;IAAA,CAAC,CAAC;IAChH;IACA,IAAIC,mBAAmB,GAAGN,SAAS,CAACO,MAAM;IAC1C;IACA,IAAIC,aAAa,GAAGR,SAAS,CAACS,MAAM,CAAC,UAASC,CAAC,EAACC,CAAC,EAAE;MAAE,OAAOD,CAAC,GAAGC,CAAC;IAAC,CAAC,CAAC;IACpE,IAAIH,aAAa,GAAG,CAAC,EAAE;MACrBhB,UAAU,CAACD,WAAW,CAAC,GAAI,CAACe,mBAAmB,GAAG,CAAC,IAAIE,aAAc;IACvE,CAAC,MAAM;MACLhB,UAAU,CAACD,WAAW,CAAC,GAAG,CAAC;IAC7B;EACF;EAEA,SAASO,wBAAwBA,CAACc,MAAM,EAAE;IACxC3B,KAAK,CAACQ,WAAW,CAACoB,QAAQ,CAAC;IAC3BzB,IAAI,CAACwB,MAAM,CAAC,GAAG,CAAC;IAChBzB,CAAC,CAAC2B,IAAI,CAACF,MAAM,CAAC;IAEd,OAAOzB,CAAC,CAACoB,MAAM,EAAE;MACf,IAAIQ,CAAC,GAAG5B,CAAC,CAAC6B,KAAK,EAAE;MACjB/B,KAAK,CAACgC,iBAAiB,CAACF,CAAC,EAAEG,WAAW,EAAEhC,QAAQ,CAAC;IACnD;IAEA,SAAS2B,QAAQA,CAACjB,IAAI,EAAE;MACtB,IAAIuB,MAAM,GAAGvB,IAAI,CAACC,EAAE;MACpBT,IAAI,CAAC+B,MAAM,CAAC,GAAG,CAAC,CAAC;IACnB;IAEA,SAASD,WAAWA,CAACE,SAAS,EAAE;MAC9B,IAAIC,CAAC,GAAGD,SAAS,CAACvB,EAAE;MACpB,IAAIT,IAAI,CAACiC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAClB;QACAjC,IAAI,CAACiC,CAAC,CAAC,GAAGjC,IAAI,CAAC2B,CAAC,CAAC,GAAG,CAAC;QACrB5B,CAAC,CAAC2B,IAAI,CAACO,CAAC,CAAC;MACX;IACF;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}