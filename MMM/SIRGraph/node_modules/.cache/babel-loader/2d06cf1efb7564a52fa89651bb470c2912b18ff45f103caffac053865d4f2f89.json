{"ast":null,"code":"module.exports = function (bodies, settings) {\n  var random = require('ngraph.random').random(42);\n  var boundingBox = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  };\n  return {\n    box: boundingBox,\n    update: updateBoundingBox,\n    reset: function () {\n      boundingBox.x1 = boundingBox.y1 = 0;\n      boundingBox.x2 = boundingBox.y2 = 0;\n    },\n    getBestNewPosition: function (neighbors) {\n      var graphRect = boundingBox;\n      var baseX = 0,\n        baseY = 0;\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          baseX += neighbors[i].pos.x;\n          baseY += neighbors[i].pos.y;\n        }\n        baseX /= neighbors.length;\n        baseY /= neighbors.length;\n      } else {\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\n      }\n      var springLength = settings.springLength;\n      return {\n        x: baseX + random.next(springLength) - springLength / 2,\n        y: baseY + random.next(springLength) - springLength / 2\n      };\n    }\n  };\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) {\n      return;\n    } // don't have to wory here.\n\n    var x1 = Number.MAX_VALUE,\n      y1 = Number.MAX_VALUE,\n      x2 = Number.MIN_VALUE,\n      y2 = Number.MIN_VALUE;\n    while (i--) {\n      // this is O(n), could it be done faster with quadtree?\n      // how about pinned nodes?\n      var body = bodies[i];\n      if (body.isPinned) {\n        body.pos.x = body.prevPos.x;\n        body.pos.y = body.prevPos.y;\n      } else {\n        body.prevPos.x = body.pos.x;\n        body.prevPos.y = body.pos.y;\n      }\n      if (body.pos.x < x1) {\n        x1 = body.pos.x;\n      }\n      if (body.pos.x > x2) {\n        x2 = body.pos.x;\n      }\n      if (body.pos.y < y1) {\n        y1 = body.pos.y;\n      }\n      if (body.pos.y > y2) {\n        y2 = body.pos.y;\n      }\n    }\n    boundingBox.x1 = x1;\n    boundingBox.x2 = x2;\n    boundingBox.y1 = y1;\n    boundingBox.y2 = y2;\n  }\n};","map":{"version":3,"names":["module","exports","bodies","settings","random","require","boundingBox","x1","y1","x2","y2","box","update","updateBoundingBox","reset","getBestNewPosition","neighbors","graphRect","baseX","baseY","length","i","pos","x","y","springLength","next","Number","MAX_VALUE","MIN_VALUE","body","isPinned","prevPos"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.physics.simulator/lib/bounds.js"],"sourcesContent":["module.exports = function (bodies, settings) {\n  var random = require('ngraph.random').random(42);\n  var boundingBox =  { x1: 0, y1: 0, x2: 0, y2: 0 };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset : function () {\n      boundingBox.x1 = boundingBox.y1 = 0;\n      boundingBox.x2 = boundingBox.y2 = 0;\n    },\n\n    getBestNewPosition: function (neighbors) {\n      var graphRect = boundingBox;\n\n      var baseX = 0, baseY = 0;\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          baseX += neighbors[i].pos.x;\n          baseY += neighbors[i].pos.y;\n        }\n\n        baseX /= neighbors.length;\n        baseY /= neighbors.length;\n      } else {\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\n      }\n\n      var springLength = settings.springLength;\n      return {\n        x: baseX + random.next(springLength) - springLength / 2,\n        y: baseY + random.next(springLength) - springLength / 2\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) { return; } // don't have to wory here.\n\n    var x1 = Number.MAX_VALUE,\n        y1 = Number.MAX_VALUE,\n        x2 = Number.MIN_VALUE,\n        y2 = Number.MIN_VALUE;\n\n    while(i--) {\n      // this is O(n), could it be done faster with quadtree?\n      // how about pinned nodes?\n      var body = bodies[i];\n      if (body.isPinned) {\n        body.pos.x = body.prevPos.x;\n        body.pos.y = body.prevPos.y;\n      } else {\n        body.prevPos.x = body.pos.x;\n        body.prevPos.y = body.pos.y;\n      }\n      if (body.pos.x < x1) {\n        x1 = body.pos.x;\n      }\n      if (body.pos.x > x2) {\n        x2 = body.pos.x;\n      }\n      if (body.pos.y < y1) {\n        y1 = body.pos.y;\n      }\n      if (body.pos.y > y2) {\n        y2 = body.pos.y;\n      }\n    }\n\n    boundingBox.x1 = x1;\n    boundingBox.x2 = x2;\n    boundingBox.y1 = y1;\n    boundingBox.y2 = y2;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}