{"ast":null,"code":"/**\n * Performs forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\nfunction integrate(bodies, timeStep) {\n  var dx = 0,\n    tx = 0,\n    dy = 0,\n    ty = 0,\n    i,\n    max = bodies.length;\n  if (max === 0) {\n    return 0;\n  }\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n      coeff = timeStep / body.mass;\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n      vy = body.velocity.y,\n      v = Math.sqrt(vx * vx + vy * vy);\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n    body.pos.x += dx;\n    body.pos.y += dy;\n    tx += Math.abs(dx);\n    ty += Math.abs(dy);\n  }\n  return (tx * tx + ty * ty) / max;\n}","map":{"version":3,"names":["module","exports","integrate","bodies","timeStep","dx","tx","dy","ty","i","max","length","body","coeff","mass","velocity","x","force","y","vx","vy","v","Math","sqrt","pos","abs"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js"],"sourcesContent":["/**\n * Performs forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n\n    tx += Math.abs(dx); ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty)/max;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,SAAS;AAE1B,SAASA,SAASA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EACnC,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;IACdC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;IACdC,CAAC;IACDC,GAAG,GAAGP,MAAM,CAACQ,MAAM;EAEvB,IAAID,GAAG,KAAK,CAAC,EAAE;IACb,OAAO,CAAC;EACV;EAEA,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,GAAG,EAAE,EAAED,CAAC,EAAE;IACxB,IAAIG,IAAI,GAAGT,MAAM,CAACM,CAAC,CAAC;MAChBI,KAAK,GAAGT,QAAQ,GAAGQ,IAAI,CAACE,IAAI;IAEhCF,IAAI,CAACG,QAAQ,CAACC,CAAC,IAAIH,KAAK,GAAGD,IAAI,CAACK,KAAK,CAACD,CAAC;IACvCJ,IAAI,CAACG,QAAQ,CAACG,CAAC,IAAIL,KAAK,GAAGD,IAAI,CAACK,KAAK,CAACC,CAAC;IACvC,IAAIC,EAAE,GAAGP,IAAI,CAACG,QAAQ,CAACC,CAAC;MACpBI,EAAE,GAAGR,IAAI,CAACG,QAAQ,CAACG,CAAC;MACpBG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IAEpC,IAAIC,CAAC,GAAG,CAAC,EAAE;MACTT,IAAI,CAACG,QAAQ,CAACC,CAAC,GAAGG,EAAE,GAAGE,CAAC;MACxBT,IAAI,CAACG,QAAQ,CAACG,CAAC,GAAGE,EAAE,GAAGC,CAAC;IAC1B;IAEAhB,EAAE,GAAGD,QAAQ,GAAGQ,IAAI,CAACG,QAAQ,CAACC,CAAC;IAC/BT,EAAE,GAAGH,QAAQ,GAAGQ,IAAI,CAACG,QAAQ,CAACG,CAAC;IAE/BN,IAAI,CAACY,GAAG,CAACR,CAAC,IAAIX,EAAE;IAChBO,IAAI,CAACY,GAAG,CAACN,CAAC,IAAIX,EAAE;IAEhBD,EAAE,IAAIgB,IAAI,CAACG,GAAG,CAACpB,EAAE,CAAC;IAAEG,EAAE,IAAIc,IAAI,CAACG,GAAG,CAAClB,EAAE,CAAC;EACxC;EAEA,OAAO,CAACD,EAAE,GAAGA,EAAE,GAAGE,EAAE,GAAGA,EAAE,IAAEE,GAAG;AAChC"},"metadata":{},"sourceType":"script","externalDependencies":[]}