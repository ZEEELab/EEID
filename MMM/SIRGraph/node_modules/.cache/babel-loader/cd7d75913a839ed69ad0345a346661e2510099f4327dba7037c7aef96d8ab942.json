{"ast":null,"code":"'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    if (typeof g[typedArray] === 'function') {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        toStrTags[typedArray] = descriptor.get;\n      }\n    }\n  });\n}\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var foundName = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!foundName) {\n      try {\n        var name = getter.call(value);\n        if (name === typedArray) {\n          foundName = name;\n        }\n      } catch (e) {}\n    }\n  });\n  return foundName;\n};\nvar isTypedArray = require('is-typed-array');\nmodule.exports = function whichTypedArray(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n  if (!hasToStringTag || !(Symbol.toStringTag in value)) {\n    return $slice($toString(value), 8, -1);\n  }\n  return tryTypedArrays(value);\n};","map":{"version":3,"names":["forEach","require","availableTypedArrays","callBound","gOPD","$toString","hasToStringTag","g","globalThis","global","typedArrays","$slice","toStrTags","getPrototypeOf","Object","typedArray","arr","Symbol","toStringTag","proto","descriptor","superProto","get","tryTypedArrays","tryAllTypedArrays","value","foundName","getter","name","call","e","isTypedArray","module","exports","whichTypedArray"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/which-typed-array/index.js"],"sourcesContent":["'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAC5D,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAII,SAAS,GAAGF,SAAS,CAAC,2BAA2B,CAAC;AACtD,IAAIG,cAAc,GAAGL,OAAO,CAAC,uBAAuB,CAAC,EAAE;AAEvD,IAAIM,CAAC,GAAG,OAAOC,UAAU,KAAK,WAAW,GAAGC,MAAM,GAAGD,UAAU;AAC/D,IAAIE,WAAW,GAAGR,oBAAoB,EAAE;AAExC,IAAIS,MAAM,GAAGR,SAAS,CAAC,wBAAwB,CAAC;AAChD,IAAIS,SAAS,GAAG,CAAC,CAAC;AAClB,IAAIC,cAAc,GAAGC,MAAM,CAACD,cAAc,CAAC,CAAC;AAC5C,IAAIP,cAAc,IAAIF,IAAI,IAAIS,cAAc,EAAE;EAC7Cb,OAAO,CAACU,WAAW,EAAE,UAAUK,UAAU,EAAE;IAC1C,IAAI,OAAOR,CAAC,CAACQ,UAAU,CAAC,KAAK,UAAU,EAAE;MACxC,IAAIC,GAAG,GAAG,IAAIT,CAAC,CAACQ,UAAU,CAAC,EAAE;MAC7B,IAAIE,MAAM,CAACC,WAAW,IAAIF,GAAG,EAAE;QAC9B,IAAIG,KAAK,GAAGN,cAAc,CAACG,GAAG,CAAC;QAC/B,IAAII,UAAU,GAAGhB,IAAI,CAACe,KAAK,EAAEF,MAAM,CAACC,WAAW,CAAC;QAChD,IAAI,CAACE,UAAU,EAAE;UAChB,IAAIC,UAAU,GAAGR,cAAc,CAACM,KAAK,CAAC;UACtCC,UAAU,GAAGhB,IAAI,CAACiB,UAAU,EAAEJ,MAAM,CAACC,WAAW,CAAC;QAClD;QACAN,SAAS,CAACG,UAAU,CAAC,GAAGK,UAAU,CAACE,GAAG;MACvC;IACD;EACD,CAAC,CAAC;AACH;AAEA,IAAIC,cAAc,GAAG,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EACtD,IAAIC,SAAS,GAAG,KAAK;EACrB1B,OAAO,CAACY,SAAS,EAAE,UAAUe,MAAM,EAAEZ,UAAU,EAAE;IAChD,IAAI,CAACW,SAAS,EAAE;MACf,IAAI;QACH,IAAIE,IAAI,GAAGD,MAAM,CAACE,IAAI,CAACJ,KAAK,CAAC;QAC7B,IAAIG,IAAI,KAAKb,UAAU,EAAE;UACxBW,SAAS,GAAGE,IAAI;QACjB;MACD,CAAC,CAAC,OAAOE,CAAC,EAAE,CAAC;IACd;EACD,CAAC,CAAC;EACF,OAAOJ,SAAS;AACjB,CAAC;AAED,IAAIK,YAAY,GAAG9B,OAAO,CAAC,gBAAgB,CAAC;AAE5C+B,MAAM,CAACC,OAAO,GAAG,SAASC,eAAeA,CAACT,KAAK,EAAE;EAChD,IAAI,CAACM,YAAY,CAACN,KAAK,CAAC,EAAE;IAAE,OAAO,KAAK;EAAE;EAC1C,IAAI,CAACnB,cAAc,IAAI,EAAEW,MAAM,CAACC,WAAW,IAAIO,KAAK,CAAC,EAAE;IAAE,OAAOd,MAAM,CAACN,SAAS,CAACoB,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAAE;EACjG,OAAOF,cAAc,CAACE,KAAK,CAAC;AAC7B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}