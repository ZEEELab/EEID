{"ast":null,"code":"/**\n * @fileOverview Defines a naive form of links for webglGraphics class.\n * This form allows to change color of links.\n **/\n\nvar glUtils = require('./webgl.js');\nmodule.exports = webglLinkProgram;\n\n/**\n * Defines UI for links in webgl renderer.\n */\nfunction webglLinkProgram() {\n  var ATTRIBUTES_PER_PRIMITIVE = 6,\n    // primitive is Line with two points. Each has x,y and color = 3 * 2 attributes.\n    BYTES_PER_LINK = 2 * (2 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT),\n    // two nodes * (x, y + color)\n    linksFS = ['precision mediump float;', 'varying vec4 color;', 'void main(void) {', '   gl_FragColor = color;', '}'].join('\\n'),\n    linksVS = ['attribute vec2 a_vertexPos;', 'attribute vec4 a_color;', 'uniform vec2 u_screenSize;', 'uniform mat4 u_transform;', 'varying vec4 color;', 'void main(void) {', '   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0.0, 1.0);', '   color = a_color.abgr;', '}'].join('\\n'),\n    program,\n    gl,\n    buffer,\n    utils,\n    locations,\n    linksCount = 0,\n    frontLinkId,\n    // used to track z-index of links.\n    storage = new ArrayBuffer(16 * BYTES_PER_LINK),\n    positions = new Float32Array(storage),\n    colors = new Uint32Array(storage),\n    width,\n    height,\n    transform,\n    sizeDirty,\n    ensureEnoughStorage = function () {\n      // TODO: this is a duplicate of webglNodeProgram code. Extract it to webgl.js\n      if ((linksCount + 1) * BYTES_PER_LINK > storage.byteLength) {\n        // Every time we run out of space create new array twice bigger.\n        // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\n        var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\n          extendedPositions = new Float32Array(extendedStorage),\n          extendedColors = new Uint32Array(extendedStorage);\n        extendedColors.set(colors); // should be enough to copy just one view.\n        positions = extendedPositions;\n        colors = extendedColors;\n        storage = extendedStorage;\n      }\n    };\n  return {\n    load: function (glContext) {\n      gl = glContext;\n      utils = glUtils(glContext);\n      program = utils.createProgram(linksVS, linksFS);\n      gl.useProgram(program);\n      locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\n      gl.enableVertexAttribArray(locations.vertexPos);\n      gl.enableVertexAttribArray(locations.color);\n      buffer = gl.createBuffer();\n    },\n    position: function (linkUi, fromPos, toPos) {\n      var linkIdx = linkUi.id,\n        offset = linkIdx * ATTRIBUTES_PER_PRIMITIVE;\n      positions[offset] = fromPos.x;\n      positions[offset + 1] = fromPos.y;\n      colors[offset + 2] = linkUi.color;\n      positions[offset + 3] = toPos.x;\n      positions[offset + 4] = toPos.y;\n      colors[offset + 5] = linkUi.color;\n    },\n    createLink: function (ui) {\n      ensureEnoughStorage();\n      linksCount += 1;\n      frontLinkId = ui.id;\n    },\n    removeLink: function (ui) {\n      if (linksCount > 0) {\n        linksCount -= 1;\n      }\n      // swap removed link with the last link. This will give us O(1) performance for links removal:\n      if (ui.id < linksCount && linksCount > 0) {\n        // using colors as a view to array buffer is okay here.\n        utils.copyArrayPart(colors, ui.id * ATTRIBUTES_PER_PRIMITIVE, linksCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n      }\n    },\n    updateTransform: function (newTransform) {\n      sizeDirty = true;\n      transform = newTransform;\n    },\n    updateSize: function (w, h) {\n      width = w;\n      height = h;\n      sizeDirty = true;\n    },\n    render: function () {\n      gl.useProgram(program);\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\n      if (sizeDirty) {\n        sizeDirty = false;\n        gl.uniformMatrix4fv(locations.transform, false, transform);\n        gl.uniform2f(locations.screenSize, width, height);\n      }\n      gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n      gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\n      gl.drawArrays(gl.LINES, 0, linksCount * 2);\n      frontLinkId = linksCount - 1;\n    },\n    bringToFront: function (link) {\n      if (frontLinkId > link.id) {\n        utils.swapArrayPart(positions, link.id * ATTRIBUTES_PER_PRIMITIVE, frontLinkId * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n      }\n      if (frontLinkId > 0) {\n        frontLinkId -= 1;\n      }\n    },\n    getFrontLinkId: function () {\n      return frontLinkId;\n    }\n  };\n}","map":{"version":3,"names":["glUtils","require","module","exports","webglLinkProgram","ATTRIBUTES_PER_PRIMITIVE","BYTES_PER_LINK","Float32Array","BYTES_PER_ELEMENT","Uint32Array","linksFS","join","linksVS","program","gl","buffer","utils","locations","linksCount","frontLinkId","storage","ArrayBuffer","positions","colors","width","height","transform","sizeDirty","ensureEnoughStorage","byteLength","extendedStorage","extendedPositions","extendedColors","set","load","glContext","createProgram","useProgram","getLocations","enableVertexAttribArray","vertexPos","color","createBuffer","position","linkUi","fromPos","toPos","linkIdx","id","offset","x","y","createLink","ui","removeLink","copyArrayPart","updateTransform","newTransform","updateSize","w","h","render","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","uniformMatrix4fv","uniform2f","screenSize","vertexAttribPointer","FLOAT","UNSIGNED_BYTE","drawArrays","LINES","bringToFront","link","swapArrayPart","getFrontLinkId"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/vivagraphjs/src/WebGL/webglLinkProgram.js"],"sourcesContent":["/**\n * @fileOverview Defines a naive form of links for webglGraphics class.\n * This form allows to change color of links.\n **/\n\nvar glUtils = require('./webgl.js');\n\nmodule.exports = webglLinkProgram;\n\n/**\n * Defines UI for links in webgl renderer.\n */\nfunction webglLinkProgram() {\n    var ATTRIBUTES_PER_PRIMITIVE = 6, // primitive is Line with two points. Each has x,y and color = 3 * 2 attributes.\n        BYTES_PER_LINK = 2 * (2 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT), // two nodes * (x, y + color)\n        linksFS = [\n            'precision mediump float;',\n            'varying vec4 color;',\n            'void main(void) {',\n            '   gl_FragColor = color;',\n            '}'\n        ].join('\\n'),\n\n        linksVS = [\n            'attribute vec2 a_vertexPos;',\n            'attribute vec4 a_color;',\n\n            'uniform vec2 u_screenSize;',\n            'uniform mat4 u_transform;',\n\n            'varying vec4 color;',\n\n            'void main(void) {',\n            '   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0.0, 1.0);',\n            '   color = a_color.abgr;',\n            '}'\n        ].join('\\n'),\n\n        program,\n        gl,\n        buffer,\n        utils,\n        locations,\n        linksCount = 0,\n        frontLinkId, // used to track z-index of links.\n        storage = new ArrayBuffer(16 * BYTES_PER_LINK),\n        positions = new Float32Array(storage),\n        colors = new Uint32Array(storage),\n        width,\n        height,\n        transform,\n        sizeDirty,\n\n        ensureEnoughStorage = function () {\n            // TODO: this is a duplicate of webglNodeProgram code. Extract it to webgl.js\n            if ((linksCount+1)*BYTES_PER_LINK > storage.byteLength) {\n                // Every time we run out of space create new array twice bigger.\n                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\n                var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\n                    extendedPositions = new Float32Array(extendedStorage),\n                    extendedColors = new Uint32Array(extendedStorage);\n\n                extendedColors.set(colors); // should be enough to copy just one view.\n                positions = extendedPositions;\n                colors = extendedColors;\n                storage = extendedStorage;\n            }\n        };\n\n    return {\n        load : function (glContext) {\n            gl = glContext;\n            utils = glUtils(glContext);\n\n            program = utils.createProgram(linksVS, linksFS);\n            gl.useProgram(program);\n            locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\n\n            gl.enableVertexAttribArray(locations.vertexPos);\n            gl.enableVertexAttribArray(locations.color);\n\n            buffer = gl.createBuffer();\n        },\n\n        position: function (linkUi, fromPos, toPos) {\n            var linkIdx = linkUi.id,\n                offset = linkIdx * ATTRIBUTES_PER_PRIMITIVE;\n            positions[offset] = fromPos.x;\n            positions[offset + 1] = fromPos.y;\n            colors[offset + 2] = linkUi.color;\n\n            positions[offset + 3] = toPos.x;\n            positions[offset + 4] = toPos.y;\n            colors[offset + 5] = linkUi.color;\n        },\n\n        createLink : function (ui) {\n            ensureEnoughStorage();\n\n            linksCount += 1;\n            frontLinkId = ui.id;\n        },\n\n        removeLink : function (ui) {\n            if (linksCount > 0) { linksCount -= 1; }\n            // swap removed link with the last link. This will give us O(1) performance for links removal:\n            if (ui.id < linksCount && linksCount > 0) {\n                // using colors as a view to array buffer is okay here.\n                utils.copyArrayPart(colors, ui.id * ATTRIBUTES_PER_PRIMITIVE, linksCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n            }\n        },\n\n        updateTransform : function (newTransform) {\n            sizeDirty = true;\n            transform = newTransform;\n        },\n\n        updateSize : function (w, h) {\n            width = w;\n            height = h;\n            sizeDirty = true;\n        },\n\n        render : function () {\n            gl.useProgram(program);\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\n\n            if (sizeDirty) {\n                sizeDirty = false;\n                gl.uniformMatrix4fv(locations.transform, false, transform);\n                gl.uniform2f(locations.screenSize, width, height);\n            }\n\n            gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n            gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\n\n            gl.drawArrays(gl.LINES, 0, linksCount * 2);\n\n            frontLinkId = linksCount - 1;\n        },\n\n        bringToFront : function (link) {\n            if (frontLinkId > link.id) {\n                utils.swapArrayPart(positions, link.id * ATTRIBUTES_PER_PRIMITIVE, frontLinkId * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n            }\n            if (frontLinkId > 0) {\n                frontLinkId -= 1;\n            }\n        },\n\n        getFrontLinkId : function () {\n            return frontLinkId;\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}