{"ast":null,"code":"module.exports = intersect;\n\n/**\n * Original authors: Mukesh Prasad, Appeared in Graphics Gem II book\n * http://www.opensource.apple.com/source/graphviz/graphviz-498/graphviz/dynagraph/common/xlines.c\n * and adopted to javascript version by Andrei Kashcha.\n *\n * This function computes whether two line segments,\n * respectively joining the input points (x1,y1) -- (x2,y2)\n * and the input points (x3,y3) -- (x4,y4) intersect.\n * If the lines intersect, the output variables x, y are\n * set to coordinates of the point of intersection.\n *\n * @param {Number} x1 First line segment coordinates\n * @param {Number} y1 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n *\n * @param {Number} x3 Second line segment coordinates\n * @param {Number} y3 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n *\n * @return {Object} x, y coordinates of intersection point or falsy value if no\n * intersection found..\n */\nfunction intersect(x1, y1, x2, y2,\n// first line segment\nx3, y3, x4, y4 // second line segment\n) {\n  var a1,\n    a2,\n    b1,\n    b2,\n    c1,\n    c2,\n    /* Coefficients of line eqns. */\n    r1,\n    r2,\n    r3,\n    r4,\n    /* 'Sign' values */\n    denom,\n    offset,\n    num,\n    /* Intermediate values */\n    result = {\n      x: 0,\n      y: 0\n    };\n\n  /* Compute a1, b1, c1, where line joining points 1 and 2\n   * is \"a1 x  +  b1 y  +  c1  =  0\".\n   */\n  a1 = y2 - y1;\n  b1 = x1 - x2;\n  c1 = x2 * y1 - x1 * y2;\n\n  /* Compute r3 and r4.\n   */\n  r3 = a1 * x3 + b1 * y3 + c1;\n  r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && r3 >= 0 === r4 >= 4) {\n    return null; //no intersection.\n  }\n\n  /* Compute a2, b2, c2 */\n  a2 = y4 - y3;\n  b2 = x3 - x4;\n  c2 = x4 * y3 - x3 * y4;\n\n  /* Compute r1 and r2 */\n\n  r1 = a2 * x1 + b2 * y1 + c2;\n  r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n  if (r1 !== 0 && r2 !== 0 && r1 >= 0 === r2 >= 0) {\n    return null; // no intersection;\n  }\n  /* Line segments intersect: compute intersection point.\n   */\n\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return null; // Actually collinear..\n  }\n\n  offset = denom < 0 ? -denom / 2 : denom / 2;\n  offset = 0.0;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n  num = b1 * c2 - b2 * c1;\n  result.x = (num < 0 ? num - offset : num + offset) / denom;\n  num = a2 * c1 - a1 * c2;\n  result.y = (num < 0 ? num - offset : num + offset) / denom;\n  return result;\n}","map":{"version":3,"names":["module","exports","intersect","x1","y1","x2","y2","x3","y3","x4","y4","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","result","x","y"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/gintersect/index.js"],"sourcesContent":["module.exports = intersect;\n\n/**\n * Original authors: Mukesh Prasad, Appeared in Graphics Gem II book\n * http://www.opensource.apple.com/source/graphviz/graphviz-498/graphviz/dynagraph/common/xlines.c\n * and adopted to javascript version by Andrei Kashcha.\n *\n * This function computes whether two line segments,\n * respectively joining the input points (x1,y1) -- (x2,y2)\n * and the input points (x3,y3) -- (x4,y4) intersect.\n * If the lines intersect, the output variables x, y are\n * set to coordinates of the point of intersection.\n *\n * @param {Number} x1 First line segment coordinates\n * @param {Number} y1 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n *\n * @param {Number} x3 Second line segment coordinates\n * @param {Number} y3 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n *\n * @return {Object} x, y coordinates of intersection point or falsy value if no\n * intersection found..\n */\nfunction intersect(\n  x1, y1, x2, y2, // first line segment\n  x3, y3, x4, y4  // second line segment\n) {\n\n  var a1, a2, b1, b2, c1, c2, /* Coefficients of line eqns. */\n    r1, r2, r3, r4, /* 'Sign' values */\n    denom, offset, num, /* Intermediate values */\n    result = {\n      x: 0,\n      y: 0\n    };\n\n  /* Compute a1, b1, c1, where line joining points 1 and 2\n   * is \"a1 x  +  b1 y  +  c1  =  0\".\n   */\n  a1 = y2 - y1;\n  b1 = x1 - x2;\n  c1 = x2 * y1 - x1 * y2;\n\n  /* Compute r3 and r4.\n   */\n  r3 = a1 * x3 + b1 * y3 + c1;\n  r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && ((r3 >= 0) === (r4 >= 4))) {\n    return null; //no intersection.\n  }\n\n  /* Compute a2, b2, c2 */\n  a2 = y4 - y3;\n  b2 = x3 - x4;\n  c2 = x4 * y3 - x3 * y4;\n\n  /* Compute r1 and r2 */\n\n  r1 = a2 * x1 + b2 * y1 + c2;\n  r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n  if (r1 !== 0 && r2 !== 0 && ((r1 >= 0) === (r2 >= 0))) {\n    return null; // no intersection;\n  }\n  /* Line segments intersect: compute intersection point.\n   */\n\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return null; // Actually collinear..\n  }\n\n  offset = denom < 0 ? -denom / 2 : denom / 2;\n  offset = 0.0;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n  num = b1 * c2 - b2 * c1;\n  result.x = (num < 0 ? num - offset : num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  result.y = (num < 0 ? num - offset : num + offset) / denom;\n\n  return result;\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,SAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAChBC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;AAAE;AAChBC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAE;AAAA,EAChB;EAEA,IAAIC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAE;IAC1BC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAE;IAChBC,KAAK;IAAEC,MAAM;IAAEC,GAAG;IAAE;IACpBC,MAAM,GAAG;MACPC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE;IACL,CAAC;;EAEH;AACF;AACA;EACEf,EAAE,GAAGL,EAAE,GAAGF,EAAE;EACZS,EAAE,GAAGV,EAAE,GAAGE,EAAE;EACZU,EAAE,GAAGV,EAAE,GAAGD,EAAE,GAAGD,EAAE,GAAGG,EAAE;;EAEtB;AACF;EACEa,EAAE,GAAGR,EAAE,GAAGJ,EAAE,GAAGM,EAAE,GAAGL,EAAE,GAAGO,EAAE;EAC3BK,EAAE,GAAGT,EAAE,GAAGF,EAAE,GAAGI,EAAE,GAAGH,EAAE,GAAGK,EAAE;;EAE3B;AACF;AACA;;EAEE,IAAII,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,IAAMD,EAAE,IAAI,CAAC,KAAOC,EAAE,IAAI,CAAG,EAAE;IACrD,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;EACAR,EAAE,GAAGF,EAAE,GAAGF,EAAE;EACZM,EAAE,GAAGP,EAAE,GAAGE,EAAE;EACZO,EAAE,GAAGP,EAAE,GAAGD,EAAE,GAAGD,EAAE,GAAGG,EAAE;;EAEtB;;EAEAO,EAAE,GAAGL,EAAE,GAAGT,EAAE,GAAGW,EAAE,GAAGV,EAAE,GAAGY,EAAE;EAC3BE,EAAE,GAAGN,EAAE,GAAGP,EAAE,GAAGS,EAAE,GAAGR,EAAE,GAAGU,EAAE;;EAE3B;AACF;AACA;AACA;EACE,IAAIC,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,IAAMD,EAAE,IAAI,CAAC,KAAOC,EAAE,IAAI,CAAG,EAAE;IACrD,OAAO,IAAI,CAAC,CAAC;EACf;EACA;AACF;;EAEEG,KAAK,GAAGV,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGC,EAAE;EACzB,IAAIQ,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,IAAI,CAAC,CAAC;EACf;;EAEAC,MAAM,GAAGD,KAAK,GAAG,CAAC,GAAG,CAACA,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC;EAC3CC,MAAM,GAAG,GAAG;;EAEZ;AACF;AACA;AACA;EACEC,GAAG,GAAGV,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGC,EAAE;EACvBS,MAAM,CAACC,CAAC,GAAG,CAACF,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAGD,MAAM,GAAGC,GAAG,GAAGD,MAAM,IAAID,KAAK;EAE1DE,GAAG,GAAGX,EAAE,GAAGG,EAAE,GAAGJ,EAAE,GAAGK,EAAE;EACvBQ,MAAM,CAACE,CAAC,GAAG,CAACH,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAGD,MAAM,GAAGC,GAAG,GAAGD,MAAM,IAAID,KAAK;EAE1D,OAAOG,MAAM;AACf"},"metadata":{},"sourceType":"script","externalDependencies":[]}