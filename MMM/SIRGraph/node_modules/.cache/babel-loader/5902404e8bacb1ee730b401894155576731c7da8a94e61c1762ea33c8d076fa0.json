{"ast":null,"code":"/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = physicsSimulator;\nfunction physicsSimulator(settings) {\n  var Spring = require('./lib/spring');\n  var expose = require('ngraph.expose');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n  settings = merge(settings, {\n    /**\n     * Ideal length for links (springs in physical model).\n     */\n    springLength: 30,\n    /**\n     * Hook's law coefficient. 1 - solid spring.\n     */\n    springCoeff: 0.0008,\n    /**\n     * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n     * if you make it positive nodes start attract each other :).\n     */\n    gravity: -1.2,\n    /**\n     * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n     * The closer it's to 1 the more nodes algorithm will have to go through.\n     * Setting it to one makes Barnes Hut simulation no different from\n     * brute-force forces calculation (each node is considered).\n     */\n    theta: 0.8,\n    /**\n     * Drag force coefficient. Used to slow down system, thus should be less than 1.\n     * The closer it is to 0 the less tight system will be.\n     */\n    dragCoeff: 0.02,\n    /**\n     * Default time step (dt) for forces integration\n     */\n    timeStep: 20\n  });\n\n  // We allow clients to override basic factory methods:\n  var createQuadTree = settings.createQuadTree || require('ngraph.quadtreebh');\n  var createBounds = settings.createBounds || require('./lib/bounds');\n  var createDragForce = settings.createDragForce || require('./lib/dragForce');\n  var createSpringForce = settings.createSpringForce || require('./lib/springForce');\n  var integrate = settings.integrator || require('./lib/eulerIntegrator');\n  var createBody = settings.createBody || require('./lib/createBody');\n  var bodies = [],\n    // Bodies in this simulation.\n    springs = [],\n    // Springs in this simulation.\n    quadTree = createQuadTree(settings),\n    bounds = createBounds(bodies, settings),\n    springForce = createSpringForce(settings),\n    dragForce = createDragForce(settings);\n  var bboxNeedsUpdate = true;\n  var totalMovement = 0; // how much movement we made on last step\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n    quadTree: quadTree,\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function step() {\n      accumulateForces();\n      var movement = integrate(bodies, settings.timeStep);\n      bounds.update();\n      return movement;\n    },\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function addBody(body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n      return body;\n    },\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function addBodyAt(pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n      return body;\n    },\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function removeBody(body) {\n      if (!body) {\n        return;\n      }\n      var idx = bodies.indexOf(body);\n      if (idx < 0) {\n        return;\n      }\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function addSpring(body1, body2, springLength, springWeight, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1, springWeight);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function getTotalMovement() {\n      return totalMovement;\n    },\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function removeSpring(spring) {\n      if (!spring) {\n        return;\n      }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n    getBestNewBodyPosition: function getBestNewBodyPosition(neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: function getBBox() {\n      if (bboxNeedsUpdate) {\n        bounds.update();\n        bboxNeedsUpdate = false;\n      }\n      return bounds.box;\n    },\n    invalidateBBox: function invalidateBBox() {\n      bboxNeedsUpdate = true;\n    },\n    gravity: function gravity(value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({\n          gravity: value\n        });\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n    theta: function theta(value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({\n          theta: value\n        });\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n  eventify(publicApi);\n  return publicApi;\n  function accumulateForces() {\n    // Accumulate forces acting on bodies.\n    var body,\n      i = bodies.length;\n    if (i) {\n      // only add bodies if there the array is not empty:\n      quadTree.insertBodies(bodies); // performance: O(n * log n)\n      while (i--) {\n        body = bodies[i];\n        // If body is pinned there is no point updating its forces - it should\n        // never move:\n        if (!body.isPinned) {\n          body.force.reset();\n          quadTree.updateBodyForce(body);\n          dragForce.update(body);\n        }\n      }\n    }\n    i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n}\n;","map":{"version":3,"names":["module","exports","physicsSimulator","settings","Spring","require","expose","merge","eventify","springLength","springCoeff","gravity","theta","dragCoeff","timeStep","createQuadTree","createBounds","createDragForce","createSpringForce","integrate","integrator","createBody","bodies","springs","quadTree","bounds","springForce","dragForce","bboxNeedsUpdate","totalMovement","publicApi","step","accumulateForces","movement","update","addBody","body","Error","push","addBodyAt","pos","removeBody","idx","indexOf","splice","length","reset","addSpring","body1","body2","springWeight","springCoefficient","spring","getTotalMovement","removeSpring","getBestNewBodyPosition","neighbors","getBestNewPosition","getBBox","box","invalidateBBox","value","undefined","options","i","insertBodies","isPinned","force","updateBodyForce"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.physics.simulator/index.js"],"sourcesContent":["/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = physicsSimulator;\n\nfunction physicsSimulator(settings) {\n  var Spring = require('./lib/spring');\n  var expose = require('ngraph.expose');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 30,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoeff: 0.0008,\n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -1.2,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoeff: 0.02,\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 20,\n  });\n\n  // We allow clients to override basic factory methods:\n  var createQuadTree = settings.createQuadTree || require('ngraph.quadtreebh');\n  var createBounds = settings.createBounds || require('./lib/bounds');\n  var createDragForce = settings.createDragForce || require('./lib/dragForce');\n  var createSpringForce = settings.createSpringForce || require('./lib/springForce');\n  var integrate = settings.integrator || require('./lib/eulerIntegrator');\n  var createBody = settings.createBody || require('./lib/createBody');\n\n  var bodies = [], // Bodies in this simulation.\n      springs = [], // Springs in this simulation.\n      quadTree =  createQuadTree(settings),\n      bounds = createBounds(bodies, settings),\n      springForce = createSpringForce(settings),\n      dragForce = createDragForce(settings);\n\n  var bboxNeedsUpdate = true;\n  var totalMovement = 0; // how much movement we made on last step\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      accumulateForces();\n\n      var movement = integrate(bodies, settings.timeStep);\n      bounds.update();\n\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springWeight, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1, springWeight);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: function () {\n      if (bboxNeedsUpdate) {\n        bounds.update();\n        bboxNeedsUpdate = false;\n      }\n      return bounds.box;\n    },\n\n    invalidateBBox: function () {\n      bboxNeedsUpdate = true;\n    },\n\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function accumulateForces() {\n    // Accumulate forces acting on bodies.\n    var body,\n        i = bodies.length;\n\n    if (i) {\n      // only add bodies if there the array is not empty:\n      quadTree.insertBodies(bodies); // performance: O(n * log n)\n      while (i--) {\n        body = bodies[i];\n        // If body is pinned there is no point updating its forces - it should\n        // never move:\n        if (!body.isPinned) {\n          body.force.reset();\n\n          quadTree.updateBodyForce(body);\n          dragForce.update(body);\n        }\n      }\n    }\n\n    i = springs.length;\n    while(i--) {\n      springForce.update(springs[i]);\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}