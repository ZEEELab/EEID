{"ast":null,"code":"module.exports = {\n  random: random,\n  randomIterator: randomIterator\n};\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : +new Date();\n  var randomFunc = function randomFunc() {\n    // Robert Jenkins' 32 bit integer hash function.\n    seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;\n    seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;\n    seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;\n    seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;\n    seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;\n    seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;\n    return (seed & 0xfffffff) / 0x10000000;\n  };\n  return {\n    /**\n     * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n     *\n     * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.\n     */\n    next: function next(maxValue) {\n      return Math.floor(randomFunc() * maxValue);\n    },\n    /**\n     * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n     * This function is the same as Math.random() (except that it could be seeded)\n     */\n    nextDouble: function nextDouble() {\n      return randomFunc();\n    }\n  };\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n  return {\n    forEach: function forEach(callback) {\n      var i, j, t;\n      for (i = array.length - 1; i > 0; --i) {\n        j = localRandom.next(i + 1); // i inclusive\n        t = array[j];\n        array[j] = array[i];\n        array[i] = t;\n        callback(t);\n      }\n      if (array.length) {\n        callback(array[0]);\n      }\n    },\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: function shuffle() {\n      var i, j, t;\n      for (i = array.length - 1; i > 0; --i) {\n        j = localRandom.next(i + 1); // i inclusive\n        t = array[j];\n        array[j] = array[i];\n        array[i] = t;\n      }\n      return array;\n    }\n  };\n}","map":{"version":3,"names":["module","exports","random","randomIterator","inputSeed","seed","Date","randomFunc","next","maxValue","Math","floor","nextDouble","array","customRandom","localRandom","Error","forEach","callback","i","j","t","length","shuffle"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.random/index.js"],"sourcesContent":["module.exports = {\n  random: random,\n  randomIterator: randomIterator\n};\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+ new Date());\n  var randomFunc = function() {\n      // Robert Jenkins' 32 bit integer hash function.\n      seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\n      seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n      seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\n      seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\n      seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\n      seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n      return (seed & 0xfffffff) / 0x10000000;\n  };\n\n  return {\n      /**\n       * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n       *\n       * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.\n       */\n      next : function (maxValue) {\n          return Math.floor(randomFunc() * maxValue);\n      },\n\n      /**\n       * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n       * This function is the same as Math.random() (except that it could be seeded)\n       */\n      nextDouble : function () {\n          return randomFunc();\n      }\n  };\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n    var localRandom = customRandom || random();\n    if (typeof localRandom.next !== 'function') {\n      throw new Error('customRandom does not match expected API: next() function is missing');\n    }\n\n    return {\n        forEach : function (callback) {\n            var i, j, t;\n            for (i = array.length - 1; i > 0; --i) {\n                j = localRandom.next(i + 1); // i inclusive\n                t = array[j];\n                array[j] = array[i];\n                array[i] = t;\n\n                callback(t);\n            }\n\n            if (array.length) {\n                callback(array[0]);\n            }\n        },\n\n        /**\n         * Shuffles array randomly, in place.\n         */\n        shuffle : function () {\n            var i, j, t;\n            for (i = array.length - 1; i > 0; --i) {\n                j = localRandom.next(i + 1); // i inclusive\n                t = array[j];\n                array[j] = array[i];\n                array[i] = t;\n            }\n\n            return array;\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}