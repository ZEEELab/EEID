{"ast":null,"code":"module.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack() {\n  this.stack = [];\n  this.popIdx = 0;\n}\nInsertStack.prototype = {\n  isEmpty: function () {\n    return this.popIdx === 0;\n  },\n  push: function (node, body) {\n    var item = this.stack[this.popIdx];\n    if (!item) {\n      // we are trying to avoid memory pressue: create new element\n      // only when absolutely necessary\n      this.stack[this.popIdx] = new InsertStackElement(node, body);\n    } else {\n      item.node = node;\n      item.body = body;\n    }\n    ++this.popIdx;\n  },\n  pop: function () {\n    if (this.popIdx > 0) {\n      return this.stack[--this.popIdx];\n    }\n  },\n  reset: function () {\n    this.popIdx = 0;\n  }\n};\nfunction InsertStackElement(node, body) {\n  this.node = node; // QuadTree node\n  this.body = body; // physical body which needs to be inserted to node\n}","map":{"version":3,"names":["module","exports","InsertStack","stack","popIdx","prototype","isEmpty","push","node","body","item","InsertStackElement","pop","reset"],"sources":["/Users/zamanlh/github/MMM_Worksheets/networksir/node_modules/ngraph.quadtreebh/insertStack.js"],"sourcesContent":["module.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressue: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA,SAASA,WAAWA,CAAA,EAAI;EACpB,IAAI,CAACC,KAAK,GAAG,EAAE;EACf,IAAI,CAACC,MAAM,GAAG,CAAC;AACnB;AAEAF,WAAW,CAACG,SAAS,GAAG;EACpBC,OAAO,EAAE,SAAAA,CAAA,EAAW;IAChB,OAAO,IAAI,CAACF,MAAM,KAAK,CAAC;EAC5B,CAAC;EACDG,IAAI,EAAE,SAAAA,CAAUC,IAAI,EAAEC,IAAI,EAAE;IACxB,IAAIC,IAAI,GAAG,IAAI,CAACP,KAAK,CAAC,IAAI,CAACC,MAAM,CAAC;IAClC,IAAI,CAACM,IAAI,EAAE;MACP;MACA;MACA,IAAI,CAACP,KAAK,CAAC,IAAI,CAACC,MAAM,CAAC,GAAG,IAAIO,kBAAkB,CAACH,IAAI,EAAEC,IAAI,CAAC;IAChE,CAAC,MAAM;MACHC,IAAI,CAACF,IAAI,GAAGA,IAAI;MAChBE,IAAI,CAACD,IAAI,GAAGA,IAAI;IACpB;IACA,EAAE,IAAI,CAACL,MAAM;EACjB,CAAC;EACDQ,GAAG,EAAE,SAAAA,CAAA,EAAY;IACb,IAAI,IAAI,CAACR,MAAM,GAAG,CAAC,EAAE;MACjB,OAAO,IAAI,CAACD,KAAK,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;IACpC;EACJ,CAAC;EACDS,KAAK,EAAE,SAAAA,CAAA,EAAY;IACf,IAAI,CAACT,MAAM,GAAG,CAAC;EACnB;AACJ,CAAC;AAED,SAASO,kBAAkBA,CAACH,IAAI,EAAEC,IAAI,EAAE;EACpC,IAAI,CAACD,IAAI,GAAGA,IAAI,CAAC,CAAC;EAClB,IAAI,CAACC,IAAI,GAAGA,IAAI,CAAC,CAAC;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}