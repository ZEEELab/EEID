{"version":3,"sources":["InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/agent.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","InfectiousMatter/LayoutComponents/byline.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["MatterCollisionEvents","name","version","for","install","matter","create","Body","body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","this","event","pairs","map","pair","trigger","bodyA","bodyB","require","Plugin","register","module","exports","uniqid","getRandomArbitrary","min","max","Math","random","Location","uuid","bounds","undefined","props","friction","occupants","border_color","prototype","draw_borders","ctx","strokeStyle","width","x","height","y","beginPath","rect","lineWidth","stroke","get_random_position","remove_agent","agent","filter","a","location","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","migrating","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","home","cohorts","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","stale","recurring","clear_events","Agent","track_all_contacts","state","interaction_callback","viva_color","events","color","home_state","masked","immunized","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","agent_size","fillStyle","fillRect","position","strokeRect","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","locationImmunity","numMasked","popSize","sim_div","useRef","setup_world","res_prop1","type","immunized_frac","res_prop2","Common","clone","res_prop3","res_prop4","res_prop5","res1","payload","residence_props","res2","res3","res4","res5","residence","num_agents","shuffle","current","agents","useEffect","simulation_params","sim_time_per_day","link_lifetime","console","log","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","INFECTED","RECOVERED","IMMUNE","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","default_infection_params","use_pathogen_contagiousness","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","e","context","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","home_color","SENSITIVE","add_location","location_properties","new_location","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","pathogen","post_infection_callback","update_org_event","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","update_colors","new_color_dict","forEach","this_loc","loc_idx","an_agent","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","node","addNode","something","get_prob_of_infection","delete_agent","Composite","remove","removeNode","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","new_migration_event","source","dest","migrating_agent","velocity","setPosition","setVelocity","useStyles","makeStyles","theme","root","minWidth","minHeight","controlls","paper","textAlign","sim_paper","paperControlls","padding","spacing","BylineComponent","Grid","container","direction","justify","alignItems","item","Avatar","src","Typography","Link","href","variant","display","date","flexGrow","headingPanel","marginTop","contentPanel","subPanel","introFooter","stickyContent","top","mask_transmission_props","self_protection","others_protection","default_infection_prob","action","random_res","new_agent","random_agent","agent_id","random_agents","from_location","to_location","cur_time","masked_list","unmasked_list","cur_num_masked","num_needing_masks","num_masked","num_to_add","pop_size","InfectiousMatterContainer","classes","useState","setLocationImmunity","maskSelfProtection","maskOthersProtection","movementScale","setMovementScale","perContactInfection","infectiousPeriodMean","setRedrawTrigger","infectAgents","numToInfect","className","onStepEnter","debug","Container","component","gutterBottom","Zoom","in","Card","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c5c1066.chunk.js","sourcesContent":["var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.props = {};\n\tthis.friction = 0.02;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\n\t\tif (this_event.stale == false) {\n\t\t\tif (this_event.recurring) {\n\t\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true, stale:false});\n\t\t\t}\n\t\t\tthis_event.callback();\n\t\t\tnum_events += 1;\n\t\t}\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\tthis.events = [];\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n\tthis.immunized = false;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.1), 1);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = 0.5;\n}\n\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, numMasked, locationImmunity, popSize}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (locationImmunity) => {\n        let res_prop1 = {\n            type: \"residence\", \n            friction: 0.05,\n            immunized_frac: locationImmunity[0],\n            bounds: {\n                min: {\n                    x: 10,\n                    y: 10,\n                },\n                max: {\n                    x: 150,\n                    y: 150,\n                }\n            }\n        };\n        let res_prop2 = Matter.Common.clone(res_prop1);\n        res_prop2.bounds.min.x = 160;\n        res_prop2.bounds.max.x = 300;\n        res_prop2.immunized_frac = locationImmunity[1];\n\n        let res_prop3 = Matter.Common.clone(res_prop1);\n        res_prop3.bounds.min.x = 310;\n        res_prop3.bounds.max.x = 450;\n        res_prop3.immunized_frac = locationImmunity[2];\n        \n        let res_prop4 = Matter.Common.clone(res_prop1);\n        res_prop4.bounds.min.x = 460;\n        res_prop4.bounds.max.x = 600;\n        res_prop4.immunized_frac = locationImmunity[3];\n\n        let res_prop5 = Matter.Common.clone(res_prop1);\n        res_prop5.bounds.min.x = 610;\n        res_prop5.bounds.max.x = 750;\n        res_prop5.immunized_frac = locationImmunity[4];\n\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop1}});\n        let res2 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop2}});\n        let res3 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop3}});\n        let res4 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop4}});\n        let res5 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop5}});\n\n        //TODO: add popSize agents...\n        //let agent_callback = (t_agent) => {}\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res2, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res3, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res4, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res5, num_agents: popSize/5}});        \n\n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 1000,\n            agent_size: 2,\n            link_lifetime: 200,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 1.0,\n        };\n  \n        let grey_simulation_colors = {\n            viva_colors: [0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff],\n            matter_colors: [\"darkgrey\",\"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, grey_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(locationImmunity);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(locationImmunity);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:160, width:'auto'}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    INFECTED: 1,\n    RECOVERED: 2,\n    IMMUNE:3,\n    size: 4\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:2000,\n    agent_size: 3,\n    link_lifetime: 4000,\n    pathogen_mut_prob: 0.1\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: false\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                /* this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                }); */\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true, stale:false})\n\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    switch(new_state) {\n        case AgentStates.INFECTED:\n            stroke_color = \"red\";\n            org.render.fillStyle = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"red\";\n            org.render.fillStyle = org.agent_object.home_color;\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            stroke_color = \"black\";\n            org.render.lineWidth = 3;\n            break;\n        case AgentStates.IMMUNE:\n            stroke_color = \"grey\";\n        };\n\n    org.render.strokeStyle = stroke_color;\n    \n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n    new_location.immunized_frac = location_properties.immunized_frac || 0.00;\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root');\n    }\n\n    this.update_org_state(org, AgentStates.INFECTED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n    let days_to_recover = Math.max(jStat.exponential.sample(1/this.infection_params.infectious_period_mu), 3);\n\n    let update_org_event = {\n        time: days_to_recover*this.simulation_params.sim_time_per_day,\n        callback: () => {\n            this.update_org_state(org, AgentStates.RECOVERED);\n        },\n        stale: false\n    }\n    this.add_event(update_org_event);\n    org.agent_object.events.push(update_org_event)\n};\n\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n}\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge),\n                stale: false\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.update_colors = function(new_color_dict) {\n    this.simulation_colors = Matter.Common.extend(this.simulation_colors, new_color_dict);\n    console.log(this.simulation_colors);\n    //new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    //new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n    this.locations.forEach( (this_loc, loc_idx) => {\n        this_loc.home_color = this.simulation_colors.matter_colors[loc_idx];\n        this_loc.viva_node_color = this.simulation_colors.viva_colors[loc_idx];\n    });\n\n    this.agents.forEach( (an_agent) => {\n        an_agent.home_color = an_agent.location.home_color;\n        //set their fill, then re-call updateState with the same state...\n        an_agent.body.render.fillStyle = an_agent.home_color;\n        this.update_org_state(an_agent.body, an_agent.state);\n    });\n}\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if (other_agent.state == AgentStates.INFECTED && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    this.expose_org(this_agent_body, AgentStates.INFECTED, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n                this.add_event( {\n                    time: this.simulation_params.link_lifetime+1, \n                    callback: this._check_edge_for_removal(this_edge),\n                    stale: false\n                });\n            }\n\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {something:true});\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.color = home_location.home_color || \"black\";\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color;\n    new_agent_body.render.fillStyle =  new_agent_body.agent_object.color;\n    \n    home_location.add_agent(new_agent_body.agent_object);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n    \n    return(new_agent_body);\n};\n\nInfectiousMatter.prototype.delete_agent = function(an_agent) {\n\n    this.agents = this.agents.filter(function(a) {\n\t\treturn (a !== an_agent)\n    });\n\n    Matter.Composite.remove(this.matter_engine.world, an_agent.body);\n    ContactGraph.removeNode(an_agent.uuid);\n\n    \n    this.state_counts[an_agent.state] -= 1;\n\n    //set events associated with this agent to stale\n    an_agent.events.forEach((event) => {event.stale = true;})\n\n    //remove it from it's location\n    an_agent.location.remove_agent(an_agent);\n}\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 200; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Link from '@material-ui/core/Link';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth:300,\n        minHeight:300,\n    }, \n    controlls: {\n      width:300,\n    },\n    paper: {\n      height: 300,\n      width: 300,\n      textAlign: 'center',\n    },\n    sim_paper: {\n      height:160,\n      width:760,\n      textAlign: 'center'\n    },\n    paperControlls: {\n      minHeight: 300,\n      minWidth: 300,\n      textAlign: 'center',\n      padding: theme.spacing(1)\n    }\n  }));\n\n  const BylineComponent = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={3}>\n            <Grid item>\n                <Avatar src=\"static/lz_small.png\" />\n            </Grid>\n            <Grid item>\n                <Typography>\n                    <Link color=\"inherit\" href=\"https://infectiousmatter.com/index.html#about_me\">Luis Zaman</Link>\n                </Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"overline\" display=\"block\">{props.date}</Typography>\n            </Grid>\n        </Grid>\n\n    )\n  };\nexport default BylineComponent;\n\n","import React, { useRef, useEffect, useReducer, useState, useLayoutEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Zoom from '@material-ui/core/Zoom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, { AgentStates, ContactGraph } from './InfectiousMatterSimulation.js';\n//import InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\n//import InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport BylineComponent from '../InfectiousMatter/LayoutComponents/byline.js';\nimport Link from '@material-ui/core/Link';\n\nimport { Scrollama, Step } from 'react-scrollama';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth: 800,\n    position: 'relative',\n  },\n  headingPanel: {\n    height: \"100vh\",\n    minHeight: \"600px\",\n    marginTop: \"50vh\",\n  },\n  contentPanel: {\n    height: \"100vh\",\n    minHeight: \"200px\",\n  },\n  subPanel: {\n    height: \"20vh\",\n    minHeight:300,\n  },\n  introFooter: {\n    marginTop: \"10vh\",\n  },\n  stickyContent: {\n    position: \"sticky\",\n    top: 0,\n  },\n  sim_paper: {\n    height: 160,\n    width: 760,\n    textAlign: 'center'\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection: 0.05, others_protection: 0.5 };\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function (agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  if (agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.self_protection) * (1 - this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked && !agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked && !agent_b_body.agent_object.masked)\n    return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_infection_params') {\n    if (action.payload.per_contact_infection) {\n      InfectiousMatterRef.current.infection_params.per_contact_infection = action.payload.per_contact_infection;\n    }\n    if (action.payload.infectious_period_mu) {\n      InfectiousMatterRef.current.infection_params.infectious_period_mu = action.payload.infectious_period_mu;\n    }\n  };\n  if (action.type == 'update_mask_transmission_params') {\n    if (action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if (action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if (action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_random_agent') {\n    let random_res = Matter.Common.choose(InfectiousMatterRef.current.locations);\n    let new_agent = InfectiousMatterRef.current.add_agent(random_res);\n\n    //make new agent immune\n    if (Matter.Common.random(0, 1) < random_res.immunized_frac) {\n      InfectiousMatterRef.current.update_org_state(new_agent, AgentStates.IMMUNE);\n    };\n\n    if (action.payload && action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object);\n    }\n  }\n\n  if (action.type == 'remove_random_agent') {\n    let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n    InfectiousMatterRef.current.delete_agent(random_agent);\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i = 0; i < action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n        if (Matter.Common.random(0, 1) < action.payload.residence.immunized_frac) {\n          InfectiousMatterRef.current.update_org_state(new_agent, AgentStates.IMMUNE);\n        };\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object);\n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map((agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach((agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map((loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach((loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if (action.payload.num_agents) {\n      for (let i = 0; i < action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.INFECTED);\n      }\n    }\n  }\n\n  if (action.type == 'infect_random_agent_everywhere') {\n    if (action.payload.num_agents) {\n      InfectiousMatterRef.current.locations.forEach((loc) => {\n        let random_agents = loc.try_getting_random_residents(action.payload.num_agents * 2);\n        for (let i = 0; i < action.payload.num_agents; i++) {\n          InfectiousMatterRef.current.expose_org(random_agents[i].body, AgentStates.INFECTED);\n        }\n      });\n    }\n  }\n\n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return { state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time / InfectiousMatterRef.current.simulation_params.sim_time_per_day };\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list = [];\n    let unmasked_list = [];\n    InfectiousMatterRef.current.agents.forEach((agent) => {\n      if (agent.masked) {\n        masked_list.push(agent);\n      }\n      else {\n        unmasked_list.push(agent);\n      }\n    });\n\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for (let i = 0; i < num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for (let i = 0; i < -num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n  }\n\n  if (action.type == \"set_pop_size\") {\n    //target pop size - current pop size:\n    let num_to_add = action.payload.pop_size - InfectiousMatterRef.current.agents.length;\n\n    if (num_to_add > 0) {\n      for (let i = 0; i < num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, { type: 'add_random_agent' });\n      }\n    } else if (num_to_add < 0) {\n      for (let i = 0; i < -num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, { type: 'remove_random_agent' });\n      }\n    }\n\n  };\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n\n  const [locationImmunity, setLocationImmunity] = useState([0.1, 0.3, 0.5, 0.7, 0.9]);\n  const [numMasked, setNumMasked] = useState(0);\n  const [popSize, setPopSize] = useState(600);\n\n  const [maskSelfProtection, setMaskSelfProtection] = useState(0.05);\n  const [maskOthersProtection, setMaskOthersProtection] = useState(0.5);\n  const [movementScale, setMovementScale] = useState(2.0);\n\n  const [perContactInfection, setPerContactInfection] = useState(0.5);\n  const [infectiousPeriodMean, setInfectiousPeriodMean] = useState(5);\n\n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  /* This is a bit annoying because immunity is being changed in the setup of the simulator\n  which means we have to re-draw the element, and using the API doesn't make sense for these\n  kinds of actions...\n\n  I guess the right way would be to use useEffect and trigger on locationImmunity changes.\n  */\n  const resetImmunity = (immunity_values) => {\n    setLocationImmunity(immunity_values);\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'reset_simulator' });\n    setRedrawTrigger(c => c + 1);\n  };\n\n\n  const resetSimulation = (e) => {\n    setLocationImmunity([0.1, 0.3, 0.5, 0.7, 0.9]);\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'reset_simulator' });\n    setRedrawTrigger(c => c + 1);\n  };\n\n  const infectAgents = (numToInfect) => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      {\n        type: 'infect_random_agent_everywhere',\n        payload: {\n          num_agents: numToInfect\n        }\n      });\n  };\n\n  //TODO All simulation changes in this code...\n  const onStepEnter = ({ element, data, direction }) => {\n    console.log(data);\n    \n    if (data == \"infect_agents\") {\n      infectAgents(1);\n    }\n    if (data == \"infect_3_agents\") {\n      infectAgents(3);\n    }\n    if (data == \"movement_reinfect\") {\n      resetSimulation(\"none\");\n      setMovementScale(4);\n    }\n    if (data == \"single_immunity\") {\n      resetImmunity([0.5, 0.5, 0.5, 0.5, 0.5]);\n      setMovementScale(1.5);\n    }\n\n  };\n\n  function handlePopSizeSliderChange(event, newValue) {\n    setPopSize(newValue);\n  }\n\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_infection_params', payload: { per_contact_infection: perContactInfection } });\n  }, [perContactInfection])\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_infection_params', payload: { infectious_period_mu: infectiousPeriodMean } });\n  }, [infectiousPeriodMean])\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_mask_transmission_params', payload: { self_protection: maskSelfProtection } });\n  }, [maskSelfProtection])\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_mask_transmission_params', payload: { others_protection: maskOthersProtection } });\n  }, [maskOthersProtection])\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_movement_scale', payload: { movement_scale: movementScale } });\n  }, [movementScale])\n\n  useEffect(() => {\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'set_num_mask', payload: { num_masked: numMasked } });\n  }, [numMasked]);\n\n  useEffect(() => {\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'set_pop_size', payload: { pop_size: popSize } });\n    setWorldReadyTrigger(c => c + 1);\n  }, [popSize]);\n\n  return (\n  <div className=\"App\">\n    <Scrollama onStepEnter={onStepEnter} debug>\n      <Step data={1} key={1}>\n        <Container className={classes.headingPanel}>\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n            Our Race Towards Herd Immunity\n          </Typography>\n\n          <BylineComponent date=\"April 11th, 2021\" />\n\n          <Zoom in={true}>\n            <Container className={classes.introFooter}>\n                <Typography variant=\"h5\" gutterBottom>\n                  A year ago, I built <Link color=\"inherit\" href=\"https://infectiousmatter.com\">InfectiousMatter</Link> to help folks gain an intuition for disease transmission dynamics without having to wait and\n                  learn from our own mistakes. A year later, we've all unfortunately learned more than expected.\n                </Typography>\n\n                <Link color=\"inherit\" href=\"https://infectiousmatter.com\">\n                  <img src=\"static/teaser.png\" height=\"300\" />\n                </Link>\n            </Container>\n          </Zoom>\n\n        </Container>\n      </Step>\n\n      <Step data={2} key={2}>\n        <Container className={classes.contentPanel}>\n\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom className={classes.contentPanel}>\n              Now we have multiple vaccines being administered around the world at (all things considered) incredible speeds. We're truely racing\n              towards <i>herd immunity</i>. But how fast we get there and how many lives are saved along the way depend on\n              the decisions we collectively make in the next few months.\n            </Typography>\n          </Container>\n\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom className={classes.contentPanel}>\n              At the start of (and throughout) the pandemic, limiting transmission has been critical to avoiding overwhelming our\n              healthcare systems. Of course that is still the case, but now we have even more to gain (or to lose) by making\n              hard choices in our final push towards a return to normalcy.\n            </Typography>\n          </Container>\n        </Container>\n      </Step>\n\n      <Step data={3} key={3}>\n        <Container className={classes.stickyContent}>\n          <Grid container direction=\"row\" justify=\"center\" className={classes.root} spacing={3}>\n            <Grid item>\n              <Card className={classes.sim_paper}>\n                <InfectiousMatterSimulation\n                  InfectiousMatterRef={InfectiousMatterRef}\n                  InfectiousMatterAPI={InfectiousMatterAPI}\n                  redraw_trigger={redraw_trigger}\n                  setWorldReadyTrigger={setWorldReadyTrigger}\n                  numMasked={numMasked}\n                  locationImmunity={locationImmunity}\n                  popSize={popSize}\n                />\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      </Step>\n\n      <Step data={\"infect_agents\"} key={4}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            TODO Trigger 1: Automatically infect someone in each location\n          </Typography>\n        </Container>\n      </Step>\n\n      <Step data={\"movement_reinfect\"} key={5}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            TODO Trigger 2: Show how increasing agent movement increases spread across the board\n          </Typography>\n        </Container>\n      </Step>\n      <Step data={\"infect_agents\"} key={12}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            and infect...\n          </Typography>\n        </Container>\n      </Step>\n\n      <Step data={\"single_immunity\"} key={6}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            TODO Trigger 3: Focus on one level of immunity (say, 50%?) -- show how it's a stochastic process\n          </Typography>\n        </Container>\n      </Step>\n      <Step data={\"infect_agents\"} key={17}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            trigger infecton -- \n          </Typography>\n        </Container>\n      </Step>\n      <Step data={\"single_immunity\"} key={8}>\n        <Container className={classes.subPanel}>\n          <Typography>\n            TODO Trigger 3: show how increasing number of infections increases probability of epidemic, even with higher levels of immunity\n          </Typography>\n        </Container>\n      </Step>\n      <Step data={\"infect_3_agents\"} key={7}>\n        <Container className={classes.contentPanel}>\n          <Typography>\n            TODO Trigger 3: show how increasing number of infections increases probability of epidemic, even with higher levels of immunity\n          </Typography>\n        </Container>\n      </Step>\n      \n\n\n    </Scrollama>\n\n</div>)\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}