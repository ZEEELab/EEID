{"version":3,"sources":["InfectiousMatter/MatterCollisionEvents.js","InfectiousMatter/location.js","InfectiousMatter/cohort.js","InfectiousMatter/event_queue.js","InfectiousMatter/agent.js","InfectiousMatter/pathogen.js","SimComponents/InfectiousMatterSimulation.js","InfectiousMatter/simulation.js","InfectiousMatter/LayoutComponents/byline.js","SimComponents/InfectiousMatterContainer.js","index.js"],"names":["MatterCollisionEvents","name","version","for","install","matter","create","Body","body","apply","arguments","onCollide","cb","_mceOC","onCollideEnd","_mceOCE","onCollideActive","_mceOCA","after","Events","on","this","event","pairs","map","pair","trigger","bodyA","bodyB","require","Plugin","register","module","exports","uniqid","getRandomArbitrary","min","max","Math","random","Location","uuid","bounds","undefined","props","friction","occupants","border_color","prototype","draw_borders","ctx","strokeStyle","width","x","height","y","beginPath","rect","lineWidth","stroke","get_random_position","remove_agent","agent","filter","a","location","set_bounds","migrate_to","destination","callback","add_agent","try_getting_random_residents","num_to_get","arr","to_return","i","temp_a","floor","length","migrating","push","Cohort","members","move_cohort","callback_for_agent","send_cohort_home","home","cohorts","FastPriorityQueue","assert","EventQueue","fast_queue","b","time","add_event","cur_sim_time","q_event","original_time","add","run_events_fired","event_limit","num_events","peek","this_event","poll","stale","recurring","clear_events","Agent","track_all_contacts","state","interaction_callback","viva_color","events","color","home_state","masked","immunized","add_body","register_interaction_callback","handle_agent_contact","other_agent","draw_mask","agent_size","fillStyle","fillRect","position","strokeRect","_mutate_random","new_color","color_float","jStat","exponential","sample","new_contagiousness","contagiousness","normal","Pathogen","parent","mutation_function","get_offspring","mut_rate","new_pathogen","Matter","InfectiousMatterSimulation","InfectiousMatterRef","InfectiousMatterAPI","redraw_trigger","setWorldReadyTrigger","locationImmunity","popSize","sim_div","useRef","setup_world","res_prop1","type","immunized_frac","res_prop2","Common","clone","res_prop3","res_prop4","res_prop5","res1","payload","residence_props","res2","res3","res4","res5","residence","num_agents","shuffle","current","agents","useEffect","simulation_params","sim_time_per_day","link_lifetime","console","log","InfectiousMatter","per_contact_infection","incubation_period_mu","incubation_period_sigma","infectious_period_mu","infectious_period_sigma","fraction_asymptomatic","asymptomatic_infectious_period_mu","asymptomatic_infectious_period_sigma","fraction_seek_care","fraction_isolate","time_to_seek_care","movement_scale","viva_colors","matter_colors","useLayoutEffect","c","ref","style","use","_seed","_random_fn","_Viva","ContactGraph","Graph","graph","colormap","pathogen_color_range","nshades","format","alpha","interpolate","AgentStates","SUSCEPTIBLE","INFECTED","RECOVERED","IMMUNE","size","Engine","Render","World","Bodies","Mouse","Bounds","MouseConstraint","default_simulation_params","pathogen_mut_prob","default_infection_params","use_pathogen_contagiousness","default_simulation_colors","run_headless","infection_params","simulation_colors","extend","matter_world","headless","matter_engine","positionIterations","velocityIterations","constraintIterations","world","gravity","event_queue","migration_graph","setup_renderer","div_ref","_div","matter_render","element","engine","options","offsetHeight","offsetWidth","background","wireframes","mouse","canvas","mouseConstraint","constraint","stiffness","render","visible","removeEventListener","mousewheel","run","timelimit","t","choose","update","timing","timestamp","setup_matter_env","clear","locations","location_uuid_hash","state_counts","e","context","pulse_orgs_event","update_org_state","org","new_state","old_state","agent_object","stroke_color","home_color","SENSITIVE","add_location","location_properties","new_location","viva_node_color","add_cohort","new_cohort","assign_cohort","cohort","expose_org","eventual_infected_state","infecting_agent","pathogen","post_infection_callback","update_org_event","register_infection_callback","_check_edge_for_removal","edge","data","removeLink","update_colors","new_color_dict","forEach","this_loc","loc_idx","an_agent","calc_prob_infection","agent_a_body","agent_b_body","_default_interaction_callback","this_agent_body","this_edge","hasLink","hasNode","addLink","origin","home_location","agent_state","loc","new_agent_body","circle","plugin","wrap","frictionAir","restitution","node","addNode","something","get_prob_of_infection","delete_agent","Composite","remove","removeNode","q_item","set_agent_contact_callback","agent_contact_callback","clear_simulator","remove_simulator","stop","textures","temp_agent","applyForce","get_migration_links","forEachLink","link","from_uuid","fromId","to_uuid","toId","add_migration_link","from_location_uuid","to_location_uuid","num_agents_per_day","existing_edge","remove_migration_link","new_migration_event","source","dest","migrating_agent","velocity","setPosition","setVelocity","useStyles","makeStyles","theme","root","minWidth","minHeight","controlls","paper","textAlign","sim_paper","paperControlls","padding","spacing","BylineComponent","Grid","container","direction","justify","alignItems","item","Avatar","src","Typography","Link","href","variant","display","date","flexGrow","headingPanel","marginTop","contentPanel","subPanel","introFooter","stickyContent","top","zIndex","topPadding","justifyContent","marginBottom","slider","controlCard","margin","sim_card","mask_transmission_props","self_protection","others_protection","default_infection_prob","action","random_res","new_agent","random_agent","agent_id","random_agents","from_location","to_location","cur_time","masked_list","unmasked_list","cur_num_masked","num_needing_masks","num_masked","num_to_add","pop_size","InfectiousMatterContainer","classes","useState","setLocationImmunity","movementScale","setMovementScale","setRedrawTrigger","setReveal_1","setReveal_2","reveal_3","setReveal_3","resetImmunity","immunity_values","resetSimulation","infectAgents","numToInfect","className","offset","onStepEnter","Container","component","gutterBottom","Grow","in","subPanels","Zoom","Card","elevation","List","dense","ListSubheader","ListItem","ListItemText","ListItemSecondaryAction","Slider","value","valueLabelDisplay","onChange","newValue","step","Divider","primary","secondary","IconButton","onClick","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1de47e7.chunk.js","sourcesContent":["var Matter = require('matter-js');\nvar MatterCollisionEvents = {\n  name: 'matter-collision-events',\n  version: '0.1.5',\n  for: 'matter-js@^0.12.0',\n  install: function(matter) {\n    // add the onCollide, onCollideEnd, and onCollideActive callback handlers\n    // to the native Matter.Body created\n    var create = matter.Body.create;\n    matter.Body.create = function() {\n      var body = create.apply(null, arguments);\n      body.onCollide = function(cb) { body._mceOC = cb; }\n      body.onCollideEnd = function(cb) { body._mceOCE = cb; }\n      body.onCollideActive = function(cb) { body._mceOCA = cb; }\n      return body;\n    }\n    matter.after('Engine.create', function() {\n      matter.Events.on(this, 'collisionStart', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollide', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollide', { pair : pair });\n          pair.bodyA._mceOC &&\n            pair.bodyA._mceOC(pair)\n          pair.bodyB._mceOC &&\n            pair.bodyB._mceOC(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionActive', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(\n            pair.bodyA,\n            'onCollideActive',\n            { pair: pair }\n          );\n          matter.Events.trigger(\n            pair.bodyB,\n            'onCollideActive',\n            { pair: pair }\n          );\n          pair.bodyA._mceOCA &&\n            pair.bodyA._mceOCA(pair)\n          pair.bodyB._mceOCA &&\n            pair.bodyB._mceOCA(pair)\n        });\n      });\n\n      matter.Events.on(this, 'collisionEnd', function(event) {\n        event.pairs.map(function(pair) {\n          matter.Events.trigger(pair.bodyA, 'onCollideEnd', { pair : pair });\n          matter.Events.trigger(pair.bodyB, 'onCollideEnd', { pair : pair });\n          pair.bodyA._mceOCE &&\n            pair.bodyA._mceOCE(pair)\n          pair.bodyB._mceOCE &&\n            pair.bodyB._mceOCE(pair)\n        });\n      });\n    });\n  },\n};\n\nMatter.Plugin.register(MatterCollisionEvents);\nmodule.exports.MatterCollisionEvents = MatterCollisionEvents;\n","var uniqid = require(\"uniqid\");\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomChoice(arr) {\n    return arr[Math.floor(arr.length * Math.random())];\n}\n\nfunction Location(name) {\n\tthis.name = name;\n\tthis.uuid = uniqid();\n\tthis.bounds = undefined;\n\tthis.props = {};\n\tthis.friction = 0.02;\n\tthis.occupants = [];\n\tthis.border_color = undefined;\n}\n\nLocation.prototype.draw_borders = function(ctx, strokeStyle) {\n\tif (!strokeStyle || !this.border_color){\n\t\tstrokeStyle = \"black\";\n\t} else {\n\t\tstrokeStyle = strokeStyle || this.border_color;\n\t}\n\n\n\tlet width = this.bounds.max.x - this.bounds.min.x;\n\tlet height = this.bounds.max.y - this.bounds.min.y;\n\n\tctx.beginPath();\n\tctx.rect(this.bounds.min.x-2, this.bounds.min.y-2, width+4, height+4);\n\tctx.strokeStyle = strokeStyle;\n\tctx.lineWidth = 2;\n\tctx.stroke();\n};\n\nLocation.prototype.get_random_position = function() {\n\tif(this.bounds){\n\t\treturn {\n\t\t\tx: getRandomArbitrary(this.bounds.min.x, this.bounds.max.x),\n\t\t\ty: getRandomArbitrary(this.bounds.min.y, this.bounds.max.y)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: 0, \n\t\t\ty: 0\n\t\t}\n\t}\n};\n\nLocation.prototype.remove_agent =function(agent) {\n\tthis.occupants = this.occupants.filter(function(a) {\n\t\treturn (a !== agent)\n\t});\n\tagent.location = undefined;\n};\n\nLocation.prototype.set_bounds = function(bounds) {\n\tthis.bounds = bounds;\n};\n\nLocation.prototype.migrate_to = function(destination, agent, callback) {\n\tthis.remove_agent(agent);\n\tdestination.add_agent(agent);\n\n\tif(callback) {\n\t\tcallback(agent);\n\t}\n};\n\nLocation.prototype.try_getting_random_residents = function(num_to_get) {\n\tlet to_return = [];\n\tfor (let i=0; i<num_to_get; i++) {\n\t\tlet temp_a = getRandomChoice(this.occupants);\n\t\tif(temp_a && temp_a.migrating == false) {\n\t\t\tto_return.push(temp_a);\n\t\t}\n\t}\n\n\treturn to_return;\n\n}\n\nLocation.prototype.add_agent = function(agent) {\n\tthis.occupants.push(agent);\n\tagent.location = this;\n};\n\nmodule.exports = Location;","function Cohort() {\n\tthis.members = [];\n}\n\nCohort.prototype.move_cohort = function(destination, callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(destination, agent, callback_for_agent);\n\t}\n};\n\nCohort.prototype.send_cohort_home = function(callback_for_agent) {\n\tfor (let i=0; i < this.members.length; i++) {\n\t\tlet agent = this.members[i];\n\t\tagent.location.migrate_to(agent.home, agent, callback_for_agent)\n\t}\n};\n\nCohort.prototype.add_agent = function(agent, callback) {\n\tthis.members.push(agent);\n\tagent.cohorts.push(this);\n\t\n\tif (callback) callback(agent);\n};\n\nmodule.exports = Cohort;","let FastPriorityQueue = require('fastpriorityqueue');\nlet assert = require('assert');\n\n\nfunction EventQueue() {\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n}\n\nEventQueue.prototype.add_event = function(cur_sim_time, q_event) {\n\tassert(q_event.time && q_event.callback);\n\tq_event.original_time = q_event.time;\n\tq_event.time += cur_sim_time;\n\tthis.fast_queue.add(q_event);\n};\n\nEventQueue.prototype.run_events_fired = function(cur_sim_time, event_limit) {\n\tlet num_events = 0;\n\twhile (this.fast_queue.peek() && this.fast_queue.peek().time < cur_sim_time && num_events < event_limit){\n\t\tvar this_event = this.fast_queue.poll();\n\n\t\tif (this_event.stale == false) {\n\t\t\tif (this_event.recurring) {\n\t\t\t\tthis.add_event(cur_sim_time, {time:this_event.original_time, callback:this_event.callback, recurring:true, stale:false});\n\t\t\t}\n\t\t\tthis_event.callback();\n\t\t\tnum_events += 1;\n\t\t}\n\t}\n};\n\nEventQueue.prototype.clear_events = function() {\n\tthis.fast_queue = null;\n\tthis.fast_queue = new FastPriorityQueue(function(a,b) {\n\t\treturn a.time < b.time;\n\t});\n};\n\n\n\nmodule.exports = EventQueue;","var uniqid = require(\"uniqid\");\n\n//TODO: Add multiple graphs, and subscribe events to them\n//TODO: \n\nfunction Agent(body) {\n\tthis.track_all_contacts = true;\n\tthis.state = undefined;\n\tthis.body = body;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid();\n\tthis.viva_color = undefined;\n\tthis.events = [];\n\n\tthis.location = undefined;\n\tthis.home = undefined;\n\tthis.cohorts = [];\n\tthis.color = undefined;\n\tthis.home_state = {};\n\tthis.migrating = false;\n\tthis.masked = false;\n\tthis.immunized = false;\n}\n\nAgent.prototype.add_body = function(body) {\n\tthis.body = body;\n}\n\nAgent.prototype.register_interaction_callback = function (interaction_callback) {\n\tthis.interaction_callback = interaction_callback;\n}\n\nAgent.prototype.handle_agent_contact = function(other_agent) {\n\tthis.interaction_callback(other_agent);\n}\n\nAgent.prototype.draw_mask = function(ctx, agent_size) {\n\tctx.fillStyle = \"#FFFFFF\";\n\tctx.strokeStyle=\"#000000\";\n\tctx.lineWidth = 1;\n\tctx.fillRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.strokeRect(this.body.position.x-agent_size, this.body.position.y, agent_size*2, agent_size-1);\n\tctx.stroke()\n\n}\n\nmodule.exports = Agent;\n","import { jStat } from 'jstat';\n\nvar uniqid = require(\"uniqid\");\n\n\n\nlet _mutate_random = function(other_agent) {\n\tlet new_color = other_agent.color_float + jStat.exponential.sample(8);\n\tlet new_contagiousness = Math.min(other_agent.contagiousness + jStat.normal.sample(0, 0.1), 1);\n\n\tnew_color = new_color % 1;\n\t//new_color = Math.random();\n\n\tthis.color_float = new_color;\n\tthis.contagiousness = new_contagiousness;\n}\n\nfunction Pathogen(color, parent) {\n\tthis.parent = undefined;\n\tthis.interaction_callback = undefined;\n\tthis.uuid = uniqid()  ;\n\tthis.color_float = color || Math.random();\n\tthis.mutation_function = _mutate_random;\n\tthis.contagiousness = 0.5;\n}\n\nPathogen.prototype.get_offspring = function(mut_rate) {\n\tlet offspring_color = this.color_float;\n\tlet new_pathogen = new Pathogen(offspring_color);\n\n\tif (Math.random() < mut_rate && this.mutation_function) {\n\t\tnew_pathogen.mutation_function(this);\n\t}\n\treturn new_pathogen;\n};\n\nexport default Pathogen;\n","import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport {InfectiousMatter, AgentStates, ContactGraph} from '../InfectiousMatter/simulation.js';\nconst Matter = require('matter-js');\nconst Viva = require('vivagraphjs');\n\n\nconst InfectiousMatterSimulation = ({InfectiousMatterRef, InfectiousMatterAPI, redraw_trigger, setWorldReadyTrigger, locationImmunity, popSize}) => {\n    const sim_div = useRef(null);\n\n    const setup_world = (locationImmunity) => {\n        let res_prop1 = {\n            type: \"residence\", \n            friction: 0.05,\n            immunized_frac: locationImmunity[0],\n            bounds: {\n                min: {\n                    x: 10,\n                    y: 10,\n                },\n                max: {\n                    x: 150,\n                    y: 150,\n                }\n            }\n        };\n        let res_prop2 = Matter.Common.clone(res_prop1);\n        res_prop2.bounds.min.x = 160;\n        res_prop2.bounds.max.x = 300;\n        res_prop2.immunized_frac = locationImmunity[1];\n\n        let res_prop3 = Matter.Common.clone(res_prop1);\n        res_prop3.bounds.min.x = 310;\n        res_prop3.bounds.max.x = 450;\n        res_prop3.immunized_frac = locationImmunity[2];\n        \n        let res_prop4 = Matter.Common.clone(res_prop1);\n        res_prop4.bounds.min.x = 460;\n        res_prop4.bounds.max.x = 600;\n        res_prop4.immunized_frac = locationImmunity[3];\n\n        let res_prop5 = Matter.Common.clone(res_prop1);\n        res_prop5.bounds.min.x = 610;\n        res_prop5.bounds.max.x = 750;\n        res_prop5.immunized_frac = locationImmunity[4];\n\n\n        let res1 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop1}});\n        let res2 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop2}});\n        let res3 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop3}});\n        let res4 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop4}});\n        let res5 = InfectiousMatterAPI(InfectiousMatterRef, {type:'add_location', payload:{residence_props: res_prop5}});\n\n        //TODO: add popSize agents...\n        //let agent_callback = (t_agent) => {}\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res1, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res2, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res3, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res4, num_agents: popSize/5}});        \n        InfectiousMatterAPI(InfectiousMatterRef, {type:'add_agents', payload:{residence: res5, num_agents: popSize/5}});        \n\n        //shuffle the agents\n        Matter.Common.shuffle(InfectiousMatterRef.current.agents);\n    };\n\n    useEffect(() => {\n\n        let world_params = {\n            num_residences: 1,\n            residence_options: [],\n            pop_size: 20,\n            num_to_infect: 2,\n            num_visitors: 0,\n            residence_size: 100,\n            residence_padding: 20\n        \n        };\n        \n        let simulation_params = {\n            sim_time_per_day: 1000,\n            agent_size: 2,\n            link_lifetime: 200,\n        };\n        simulation_params.link_lifetime = 7*simulation_params.sim_time_per_day;\n        \n        var infection_params = {\n            per_contact_infection: 0.5, \n\n            incubation_period_mu: 5,\n            incubation_period_sigma: 3,\n            \n            infectious_period_mu: 7,\n            infectious_period_sigma: 4,\n            fraction_asymptomatic: 0.2,\n            \n            asymptomatic_infectious_period_mu: 1.5,\n            asymptomatic_infectious_period_sigma: 1.5,\n        \n            fraction_seek_care: 0.5,\n            fraction_isolate: 0.2,\n            time_to_seek_care: 2.5,\n            movement_scale: 1.0,\n        };\n  \n        let grey_simulation_colors = {\n            viva_colors: [0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff, 0xA9A9A9ff],\n            matter_colors: [\"darkgrey\",\"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\", \"darkgrey\"]\n        }\n\n        \n        console.log('initalizing matter')\n\n        InfectiousMatterRef.current = new InfectiousMatter(false, simulation_params, infection_params, grey_simulation_colors);\n        InfectiousMatterAPI(InfectiousMatterRef, {type:'setup_environment', payload:{sim_div:sim_div}});\n\n        setup_world(locationImmunity);\n        //InfectiousMatterAPI(InfectiousMatterRef, {type:'reset_simulator'});\n        \n    }, [])\n\n    //redraw simulation if we get the triggers\n    useLayoutEffect(()=> { \n        if(InfectiousMatterRef.current) {\n            setup_world(locationImmunity);\n            setWorldReadyTrigger( c => c+1);\n        }\n    }, [redraw_trigger])\n\n    return (\n        <div>\n            <div ref={sim_div} style={{height:160, width:'auto'}}>\n\n            </div>\n        </div>\n        \n    );\n\n};\n\nexport default InfectiousMatterSimulation;\nexport {AgentStates, ContactGraph};\n","import { jStat } from 'jstat';\nimport Pathogen from './pathogen.js';\nimport InfectiousMatterSimulation from '../SimComponents/InfectiousMatterSimulation.js';\nvar Matter = require('matter-js');\nrequire('matter-wrap');\nvar { MatterCollisionEvents } = require('./MatterCollisionEvents.js');\nMatter.use('matter-wrap', MatterCollisionEvents);\n\nMatter._seed = 2;\nMath.random = Matter.Common.random;\njStat._random_fn = Matter.Common.random;\n\nvar assert = require('assert');\n// module aliases\nlet _Viva = require('vivagraphjs');\nvar ContactGraph = new _Viva.Graph.graph();\n\nvar Location = require('./location.js');\nvar Cohort = require('./cohort.js');\nvar EventQueue = require('./event_queue.js');\n\nvar Agent = require('./agent.js');\n\nlet colormap = require('colormap')\nlet colors = colormap( {\n    colormap: 'chlorophyll',\n    nshades: 9,\n    format: 'hex',\n    alpha: 1\n});\n\nlet pathogen_colors = colormap({\n    colormap: 'portland',\n    nshades: 15,\n    format: 'hex',\n    alpha: 1\n})\n\nlet interpolate = require('color-interpolate');\nlet pathogen_color_range = interpolate(['white']);\n\nvar AgentStates = {\n    SUSCEPTIBLE: 0,\n    INFECTED: 1,\n    RECOVERED: 2,\n    IMMUNE:3,\n    size: 4\n};\n\nvar Engine = Matter.Engine;\nvar Render = Matter.Render;\nvar World = Matter.World;\nvar Body = Matter.Body;\nvar Bodies = Matter.Bodies;\nvar Bounds = Matter.Bounds;\nvar Mouse = Matter.Mouse;\nvar MouseConstraint = Matter.MouseConstraint;\nvar Events = Matter.Events;\n\n\nvar default_simulation_params = {\n    sim_time_per_day:2000,\n    agent_size: 3,\n    link_lifetime: 4000,\n    pathogen_mut_prob: 0.1\n};\n\nvar default_infection_params = {\n    per_contact_infection: 0.5, \n\n    incubation_period_mu: 5,\n    incubation_period_sigma: 3,\n    \n    infectious_period_mu: 7,\n    infectious_period_sigma: 4,\n    fraction_asymptomatic: 0.2,\n    \n    asymptomatic_infectious_period_mu: 1.5,\n    asymptomatic_infectious_period_sigma: 1.5,\n\n    fraction_seek_care: 0.5,\n    fraction_isolate: 0.2,\n    time_to_seek_care: 2.5,\n    movement_scale: 0.2,\n    use_pathogen_contagiousness: false\n};\n\nvar default_simulation_colors = {\n    viva_colors: [0x8B008Bff, 0x00FF00ff, 0xFFFF00ff, 0xFFA500ff, 0x0000FFff, 0xA9A9A9ff, 0xFF00FFff, 0x00CED1ff,0x98FB98ff, 0xCD853Fff],\n    matter_colors: [\"darkmagenta\", \"lime\", \"yellow\", \"orange\", \"blue\", \"darkgrey\", \"fuchsia\", \"darkturquoise\", \"palegreen\", \"peru\"]\n}\n\nfunction InfectiousMatter(run_headless, simulation_params, infection_params, simulation_colors) {   \n    this.simulation_params = Matter.Common.extend(default_simulation_params, simulation_params);\n    this.infection_params = Matter.Common.extend(default_infection_params, infection_params);\n    this.simulation_colors = Matter.Common.extend(default_simulation_colors, simulation_colors);\n    this.matter_world = World.create() \n    this.headless = run_headless || false;\n    this.pathogen_color_range = pathogen_color_range;    \n\n    console.log(\"creating infectious matter environment!\");\n\n    this.matter_engine = Engine.create({\n      positionIterations: 15, \n      velocityIterations: 15,\n      constraintIterations: 10\n    });\n\n    this.matter_engine.world.gravity.y = 0.00;\n    this.event_queue = new EventQueue();\n    this.migration_graph = new _Viva.Graph.graph()\n\n\n}\n\nInfectiousMatter.prototype.setup_renderer = function(div_ref) {\n    let _div = div_ref;\n\n    this.matter_render = Render.create({\n        element: _div,\n        engine: this.matter_engine,\n        options: {\n            height: _div.offsetHeight,\n            width: _div.offsetWidth,\n            background: 'rgba(229,229,229)',\n            wireframes: false\n        }\n    });\n\n    var mouse = Mouse.create(this.matter_render.canvas);\n    \n    this.mouseConstraint = MouseConstraint.create(this.matter_engine, {\n        mouse: mouse,\n        constraint: {\n            stiffness: 0.1,\n            render: {\n                visible: true\n            }\n        }\n    });\n    \n    mouse.element.removeEventListener(\"mousewheel\", mouse.mousewheel);\n    mouse.element.removeEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n    this.matter_render.mouse = mouse;  \n    World.add(this.matter_engine.world, this.mouseConstraint);\n    \n    Render.run(this.matter_render);\n    Engine.run(this.matter_engine);\n}\n\nInfectiousMatter.prototype.run_headless = function(timelimit) {\n\ttimelimit = timelimit || 30;\n\n\tif(this.run_headless) {\n        for(let t=0; t<timelimit*this.simulation_params.sim_time_per_day; t++) {\n\t\t\t//console.log(\"updating \" + this.cur_sim_time);\n\t\t\t//console.log(this.state_counts);\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\n            let temp_agent = Matter.Common.choose(this.agents);\n\n            //console.log(temp_agent.body.position);\n\n            Engine.update(this.matter_engine, 1000 / 60);\n            this.cur_sim_time = this.matter_engine.timing.timestamp;\n        }\n\t}\n}\n\n\nInfectiousMatter.prototype.setup_matter_env = function() {\n    ContactGraph.clear();\n    this.locations = [];\n    \n    this.migration_graph.clear();\n    this.location_uuid_hash = {};\n\n    this.agents = [];\n    this.cohorts = [];\n    this.cur_sim_time = 0;\n    this.state_counts = [];\n    this.matter_engine.timing.timestamp = 0;\n\n    for (let i=0; i<AgentStates.size; i++){\n        this.state_counts.push(0);\n    }\n\n   \n    \n    //Engine.run(this.matter_engine);\n    //Render.run(this.matter_render);\n\n    if(!this.headless) {\n\t    Events.on(this.matter_render, \"beforeRender\", (e) => {\n\t        this.cur_sim_time = e.timestamp;\n\t        this.event_queue.run_events_fired(this.cur_sim_time, 500);\n\t    });\n\n\t    Events.on(this.matter_render, \"afterRender\", (e) => {\n\t        let ctx = this.matter_render.context;\n\t        \n\t        if(ctx) {\n\t            //todo: refactor to callback\n\t            for (let i=0; i< this.locations.length; i++) {\n\t                this.locations[i].draw_borders(ctx);\n                } \n                /* this.agents.forEach( (agent) => {\n                    if(agent.masked){\n                        agent.draw_mask(ctx, this.simulation_params.agent_size);\n                    }\n                }); */\n\t        }\n\t    });\n    }\n\n    this.add_event({time: 100, callback: this.pulse_orgs_event(), recurring:true, stale:false})\n\n\n};\n\nInfectiousMatter.prototype.update_org_state = function(org, new_state) {\n    let old_state = org.agent_object.state;\n    org.agent_object.state = new_state;\n\n    if( typeof old_state !== 'undefined') this.state_counts[old_state] -= 1;\n    \n    this.state_counts[new_state] += 1;\n\n    org.render.lineWidth = 3;\n    let stroke_color = org.render.strokeStyle;\n    let viva_node_color;\n\n    //todo: refactor to callback?\n    switch(new_state) {\n        case AgentStates.INFECTED:\n            stroke_color = \"red\";\n            org.render.fillStyle = \"red\";\n            viva_node_color = 0xFF0000ff;\n            break;\n        case AgentStates.RECOVERED:\n            stroke_color = \"red\";\n            org.render.fillStyle = org.agent_object.home_color;\n            viva_node_color = 0xFFFFFFff;\n            break;\n        case AgentStates.SENSITIVE:\n            stroke_color = \"black\";\n            org.render.lineWidth = 3;\n            break;\n        case AgentStates.IMMUNE:\n            stroke_color = \"grey\";\n        };\n\n    org.render.strokeStyle = stroke_color;\n    \n    return org;\n    //viva_graphics.getNodeUI(org.agent_object.node.id).color = viva_node_color;\n};\n\nInfectiousMatter.prototype.add_location = function(name, location_properties) {\n    let new_location = new Location(name);\n    new_location.border_color = location_properties.border_color;\n    new_location.set_bounds(location_properties.bounds);\n    new_location.friction = location_properties.friction;\n    new_location.type = location_properties.type || 'none';\n    new_location.immunized_frac = location_properties.immunized_frac || 0.00;\n\n    new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n\n    this.locations.push(new_location);\n    this.location_uuid_hash[new_location.uuid] = new_location;\n    return new_location;\n};\n\nInfectiousMatter.prototype.add_cohort = function() {\n    let new_cohort = new Cohort();\n    this.cohorts.push(new_cohort);\n    return new_cohort;\n};\n\nInfectiousMatter.prototype.assign_cohort = function(org, cohort) {\n    cohort.add_agent(org.agent_object);\n};\n\nInfectiousMatter.prototype.expose_org = function(org, eventual_infected_state, infecting_agent) {\n    if (infecting_agent && infecting_agent.pathogen){ \n        org.agent_object.pathogen = infecting_agent.pathogen.get_offspring(this.simulation_params.pathogen_mut_prob);\n    } else {\n        org.agent_object.pathogen = new Pathogen(0.5, 'root');\n    }\n\n    this.update_org_state(org, AgentStates.INFECTED);\n    if (this.post_infection_callback) this.post_infection_callback(org.agent_object, infecting_agent);\n\n    let days_to_recover = Math.max(jStat.exponential.sample(1/this.infection_params.infectious_period_mu), 3);\n\n    let update_org_event = {\n        time: days_to_recover*this.simulation_params.sim_time_per_day,\n        callback: () => {\n            this.update_org_state(org, AgentStates.RECOVERED);\n        },\n        stale: false\n    }\n    this.add_event(update_org_event);\n    org.agent_object.events.push(update_org_event)\n};\n\nInfectiousMatter.prototype.register_infection_callback = function(callback) {\n    this.post_infection_callback = callback;\n}\n\nInfectiousMatter.prototype._check_edge_for_removal = function(edge) {\n    return () => {\n        if (edge.data.timestamp < this.cur_sim_time - this.simulation_params.link_lifetime) {\n            ContactGraph.removeLink(edge);\n        } \n        else {\n            this.add_event( {\n                time:(this.cur_sim_time + this.simulation_params.link_lifetime) - edge.data.timestamp,\n                callback: this._check_edge_for_removal(edge),\n                stale: false\n            }); \n        }\n    };\n};\n\nInfectiousMatter.prototype.update_colors = function(new_color_dict) {\n    this.simulation_colors = Matter.Common.extend(this.simulation_colors, new_color_dict);\n    console.log(this.simulation_colors);\n    //new_location.home_color = this.simulation_colors.matter_colors[this.locations.length];\n    //new_location.viva_node_color = this.simulation_colors.viva_colors[this.locations.length];\n    this.locations.forEach( (this_loc, loc_idx) => {\n        this_loc.home_color = this.simulation_colors.matter_colors[loc_idx];\n        this_loc.viva_node_color = this.simulation_colors.viva_colors[loc_idx];\n    });\n\n    this.agents.forEach( (an_agent) => {\n        an_agent.home_color = an_agent.location.home_color;\n        //set their fill, then re-call updateState with the same state...\n        an_agent.body.render.fillStyle = an_agent.home_color;\n        this.update_org_state(an_agent.body, an_agent.state);\n    });\n}\n\nInfectiousMatter.prototype.calc_prob_infection = function(agent_a_body, agent_b_body) {\n    return this.infection_params.per_contact_infection;\n}\n\nInfectiousMatter.prototype._default_interaction_callback  = function(this_agent_body) {\n    return (\n        (other_agent) => {\n            if (other_agent.state == AgentStates.INFECTED && \n                this_agent_body.agent_object.state == AgentStates.SUSCEPTIBLE) {\n\n                if (Matter.Common.random(0, 1) < this.calc_prob_infection(this_agent_body, other_agent.body)) {\n                    this.expose_org(this_agent_body, AgentStates.INFECTED, other_agent);\n                    //this.`post_infection_callback`(this_agent.agent_object, other_agent);\n                }\n            }\n\n            assert(other_agent.uuid && this_agent_body.agent_object.uuid)\n\n            var this_edge = ContactGraph.hasLink(this_agent_body.agent_object.uuid, other_agent.uuid) || ContactGraph.hasLink(other_agent.uuid, this_agent_body.agent_object.uuid);\n            if (this_edge){\n                this_edge.data.timestamp = this.cur_sim_time;\n            } else {\n                assert(ContactGraph.hasNode(this_agent_body.agent_object.uuid) && ContactGraph.hasNode(this_agent_body.agent_object.uuid));\n                this_edge = ContactGraph.addLink(this_agent_body.agent_object.uuid, other_agent.uuid, {origin:this_agent_body.agent_object.uuid, timestamp:this.cur_sim_time});\n                this.add_event( {\n                    time: this.simulation_params.link_lifetime+1, \n                    callback: this._check_edge_for_removal(this_edge),\n                    stale: false\n                });\n            }\n\n        }\n    );\n};\n\nInfectiousMatter.prototype.add_agent = function(home_location, agent_state=AgentStates.SUSCEPTIBLE) {\n\n    assert(home_location && home_location.get_random_position);\n\n    let loc = home_location.get_random_position();\n    //let new_agent_body = \n    let new_agent_body = Bodies.circle(loc.x, loc.y, this.simulation_params.agent_size, {plugin: {wrap: home_location.bounds}});\n\n    new_agent_body.strokeStyle = \"black\";\n    new_agent_body.lineWidth = 2;\n\n    new_agent_body.agent_object = new Agent(new_agent_body);\n    new_agent_body.frictionAir = home_location.friction;\n    new_agent_body.friction = 0;\n    new_agent_body.restitution = 1.1;\n    new_agent_body.node = ContactGraph.addNode(new_agent_body.agent_object.uuid, {something:true});\n    new_agent_body.agent_object.home = home_location;\n    new_agent_body.agent_object.color = home_location.home_color || \"black\";\n    new_agent_body.agent_object.viva_color = home_location.viva_node_color;\n    new_agent_body.render.fillStyle =  new_agent_body.agent_object.color;\n    \n    home_location.add_agent(new_agent_body.agent_object);\n\n    new_agent_body.agent_object.register_interaction_callback(this._default_interaction_callback(new_agent_body, this.get_prob_of_infection));\n\n\n    new_agent_body.onCollide( (pair) => {\n        if (pair.bodyA === new_agent_body && pair.bodyB.agent_object) {\n            pair.bodyA.agent_object.handle_agent_contact(pair.bodyB.agent_object);\n\n        } else if (pair.bodyB === new_agent_body && pair.bodyA.agent_object) {\n            pair.bodyB.agent_object.handle_agent_contact(pair.bodyA.agent_object)\n        }\n    });\n\n    World.add(this.matter_engine.world, new_agent_body);\n    this.agents.push(new_agent_body.agent_object);\n    this.update_org_state(new_agent_body, agent_state);\n    \n    return(new_agent_body);\n};\n\nInfectiousMatter.prototype.delete_agent = function(an_agent) {\n\n    this.agents = this.agents.filter(function(a) {\n\t\treturn (a !== an_agent)\n    });\n\n    Matter.Composite.remove(this.matter_engine.world, an_agent.body);\n    ContactGraph.removeNode(an_agent.uuid);\n\n    \n    this.state_counts[an_agent.state] -= 1;\n\n    //set events associated with this agent to stale\n    an_agent.events.forEach((event) => {event.stale = true;})\n\n    //remove it from it's location\n    an_agent.location.remove_agent(an_agent);\n}\n\nInfectiousMatter.prototype.add_event = function (q_item) {\n    assert(q_item.time && q_item.callback);\n    this.event_queue.add_event(this.cur_sim_time, q_item);\n};\n\nInfectiousMatter.prototype.set_agent_contact_callback = function (callback) {\n    this.agent_contact_callback = callback;\n};\n\nInfectiousMatter.prototype.clear_simulator = function() {\n    //Render.stop(this.matter_render);\n    World.clear(this.matter_engine.world);\n    Engine.clear(this.matter_engine);\n    this.event_queue.clear_events();\n}\n\nInfectiousMatter.prototype.remove_simulator = function() {\n    this.clear_simulator();\n    Render.stop();\n\n    this.matter_engine.events = {};\n    this.matter_render.canvas.remove();\n    this.matter_render.canvas = null;\n    this.matter_render.context = null;\n    this.matter_render.textures = {};\n\n    this.matter_world = null;\n    this.matter_engine = null;\n    this.event_queue = null;\n    this.matter_render = null;\n    this.mouseConstraint = null;\n}\n\nInfectiousMatter.prototype.pulse_orgs_event = function() {\n    return () => {\n        if (this.agents.length > 0) {\n            for (let i=0; i < 200; i++) {\n                let temp_agent = Matter.Common.choose(this.agents);\n                Matter.Body.applyForce(temp_agent.body, temp_agent.body.position, {\n                    x:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale),\n                    y:Matter.Common.random(-2e-5*this.infection_params.movement_scale, 2e-5*this.infection_params.movement_scale)\n                });\n            }\n        }\n    };\n};\n\nInfectiousMatter.prototype.get_migration_links = function() {\n    let to_return = []\n    this.migration_graph.forEachLink(function(link) {\n        to_return.push({from_uuid:link.fromId, to_uuid:link.toId, num_agents:link.data.num_agents});\n    });\n    return to_return;\n}\nInfectiousMatter.prototype.add_migration_link = function(from_location_uuid, to_location_uuid, num_agents_per_day) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if(existing_edge) {\n        existing_edge.data.num_agents = num_agents_per_day;\n    } else {\n        this.migration_graph.addLink(from_location_uuid, to_location_uuid, {num_agents:num_agents_per_day});\n    }\n};\nInfectiousMatter.prototype.remove_migration_link = function(from_location_uuid, to_location_uuid) {\n    var existing_edge = this.migration_graph.hasLink(from_location_uuid, to_location_uuid);\n    if (existing_edge) {\n        this.migration_graph.removeLink(existing_edge);\n    }\n};\n\n\nInfectiousMatter.prototype.new_migration_event = function() {\n    return () => {\n        this.migration_graph.forEachLink((link) => {\n            let source = this.location_uuid_hash[link.fromId];\n            let dest = this.location_uuid_hash[link.toId];\n\n            let to_migrate = source.try_getting_random_residents(link.data.num_agents);\n            to_migrate.forEach( migrating_agent => {\n                migrating_agent.home_state = {\n                    location:source, \n                    position: {...migrating_agent.body.position}, \n                    velocity: {...migrating_agent.body.velocity}\n                };\n\n                source.migrate_to(dest, migrating_agent, function(agent) {\n                    agent.body.plugin.wrap = dest.bounds;\n                    Matter.Body.setPosition(agent.body, dest.get_random_position());\n                    agent.body.frictionAir = dest.friction;\n                    agent.migrating = true;\n                });\n\n                this.add_event( {\n                    time: this.simulation_params.sim_time_per_day,\n                    callback: () => {\n                        dest.migrate_to(source, migrating_agent, (agent) => {\n                            Matter.Body.setPosition(agent.body, migrating_agent.home_state.position);\n                            agent.body.plugin.wrap = source.bounds;\n                            Matter.Body.setVelocity(agent.body, migrating_agent.home_state.velocity);\n                            agent.body.frictionAir = source.friction;\n                            agent.migrating = false;\n                        })\n                    }\n                })\n            } )\n\n            //TODO: check if this link still makes sense, if not we should remove it...\n        })\n    }\n};\n\nexport { InfectiousMatter, AgentStates, ContactGraph };\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Link from '@material-ui/core/Link';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth:300,\n        minHeight:300,\n    }, \n    controlls: {\n      width:300,\n    },\n    paper: {\n      height: 300,\n      width: 300,\n      textAlign: 'center',\n    },\n    sim_paper: {\n      height:160,\n      width:760,\n      textAlign: 'center'\n    },\n    paperControlls: {\n      minHeight: 300,\n      minWidth: 300,\n      textAlign: 'center',\n      padding: theme.spacing(1)\n    }\n  }));\n\n  const BylineComponent = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={3}>\n            <Grid item>\n                <Avatar src=\"static/lz_small.png\" />\n            </Grid>\n            <Grid item>\n                <Typography>\n                    <Link color=\"inherit\" href=\"https://infectiousmatter.com/index.html#about_me\">Luis Zaman</Link>\n                </Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"overline\" display=\"block\">{props.date}</Typography>\n            </Grid>\n        </Grid>\n\n    )\n  };\nexport default BylineComponent;\n\n","import React, { useRef, useEffect, useReducer, useState, useLayoutEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Zoom from '@material-ui/core/Zoom';\nimport Paper from '@material-ui/core/Paper';\n\nimport Grow from '@material-ui/core/Grow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport { InfectiousMatter } from '../InfectiousMatter/simulation.js';\nimport InfectiousMatterSimulation, { AgentStates, ContactGraph } from './InfectiousMatterSimulation.js';\n//import InfectiousMatterContactGraph from './InfectiousMatterContactGraph.js';\n//import InfectiousMatterPlot from './InfectiousMatterPlot.js';\nimport Matter from 'matter-js';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\n\n\nimport BylineComponent from '../InfectiousMatter/LayoutComponents/byline.js';\nimport Link from '@material-ui/core/Link';\n\nimport { Scrollama, Step } from 'react-scrollama';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 0,\n    minWidth: 600,\n  },\n  Typography: {\n\n  },\n  headingPanel: {\n    marginTop: \"50vh\",\n  },\n  contentPanel: {\n    marginTop: \"40vh\",\n    minHeight: \"80vh\",\n  },\n  subPanel: {\n    marginTop:\"10vh\",\n    minHeight: \"20vh\",\n  },\n  introFooter: {\n    marginTop: \"10vh\",\n  },\n  stickyContent: {\n    marginTop:\"3vh\",\n    position: \"sticky\",\n    top: 0,\n    zIndex:2000,\n  },\n  topPadding: {\n    marginTop:\"15px\",\n  },\n  sim_paper: {\n    height: 160,\n    width: 760,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom:\"1vh\",\n  },\n  slider: {\n    minWidth:150,\n  },\n  controlCard: {\n    minWidth:300,\n    padding:5,\n    margin:\"10vw\",\n\n  },\n  sim_card:{\n    minWidth:760,\n    padding:3,\n    zIndex:-1000,\n  }\n}));\n\nInfectiousMatter.prototype.mask_transmission_props = { self_protection: 0.05, others_protection: 0.5 };\n\n//agent_a is always a susceptable exposed to an infected (agent_b)\nInfectiousMatter.prototype.calc_prob_infection = function (agent_a_body, agent_b_body) {\n  let default_infection_prob = this.infection_params.per_contact_infection;\n  if (agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.self_protection) * (1 - this.mask_transmission_props.others_protection);\n  else if (agent_a_body.agent_object.masked && !agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.self_protection);\n  else if (!agent_a_body.agent_object.masked && agent_b_body.agent_object.masked)\n    return default_infection_prob * (1 - this.mask_transmission_props.others_protection);\n  else if (!agent_a_body.agent_object.masked && !agent_b_body.agent_object.masked)\n    return default_infection_prob;\n}\n\nconst InfectiousMatterAPI = (InfectiousMatterRef, action) => {\n  if (action.type == 'setup_environment') {\n    InfectiousMatterRef.current.setup_renderer(action.payload.sim_div.current);\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'update_infection_params') {\n    if (action.payload.per_contact_infection) {\n      InfectiousMatterRef.current.infection_params.per_contact_infection = action.payload.per_contact_infection;\n    }\n    if (action.payload.infectious_period_mu) {\n      InfectiousMatterRef.current.infection_params.infectious_period_mu = action.payload.infectious_period_mu;\n    }\n  };\n  if (action.type == 'update_mask_transmission_params') {\n    if (action.payload.self_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.self_protection = action.payload.self_protection;\n    }\n    if (action.payload.others_protection) {\n      InfectiousMatterRef.current.mask_transmission_props.others_protection = action.payload.others_protection;\n    }\n  }\n  if (action.type == 'update_movement_scale') {\n    if (action.payload.movement_scale) {\n      InfectiousMatterRef.current.infection_params.movement_scale = action.payload.movement_scale;\n    }\n  }\n  if (action.type == 'reset_simulator') {\n    InfectiousMatterRef.current.clear_simulator();\n    InfectiousMatterRef.current.setup_matter_env();\n  }\n  if (action.type == 'add_location') {\n    let res = InfectiousMatterRef.current.add_location('residence', action.payload.residence_props)\n    return res;\n  }\n  if (action.type == 'add_random_agent') {\n    let random_res = Matter.Common.choose(InfectiousMatterRef.current.locations);\n    let new_agent = InfectiousMatterRef.current.add_agent(random_res);\n\n    //make new agent immune\n    if (Matter.Common.random(0, 1) < random_res.immunized_frac) {\n      InfectiousMatterRef.current.update_org_state(new_agent, AgentStates.IMMUNE);\n    };\n\n    if (action.payload && action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object);\n    }\n  }\n\n  if (action.type == 'remove_random_agent') {\n    let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n    InfectiousMatterRef.current.delete_agent(random_agent);\n  }\n  if (action.type == 'add_agents') {\n    let new_agent = null;\n    if (action.payload.residence && action.payload.num_agents) {\n      for (let i = 0; i < action.payload.num_agents; i++) {\n        new_agent = InfectiousMatterRef.current.add_agent(action.payload.residence)\n        if (Matter.Common.random(0, 1) < action.payload.residence.immunized_frac) {\n          InfectiousMatterRef.current.update_org_state(new_agent, AgentStates.IMMUNE);\n        };\n      }\n    }\n    if (action.payload.callback && new_agent) {\n      action.payload.callback(new_agent.agent_object);\n    }\n  }\n  if (action.type == 'map_agents') {\n    return InfectiousMatterRef.current.agents.map((agent, agent_id) => action.payload.callback(agent, agent_id));\n  }\n  if (action.type == 'forEach_agents') {\n    InfectiousMatterRef.current.agents.forEach((agent) => action.payload.callback(agent));\n  }\n  if (action.type == 'map_locations') {\n    return InfectiousMatterRef.current.locations.map((loc, loc_idx) => action.payload.callback(loc, loc_idx));\n  }\n  if (action.type == 'forEach_location') {\n    InfectiousMatterRef.current.locations.forEach((loc) => action.payload.callback(loc));\n  }\n  if (action.type == 'infect_random_agents') {\n    if (action.payload.num_agents) {\n      for (let i = 0; i < action.payload.num_agents; i++) {\n        let random_agent = Matter.Common.choose(InfectiousMatterRef.current.agents);\n        InfectiousMatterRef.current.expose_org(random_agent.body, AgentStates.INFECTED);\n      }\n    }\n  }\n\n  if (action.type == 'infect_random_agent_everywhere') {\n    if (action.payload.num_agents) {\n      InfectiousMatterRef.current.locations.forEach((loc) => {\n        let random_agents = loc.try_getting_random_residents(action.payload.num_agents * 2);\n        for (let i = 0; i < action.payload.num_agents; i++) {\n          InfectiousMatterRef.current.expose_org(random_agents[i].body, AgentStates.INFECTED);\n        }\n      });\n    }\n  }\n\n  if (action.type == 'get_migration_links') {\n    return InfectiousMatterRef.current.get_migration_links();\n  }\n  if (action.type == 'add_migration_link') {\n    InfectiousMatterRef.current.add_migration_link(action.payload.from_location, action.payload.to_location, action.payload.num_agents)\n  }\n  if (action.type == 'clear_migration_links') {\n    InfectiousMatterRef.current.migration_graph.clear();\n  }\n  if (action.type == 'remove_migration_link') {\n    InfectiousMatterRef.current.remove_migration_link(action.payload.from_location, action.payload.to_location)\n  }\n  if (action.type == 'get_state_counts') {\n    return { state_counts: InfectiousMatterRef.current.state_counts, cur_time: InfectiousMatterRef.current.cur_sim_time / InfectiousMatterRef.current.simulation_params.sim_time_per_day };\n  }\n  if (action.type == 'set_num_mask') {\n    // get current num of people masked\n    let masked_list = [];\n    let unmasked_list = [];\n    InfectiousMatterRef.current.agents.forEach((agent) => {\n      if (agent.masked) {\n        masked_list.push(agent);\n      }\n      else {\n        unmasked_list.push(agent);\n      }\n    });\n\n    let cur_num_masked = masked_list.length;\n    let num_needing_masks = action.payload.num_masked - cur_num_masked;\n    if (num_needing_masks > 0) {\n      for (let i = 0; i < num_needing_masks; i++) {\n        unmasked_list[i].masked = true;\n      }\n    } else if (num_needing_masks < 0) {\n      for (let i = 0; i < -num_needing_masks; i++) {\n        masked_list[i].masked = false;\n      }\n    }\n  }\n\n  if (action.type == \"set_pop_size\") {\n    //target pop size - current pop size:\n    let num_to_add = action.payload.pop_size - InfectiousMatterRef.current.agents.length;\n\n    if (num_to_add > 0) {\n      for (let i = 0; i < num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, { type: 'add_random_agent' });\n      }\n    } else if (num_to_add < 0) {\n      for (let i = 0; i < -num_to_add; i++) {\n        InfectiousMatterAPI(InfectiousMatterRef, { type: 'remove_random_agent' });\n      }\n    }\n\n  };\n};\n\n\n\nconst InfectiousMatterContainer = (props) => {\n  const classes = useStyles();\n  const InfectiousMatterRef = useRef(null);\n\n  const [locationImmunity, setLocationImmunity] = useState([0.1, 0.3, 0.5, 0.7, 0.9]);\n  const [popSize, setPopSize] = useState(600);\n\n\n  const [movementScale, setMovementScale] = useState(2.0);\n\n  const [redraw_trigger, setRedrawTrigger] = useState(0);\n  const [worldReadyTrigger, setWorldReadyTrigger] = useState(0);\n\n  const [reveal_1, setReveal_1] = useState(false);\n  const [reveal_2, setReveal_2] = useState(false);\n  const [reveal_3, setReveal_3] = useState(false);\n\n\n  /* This is a bit annoying because immunity is being changed in the setup of the simulator\n  which means we have to re-draw the element, and using the API doesn't make sense for these\n  kinds of actions...\n\n  I guess the right way would be to use useEffect and trigger on locationImmunity changes.\n  */\n  const resetImmunity = (immunity_values) => {\n    setLocationImmunity(immunity_values);\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'reset_simulator' });\n    setRedrawTrigger(c => c + 1);\n  };\n\n\n  const resetSimulation = (e) => {\n    resetImmunity([0.1, 0.3, 0.5, 0.7, 0.9]);\n  };\n\n  const infectAgents = (numToInfect) => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      {\n        type: 'infect_random_agent_everywhere',\n        payload: {\n          num_agents: numToInfect\n        }\n      });\n  };\n\n  //TODO All simulation changes in this code...\n  const onStepEnter = ({ element, data, direction }) => {\n    if (direction == \"up\") return;\n    console.log(data);\n\n    if (data == 1) {\n      setReveal_1(true)\n    }\n    if (data == 2) {\n      setReveal_2(true);\n    }\n    if (data == \"show_sim\") {\n      setReveal_3(true);\n    }\n    if (data == \"infect_agents\") {\n      infectAgents(1);\n    }\n    if (data == \"infect_3_agents\") {\n      resetImmunity([0.5, 0.5, 0.5, 0.5, 0.5]);\n      setMovementScale(1.5);\n      infectAgents(3);\n    }\n    if (data == \"movement_reinfect\") {\n      resetSimulation(\"none\");\n      setMovementScale(4);\n    }\n    if (data == \"single_immunity\") {\n      resetImmunity([0.5, 0.5, 0.5, 0.5, 0.5]);\n      setMovementScale(1.5);\n    }\n\n  };\n\n  function handlePopSizeSliderChange(event, newValue) {\n    setPopSize(newValue);\n  }\n\n  function handleMovementScaleChange(event, newValue) {\n    setMovementScale(newValue);\n  }\n\n  useEffect(() => {\n    InfectiousMatterAPI(\n      InfectiousMatterRef,\n      { type: 'update_movement_scale', payload: { movement_scale: movementScale } });\n  }, [movementScale])\n\n  useEffect(() => {\n    InfectiousMatterAPI(InfectiousMatterRef, { type: 'set_pop_size', payload: { pop_size: popSize } });\n    setWorldReadyTrigger(c => c + 1);\n  }, [popSize]);\n\n  return (\n  <div className=\"App\">\n    <Scrollama offset={0.5} onStepEnter={onStepEnter}>\n      <Step data={1} key={1}>\n        <Container className={classes.headingPanel}>\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n            Our Race Towards Herd Immunity\n          </Typography>\n\n          <BylineComponent date=\"April 9th, 2021\" />\n        </Container>\n      </Step>\n\n      <Step data={2} key={2}>\n        <Container>\n        <Grow in={true}>\n            <Container className={classes.subPanel}>\n                <Typography variant=\"h5\" gutterBottom>\n                  A year ago, I built <Link color=\"inherit\" href=\"https://infectiousmatter.com\">InfectiousMatter</Link> to help folks gain an intuition for disease transmission dynamics without having to wait and\n                  learn from our own mistakes. A year later, we've all unfortunately learned more than expected.\n                </Typography>\n                  <Link color=\"inherit\" href=\"https://infectiousmatter.com\">\n                    <img src=\"static/teaser.png\" height=\"200\" />\n                  </Link>\n            </Container>\n          </Grow>\n\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom className={classes.subPanel}>\n              Now we have multiple vaccines being administered around the world at incredible speeds (all things considered). We're truly racing\n              towards <i>herd immunity</i>. But how fast we get there and how many lives are saved along the way depend on\n              the decisions we collectively make in the next few months.\n            </Typography>\n          </Container>\n          \n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom className={classes.subPanels}>\n              Throughout the pandemic, limiting transmission has been critical to avoid overwhelming our\n              healthcare systems. While that is still the true, we have even more to gain (or lose) by making\n              hard choices in our final push towards a return to normalcy.\n            </Typography>\n          </Container>\n\n        </Container>\n  \n      </Step>\n\n      <Step data={123} key={123}>\n        <Container>\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom>\n              What is herd immunity anyway? \n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n                Roughly speaking, it's the level of immunity that will prevent a pathogen from spreading through a population. \n                The proportion of immune people needed depends on several details of the pathogen and the population. For SARS-CoV-2, we'll probably need to reach between 70% - 80% immune. \n                There was a <Link href=\"https://www.npr.org/sections/health-shots/2021/02/18/967462483/how-herd-immunity-works-and-what-stands-in-its-way\">really neat interactive</Link> on NPR that goes into more detail about what herd immunity is, and how it's affected by the more transmissible variants now circulating. \n            </Typography>\n\n            <Typography variant=\"h6\" gutterBottom>\n                However, our extreme focus on immunization is overshadowing a major part of the challenge we're facing. \n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom>\n              Don't get me wrong, vaccination absolutely deserves the attention and effort it's getting right now.\n              But it isn't our only hurdle left. With a large increase in infections here in Michigan and around the world,\n              our ability to end disease spread just by reaching herd immunity will be a major challenge.\n            </Typography>\n\n          </Container>\n        </Container>  \n      </Step> \n\n      <Step data={\"show_sim\"}>\n        <Container>\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom>\n              Exploring Herd Immunity\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              Let's use this interactive epidemic simulator to build our intuition for what herd immunity is, and what it isn't. As you scroll, you'll see a simulation appear where lots of grey balls are bouncing around in boxes. \n              These bouncing balls represent individuals, and each box represents a different independent community. If you missed the <Link href=\"https://infectiousmatter.com\">original walk-through for InfectiousMatter</Link>, definitely check it out for a longer introduction to this kind\n              of model of disease dynamics!\n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              You might notice that there are different borders on some of the bouncing balls. The dark border indicates <b>Susceptible</b> individuals, while the lighter border depicts <b>Immune</b> individuals. \n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              The level of immunity in a particular community (i.e., box) is a gradient that increases as you move from the left (at 10% immune) to the far right (90% immunity). \n            </Typography>\n          </Container>\n        </Container>\n      </Step>\n\n      <Step data={3} key={3}>\n        <Container className={classes.stickyContent}>\n        <Zoom in={reveal_3}>\n          <Card elevation={5} className={classes.sim_card}>\n          <Grid container className={classes.root} alignItems=\"center\" direction=\"column\" justify=\"flex-start\" spacing={0} margin={10}>\n\n            <Grid item >\n              <img src=\"static/legend.png\" width={400} />\n            </Grid>\n            <Grid item >\n                <Card className={classes.sim_paper}>\n\n                    <InfectiousMatterSimulation\n                      InfectiousMatterRef={InfectiousMatterRef}\n                      InfectiousMatterAPI={InfectiousMatterAPI}\n                      redraw_trigger={redraw_trigger}\n                      setWorldReadyTrigger={setWorldReadyTrigger}\n                      locationImmunity={locationImmunity}\n                      popSize={popSize}\n                    />\n\n                </Card>\n            </Grid>\n          </Grid>\n          </Card>\n\n          </Zoom>\n\n        </Container>\n\n      </Step>\n\n      <Step data={\"infect_agents\"} key={4}>\n        <Container>\n          <Container className={classes.subPanel}>\n            <Typography variant=\"h5\" gutterBottom>\n              Introducing a Single Infection\n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n             As you keep scrolling, you'll see a single individual turn red in each of the communities. This is an <b>Infected</b> agent that is capable of spreading infection to other susceptible individuals. \n             When infected agents recover, they retain a red border so you can easily see how big the epidemic was in each community. \n            </Typography>\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              This simulation is running live in your browser window, and randomness means each time you visit the page something slightly different will happen. Hopefully you could see that the \n              pathogen doesn't really take hold in communities with high levels of immunity.\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              At the end of this walk-through, you'll have a chance to re-run this simulation and manipulate some parameters to get a feeling for how they affect the pathogen spread!\n            </Typography>\n\n            <Typography variant=\"h6\" gutterBottom className={classes.topPadding}>\n              TODO: Add screenshots of many trials?\n            </Typography>\n          </Container>\n        </Container>\n\n\n      </Step>\n\n      <Step data={\"movement_reinfect\"} key={5}>\n        <Container className={classes.headingPanel}>\n          <Container>\n          <Typography variant=\"h5\" gutterBottom>\n                Relaxed Social Distancing\n              </Typography>\n\n              <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n                Pandemic burnout is real. And if you mix that with the nice weather, increasingly accessible vaccines, and easing restrictions, it's easy to imagine people also starting to relax their\n                own cautious behaviors. \n              </Typography>\n\n          </Container>\n        </Container>\n      </Step>\n      <Step data={\"infect_agents\"} key={12}>\n        <Container>\n        <Container>\n          <Typography variant=\"h5\" gutterBottom className={classes.topPadding}>\n            <br/>\n             Now let's see what happens when the same single infected agent does in our more active populations. \n          </Typography>\n\n          <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n             You probably noticed that more individuals ended up infected, and the pathogen might have spread in communities that were previously protected. \n          </Typography>\n          <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n             That's because increasing interactions also increases the \n             amount of immunity required to protect a community. \n          </Typography>\n\n          <Typography variant=\"h6\" gutterBottom className={classes.topPadding}>\n              TODO: Add screenshots of many trials?\n          </Typography>\n\n        </Container>\n        </Container>\n\n      </Step>\n\n      <Step data={\"single_immunity\"} key={6}>\n        <Container>\n          <Container className={classes.headingPanel}>\n            <Typography variant=\"h5\" gutterBottom className={classes.topPadding}>\n              Focusing on Intermediate Immunity\n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n             Let's slow things down and set the level of immunity to be 50% in every community. I'm doing this so you can see how \n              random chance plays a critical role in whether or not a large outbreak occurs when infections are introduced. \n          </Typography>\n\n          </Container>\n        </Container>\n      </Step>\n      <Step data={\"infect_agents\"} key={17}>\n        <Container>\n          <Container className={classes.topPadding}>\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              When you scrolled here, we'll automatically infect a single agent in each population again. You'll hopefully see that some communities remain almost entirely untouched while others have large outbreaks. \n            </Typography>\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              Remember that each community has the same amount of immunity, so the differences between outbreaks is entirely driven by chance! \n            </Typography>\n\n            <div className={classes.subPanel}>\n              <Typography variant=\"h5\" gutterBottom >\n                This is precisely when small changes in behavior can have HUGE effects on the severity of an outbreak! \n              </Typography>\n            </div>\n\n\n          </Container>\n        </Container>\n\n      </Step>\n      <Step data={\"infect_3_agents\"} key={8}>\n      <Container>\n          <Container>\n            <Typography variant=\"h5\" gutterBottom className={classes.topPadding}>\n              For Example\n            </Typography>\n\n            <Typography variant=\"body1\" gutterBottom className={classes.topPadding}>\n              Even a slight increase in the number of infections that are introduced to communities can shift the balance towards larger outbreaks. \n          </Typography>\n\n          </Container>\n        </Container>\n      </Step>\n      <Step data={\"something\"} key={7}>\n        <Container>\n          <Container>\n            <Typography>\n              Just going from 1 to 3 infected individuals, the outbreaks are substantially larger!\n            </Typography>\n            <Typography variant=\"h6\" gutterBottom className={classes.topPadding}>\n              TODO: Add screenshots of many trials? (both with 1 and with 3)\n            </Typography>\n          </Container>\n        </Container>\n      </Step>\n\n      <Step>\n      <Container className={classes.contentPanel}>\n        <Container>\n          <Typography variant=\"h4\" gutterBottom color=\"secondary\">\n            Takeaway\n          </Typography>\n          <Typography variant=\"h6\" gutterBottom className={classes.topPadding}>\n            Vaccination absolutely works as a way to reduce the number and severity of disease outbreaks. But it isn't the only \n            ingredient needed to stop a pandemic. \n          </Typography>\n\n          <Typography variant=\"h6\" gutterBottom className={classes.topPadding}>\n            As we rapidly approach herd immunity, controling the spread of outbreaks that are ongoing and preventing new ones from starting will be critical. \n            As you've now seen first hand, small effects are amplified when we're close to herd immunity, and that can \n            help us get back to normal faster — or not. \n          </Typography>\n        </Container>\n      </Container>\n      </Step>\n\n\n      <Step>\n    <Container>\n      <Container>\n      <Card className={classes.controlCard}>\n      <List component=\"div\" dense> \n        <ListSubheader> Population Settings</ListSubheader>\n        <ListItem>\n          <ListItemText>Individual Movement</ListItemText>\n          <ListItemSecondaryAction className={classes.slider}>\n          <Slider\n                value={movementScale}\n                valueLabelDisplay=\"off\"\n                onChange={handleMovementScaleChange}\n                step={0.25}\n                min={0}\n                max={10}\n              />\n          </ListItemSecondaryAction>\n        </ListItem>\n        <Divider/>\n\n        <ListSubheader>Reset Population</ListSubheader>\n        <ListItem>\n          <ListItemText primary=\"Reset With Immunity Gradient\" secondary=\"(10% - 90%)\"></ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={() => {resetSimulation()}} color=\"primary\">\n              <ReplayIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n\n        <ListItem>\n          <ListItemText>Reset All To 50% Immunity</ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={() => {resetImmunity([0.5, 0.5, 0.5, 0.5, 0.5])}} color=\"primary\">\n              <ReplayIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n\n        <ListItem>\n          <ListItemText>Reset All To 80% Immunity</ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={() => {resetImmunity([0.8, 0.8, 0.8, 0.8, 0.8])}} color=\"primary\">\n              <ReplayIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <Divider/>\n\n        <ListSubheader>Infection Actions</ListSubheader>\n        <ListItem>\n          <ListItemText primary=\"Infect One Individual\" secondary=\"per population\"></ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={()=>{infectAgents(1)}} color=\"secondary\">\n              <FlashOnIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <ListItemText primary=\"Infect Two Individuals\" ></ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={()=>{infectAgents(2)}} color=\"secondary\">\n              <FlashOnIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <ListItemText primary=\"Infect Three Individuals\"></ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton size=\"small\" onClick={()=>{infectAgents(3)}} color=\"secondary\">\n              <FlashOnIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      </List>\n      </Card>\n    </Container>\n    </Container>\n      </Step>\n      <Step>\n      <Container className={classes.subPanel}>\n      \n      </Container>\n      </Step>\n    </Scrollama>\n    \n</div>)\n}\n\nexport default InfectiousMatterContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfectiousMatterContainer from './SimComponents/InfectiousMatterContainer.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfectiousMatterContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}